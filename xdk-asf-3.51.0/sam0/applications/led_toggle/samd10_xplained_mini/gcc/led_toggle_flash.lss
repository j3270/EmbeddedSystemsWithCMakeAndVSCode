
led_toggle_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000998  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000998  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  20000004  0000099c  00020004  2**2
                  ALLOC
  3 .stack        00000400  20000040  000009d8  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      0000004d  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008e86  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001695  00000000  00000000  00028eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loc    00001c04  00000000  00000000  0002a594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000220  00000000  00000000  0002c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 00000310  00000000  00000000  0002c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00012e3f  00000000  00000000  0002c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000067f1  00000000  00000000  0003f507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0006ccd2  00000000  00000000  00045cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000004cc  00000000  00000000  000b29cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
   0:	40 04 00 20 09 07 00 00 07 07 00 00 07 07 00 00     @.. ............
	...
  2c:	07 07 00 00 00 00 00 00 00 00 00 00 07 07 00 00     ................
  3c:	45 01 00 00 07 07 00 00 07 07 00 00 07 07 00 00     E...............
  4c:	07 07 00 00 07 07 00 00 07 07 00 00 07 07 00 00     ................
  5c:	00 00 00 00 07 07 00 00 07 07 00 00 07 07 00 00     ................
  6c:	07 07 00 00 07 07 00 00 07 07 00 00 07 07 00 00     ................
  7c:	07 07 00 00 07 07 00 00 07 07 00 00 07 07 00 00     ................

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000004 	.word	0x20000004
  ac:	00000000 	.word	0x00000000
  b0:	00000998 	.word	0x00000998

000000b4 <frame_dummy>:
  b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
  b6:	b510      	push	{r4, lr}
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
  be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	bd10      	pop	{r4, pc}
  c6:	46c0      	nop			; (mov r8, r8)
  c8:	00000000 	.word	0x00000000
  cc:	20000008 	.word	0x20000008
  d0:	00000998 	.word	0x00000998

000000d4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
  d4:	4b0c      	ldr	r3, [pc, #48]	; (108 <cpu_irq_enter_critical+0x34>)
  d6:	681b      	ldr	r3, [r3, #0]
  d8:	2b00      	cmp	r3, #0
  da:	d10c      	bne.n	f6 <cpu_irq_enter_critical+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  dc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
  e0:	2b00      	cmp	r3, #0
  e2:	d10d      	bne.n	100 <cpu_irq_enter_critical+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
  e4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  e6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
  ea:	4b08      	ldr	r3, [pc, #32]	; (10c <cpu_irq_enter_critical+0x38>)
  ec:	2200      	movs	r2, #0
  ee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
  f0:	4b07      	ldr	r3, [pc, #28]	; (110 <cpu_irq_enter_critical+0x3c>)
  f2:	3201      	adds	r2, #1
  f4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
  f6:	4a04      	ldr	r2, [pc, #16]	; (108 <cpu_irq_enter_critical+0x34>)
  f8:	6813      	ldr	r3, [r2, #0]
  fa:	3301      	adds	r3, #1
  fc:	6013      	str	r3, [r2, #0]
}
  fe:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
 100:	4b03      	ldr	r3, [pc, #12]	; (110 <cpu_irq_enter_critical+0x3c>)
 102:	2200      	movs	r2, #0
 104:	701a      	strb	r2, [r3, #0]
 106:	e7f6      	b.n	f6 <cpu_irq_enter_critical+0x22>
 108:	20000020 	.word	0x20000020
 10c:	20000000 	.word	0x20000000
 110:	20000024 	.word	0x20000024

00000114 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 114:	4b08      	ldr	r3, [pc, #32]	; (138 <cpu_irq_leave_critical+0x24>)
 116:	681a      	ldr	r2, [r3, #0]
 118:	3a01      	subs	r2, #1
 11a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 11c:	681b      	ldr	r3, [r3, #0]
 11e:	2b00      	cmp	r3, #0
 120:	d109      	bne.n	136 <cpu_irq_leave_critical+0x22>
 122:	4b06      	ldr	r3, [pc, #24]	; (13c <cpu_irq_leave_critical+0x28>)
 124:	781b      	ldrb	r3, [r3, #0]
 126:	2b00      	cmp	r3, #0
 128:	d005      	beq.n	136 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 12a:	4b05      	ldr	r3, [pc, #20]	; (140 <cpu_irq_leave_critical+0x2c>)
 12c:	2201      	movs	r2, #1
 12e:	701a      	strb	r2, [r3, #0]
 130:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 134:	b662      	cpsie	i
	}
}
 136:	4770      	bx	lr
 138:	20000020 	.word	0x20000020
 13c:	20000024 	.word	0x20000024
 140:	20000000 	.word	0x20000000

00000144 <SysTick_Handler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 144:	4b02      	ldr	r3, [pc, #8]	; (150 <SysTick_Handler+0xc>)
 146:	2280      	movs	r2, #128	; 0x80
 148:	0092      	lsls	r2, r2, #2
 14a:	61da      	str	r2, [r3, #28]
 *        vector table.
 */
void SysTick_Handler(void)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
 14c:	4770      	bx	lr
 14e:	46c0      	nop			; (mov r8, r8)
 150:	41004400 	.word	0x41004400

00000154 <main>:
	port_pin_set_config(LED_0_PIN, &pin_conf);
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}

int main(void)
{
 154:	b500      	push	{lr}
 156:	b083      	sub	sp, #12
	system_init();
 158:	f000 fac9 	bl	6ee <system_init>

	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
 15c:	2000      	movs	r0, #0
 15e:	f000 f9d3 	bl	508 <system_gclk_gen_get_hz>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 162:	3801      	subs	r0, #1
 164:	2380      	movs	r3, #128	; 0x80
 166:	045b      	lsls	r3, r3, #17
 168:	4298      	cmp	r0, r3
 16a:	d20d      	bcs.n	188 <main+0x34>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 16c:	4a0d      	ldr	r2, [pc, #52]	; (1a4 <main+0x50>)
 16e:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 170:	480d      	ldr	r0, [pc, #52]	; (1a8 <main+0x54>)
 172:	6a03      	ldr	r3, [r0, #32]
 174:	021b      	lsls	r3, r3, #8
 176:	0a1b      	lsrs	r3, r3, #8
 178:	21c0      	movs	r1, #192	; 0xc0
 17a:	0609      	lsls	r1, r1, #24
 17c:	430b      	orrs	r3, r1
 17e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 180:	2300      	movs	r3, #0
 182:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 184:	3307      	adds	r3, #7
 186:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
 188:	a901      	add	r1, sp, #4
 18a:	2301      	movs	r3, #1
 18c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 18e:	2200      	movs	r2, #0
 190:	708a      	strb	r2, [r1, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 192:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 194:	2009      	movs	r0, #9
 196:	f000 f825 	bl	1e4 <port_pin_set_config>
		port_base->OUTCLR.reg = pin_mask;
 19a:	4b04      	ldr	r3, [pc, #16]	; (1ac <main+0x58>)
 19c:	2280      	movs	r2, #128	; 0x80
 19e:	0092      	lsls	r2, r2, #2
 1a0:	615a      	str	r2, [r3, #20]

	config_led();

	while (true) {
 1a2:	e7fe      	b.n	1a2 <main+0x4e>
 1a4:	e000e010 	.word	0xe000e010
 1a8:	e000ed00 	.word	0xe000ed00
 1ac:	41004400 	.word	0x41004400

000001b0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 1b0:	b570      	push	{r4, r5, r6, lr}
 1b2:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
 1b4:	ac01      	add	r4, sp, #4
 1b6:	2501      	movs	r5, #1
 1b8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 1ba:	2600      	movs	r6, #0
 1bc:	70a6      	strb	r6, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 1be:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 1c0:	0021      	movs	r1, r4
 1c2:	2009      	movs	r0, #9
 1c4:	f000 f80e 	bl	1e4 <port_pin_set_config>
		port_base->OUTCLR.reg = pin_mask;
 1c8:	4b05      	ldr	r3, [pc, #20]	; (1e0 <system_board_init+0x30>)
 1ca:	2280      	movs	r2, #128	; 0x80
 1cc:	0092      	lsls	r2, r2, #2
 1ce:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 1d0:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 1d2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 1d4:	0021      	movs	r1, r4
 1d6:	2019      	movs	r0, #25
 1d8:	f000 f804 	bl	1e4 <port_pin_set_config>
}
 1dc:	b002      	add	sp, #8
 1de:	bd70      	pop	{r4, r5, r6, pc}
 1e0:	41004400 	.word	0x41004400

000001e4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1e4:	b500      	push	{lr}
 1e6:	b083      	sub	sp, #12
 1e8:	000b      	movs	r3, r1
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1ea:	a901      	add	r1, sp, #4
 1ec:	2280      	movs	r2, #128	; 0x80
 1ee:	700a      	strb	r2, [r1, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1f0:	781a      	ldrb	r2, [r3, #0]
 1f2:	704a      	strb	r2, [r1, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1f4:	785a      	ldrb	r2, [r3, #1]
 1f6:	708a      	strb	r2, [r1, #2]
	pinmux_config.powersave    = config->powersave;
 1f8:	789b      	ldrb	r3, [r3, #2]
 1fa:	70cb      	strb	r3, [r1, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1fc:	f000 fa60 	bl	6c0 <system_pinmux_pin_set_config>
}
 200:	b003      	add	sp, #12
 202:	bd00      	pop	{pc}

00000204 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 204:	b510      	push	{r4, lr}
	switch (clock_source) {
 206:	2808      	cmp	r0, #8
 208:	d803      	bhi.n	212 <system_clock_source_get_hz+0xe>
 20a:	0080      	lsls	r0, r0, #2
 20c:	4b1d      	ldr	r3, [pc, #116]	; (284 <system_clock_source_get_hz+0x80>)
 20e:	581b      	ldr	r3, [r3, r0]
 210:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
 212:	2000      	movs	r0, #0
 214:	e033      	b.n	27e <system_clock_source_get_hz+0x7a>
		return _system_clock_inst.xosc.frequency;
 216:	4b1c      	ldr	r3, [pc, #112]	; (288 <system_clock_source_get_hz+0x84>)
 218:	6918      	ldr	r0, [r3, #16]
 21a:	e030      	b.n	27e <system_clock_source_get_hz+0x7a>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 21c:	4b1b      	ldr	r3, [pc, #108]	; (28c <system_clock_source_get_hz+0x88>)
 21e:	6a1b      	ldr	r3, [r3, #32]
 220:	059b      	lsls	r3, r3, #22
 222:	0f9b      	lsrs	r3, r3, #30
 224:	481a      	ldr	r0, [pc, #104]	; (290 <system_clock_source_get_hz+0x8c>)
 226:	40d8      	lsrs	r0, r3
 228:	e029      	b.n	27e <system_clock_source_get_hz+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
 22a:	4b17      	ldr	r3, [pc, #92]	; (288 <system_clock_source_get_hz+0x84>)
 22c:	6958      	ldr	r0, [r3, #20]
 22e:	e026      	b.n	27e <system_clock_source_get_hz+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 230:	4b15      	ldr	r3, [pc, #84]	; (288 <system_clock_source_get_hz+0x84>)
 232:	681b      	ldr	r3, [r3, #0]
 234:	2202      	movs	r2, #2
 236:	0010      	movs	r0, r2
 238:	4018      	ands	r0, r3
 23a:	421a      	tst	r2, r3
 23c:	d01f      	beq.n	27e <system_clock_source_get_hz+0x7a>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 23e:	4913      	ldr	r1, [pc, #76]	; (28c <system_clock_source_get_hz+0x88>)
 240:	320e      	adds	r2, #14
 242:	68cb      	ldr	r3, [r1, #12]
 244:	421a      	tst	r2, r3
 246:	d0fc      	beq.n	242 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
 248:	4b0f      	ldr	r3, [pc, #60]	; (288 <system_clock_source_get_hz+0x84>)
 24a:	681a      	ldr	r2, [r3, #0]
 24c:	2324      	movs	r3, #36	; 0x24
 24e:	4013      	ands	r3, r2
 250:	2b04      	cmp	r3, #4
 252:	d001      	beq.n	258 <system_clock_source_get_hz+0x54>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		default:
			return 48000000UL;
 254:	480f      	ldr	r0, [pc, #60]	; (294 <system_clock_source_get_hz+0x90>)
 256:	e012      	b.n	27e <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 258:	2000      	movs	r0, #0
 25a:	f000 f9c9 	bl	5f0 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
 25e:	4b0a      	ldr	r3, [pc, #40]	; (288 <system_clock_source_get_hz+0x84>)
 260:	689b      	ldr	r3, [r3, #8]
 262:	041b      	lsls	r3, r3, #16
 264:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 266:	4358      	muls	r0, r3
 268:	e009      	b.n	27e <system_clock_source_get_hz+0x7a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
 26a:	4a08      	ldr	r2, [pc, #32]	; (28c <system_clock_source_get_hz+0x88>)
 26c:	2350      	movs	r3, #80	; 0x50
 26e:	5cd3      	ldrb	r3, [r2, r3]
 270:	075b      	lsls	r3, r3, #29
 272:	d505      	bpl.n	280 <system_clock_source_get_hz+0x7c>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
 274:	4b04      	ldr	r3, [pc, #16]	; (288 <system_clock_source_get_hz+0x84>)
 276:	68d8      	ldr	r0, [r3, #12]
 278:	e001      	b.n	27e <system_clock_source_get_hz+0x7a>
		return 32768UL;
 27a:	2080      	movs	r0, #128	; 0x80
 27c:	0200      	lsls	r0, r0, #8
#endif

	default:
		return 0;
	}
}
 27e:	bd10      	pop	{r4, pc}
			return 0;
 280:	2000      	movs	r0, #0
 282:	e7fc      	b.n	27e <system_clock_source_get_hz+0x7a>
 284:	00000930 	.word	0x00000930
 288:	20000028 	.word	0x20000028
 28c:	40000800 	.word	0x40000800
 290:	007a1200 	.word	0x007a1200
 294:	02dc6c00 	.word	0x02dc6c00

00000298 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 298:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 29a:	490c      	ldr	r1, [pc, #48]	; (2cc <system_clock_source_osc8m_set_config+0x34>)
 29c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 29e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 2a0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 2a2:	7840      	ldrb	r0, [r0, #1]
 2a4:	2201      	movs	r2, #1
 2a6:	4010      	ands	r0, r2
 2a8:	0180      	lsls	r0, r0, #6
 2aa:	2640      	movs	r6, #64	; 0x40
 2ac:	43b3      	bics	r3, r6
 2ae:	4303      	orrs	r3, r0
 2b0:	402a      	ands	r2, r5
 2b2:	01d2      	lsls	r2, r2, #7
 2b4:	2080      	movs	r0, #128	; 0x80
 2b6:	4383      	bics	r3, r0
 2b8:	4313      	orrs	r3, r2
 2ba:	2203      	movs	r2, #3
 2bc:	4022      	ands	r2, r4
 2be:	0212      	lsls	r2, r2, #8
 2c0:	4803      	ldr	r0, [pc, #12]	; (2d0 <system_clock_source_osc8m_set_config+0x38>)
 2c2:	4003      	ands	r3, r0
 2c4:	4313      	orrs	r3, r2
 2c6:	620b      	str	r3, [r1, #32]
}
 2c8:	bd70      	pop	{r4, r5, r6, pc}
 2ca:	46c0      	nop			; (mov r8, r8)
 2cc:	40000800 	.word	0x40000800
 2d0:	fffffcff 	.word	0xfffffcff

000002d4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 2d4:	2808      	cmp	r0, #8
 2d6:	d803      	bhi.n	2e0 <system_clock_source_enable+0xc>
 2d8:	0083      	lsls	r3, r0, #2
 2da:	4a25      	ldr	r2, [pc, #148]	; (370 <system_clock_source_enable+0x9c>)
 2dc:	58d3      	ldr	r3, [r2, r3]
 2de:	469f      	mov	pc, r3
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 2e0:	2017      	movs	r0, #23
}
 2e2:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 2e4:	4a23      	ldr	r2, [pc, #140]	; (374 <system_clock_source_enable+0xa0>)
 2e6:	6a13      	ldr	r3, [r2, #32]
 2e8:	2102      	movs	r1, #2
 2ea:	430b      	orrs	r3, r1
 2ec:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 2ee:	2000      	movs	r0, #0
 2f0:	e7f7      	b.n	2e2 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 2f2:	4a20      	ldr	r2, [pc, #128]	; (374 <system_clock_source_enable+0xa0>)
 2f4:	6993      	ldr	r3, [r2, #24]
 2f6:	2102      	movs	r1, #2
 2f8:	430b      	orrs	r3, r1
 2fa:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
 2fc:	2000      	movs	r0, #0
		break;
 2fe:	e7f0      	b.n	2e2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 300:	4a1c      	ldr	r2, [pc, #112]	; (374 <system_clock_source_enable+0xa0>)
 302:	8a13      	ldrh	r3, [r2, #16]
 304:	2102      	movs	r1, #2
 306:	430b      	orrs	r3, r1
 308:	8213      	strh	r3, [r2, #16]
		break;
 30a:	e7ea      	b.n	2e2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 30c:	4a19      	ldr	r2, [pc, #100]	; (374 <system_clock_source_enable+0xa0>)
 30e:	8a93      	ldrh	r3, [r2, #20]
 310:	2102      	movs	r1, #2
 312:	430b      	orrs	r3, r1
 314:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 316:	2000      	movs	r0, #0
		break;
 318:	e7e3      	b.n	2e2 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 31a:	4917      	ldr	r1, [pc, #92]	; (378 <system_clock_source_enable+0xa4>)
 31c:	680b      	ldr	r3, [r1, #0]
 31e:	2202      	movs	r2, #2
 320:	4313      	orrs	r3, r2
 322:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 324:	4b13      	ldr	r3, [pc, #76]	; (374 <system_clock_source_enable+0xa0>)
 326:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 328:	0019      	movs	r1, r3
 32a:	320e      	adds	r2, #14
 32c:	68cb      	ldr	r3, [r1, #12]
 32e:	421a      	tst	r2, r3
 330:	d0fc      	beq.n	32c <system_clock_source_enable+0x58>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 332:	4a11      	ldr	r2, [pc, #68]	; (378 <system_clock_source_enable+0xa4>)
 334:	6891      	ldr	r1, [r2, #8]
 336:	4b0f      	ldr	r3, [pc, #60]	; (374 <system_clock_source_enable+0xa0>)
 338:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 33a:	6852      	ldr	r2, [r2, #4]
 33c:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 33e:	2200      	movs	r2, #0
 340:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 342:	0019      	movs	r1, r3
 344:	3210      	adds	r2, #16
 346:	68cb      	ldr	r3, [r1, #12]
 348:	421a      	tst	r2, r3
 34a:	d0fc      	beq.n	346 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 34c:	4b0a      	ldr	r3, [pc, #40]	; (378 <system_clock_source_enable+0xa4>)
 34e:	681b      	ldr	r3, [r3, #0]
 350:	b29b      	uxth	r3, r3
 352:	4a08      	ldr	r2, [pc, #32]	; (374 <system_clock_source_enable+0xa0>)
 354:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 356:	2000      	movs	r0, #0
}
 358:	e7c3      	b.n	2e2 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 35a:	4906      	ldr	r1, [pc, #24]	; (374 <system_clock_source_enable+0xa0>)
 35c:	2244      	movs	r2, #68	; 0x44
 35e:	5c8b      	ldrb	r3, [r1, r2]
 360:	2002      	movs	r0, #2
 362:	4303      	orrs	r3, r0
 364:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 366:	2000      	movs	r0, #0
		break;
 368:	e7bb      	b.n	2e2 <system_clock_source_enable+0xe>
		return STATUS_OK;
 36a:	2000      	movs	r0, #0
 36c:	e7b9      	b.n	2e2 <system_clock_source_enable+0xe>
 36e:	46c0      	nop			; (mov r8, r8)
 370:	00000954 	.word	0x00000954
 374:	40000800 	.word	0x40000800
 378:	20000028 	.word	0x20000028

0000037c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 37c:	b530      	push	{r4, r5, lr}
 37e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 380:	4b1b      	ldr	r3, [pc, #108]	; (3f0 <system_clock_init+0x74>)
 382:	22c2      	movs	r2, #194	; 0xc2
 384:	00d2      	lsls	r2, r2, #3
 386:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 388:	4a1a      	ldr	r2, [pc, #104]	; (3f4 <system_clock_init+0x78>)
 38a:	6853      	ldr	r3, [r2, #4]
 38c:	211e      	movs	r1, #30
 38e:	438b      	bics	r3, r1
 390:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 392:	2301      	movs	r3, #1
 394:	466a      	mov	r2, sp
 396:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 398:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 39a:	b2e0      	uxtb	r0, r4
 39c:	4669      	mov	r1, sp
 39e:	f000 f91b 	bl	5d8 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 3a2:	3401      	adds	r4, #1
 3a4:	2c18      	cmp	r4, #24
 3a6:	d1f8      	bne.n	39a <system_clock_init+0x1e>
	config->run_in_standby  = false;
 3a8:	a803      	add	r0, sp, #12
 3aa:	2400      	movs	r4, #0
 3ac:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 3ae:	2501      	movs	r5, #1
 3b0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 3b2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 3b4:	f7ff ff70 	bl	298 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 3b8:	2006      	movs	r0, #6
 3ba:	f7ff ff8b 	bl	2d4 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 3be:	f000 f81d 	bl	3fc <system_gclk_init>
	PM->CPUSEL.reg = (uint32_t)divider;
 3c2:	4b0d      	ldr	r3, [pc, #52]	; (3f8 <system_clock_init+0x7c>)
 3c4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 3c6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 3c8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 3ca:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 3cc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 3ce:	466b      	mov	r3, sp
 3d0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 3d2:	2306      	movs	r3, #6
 3d4:	466a      	mov	r2, sp
 3d6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 3d8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 3da:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 3dc:	4669      	mov	r1, sp
 3de:	2000      	movs	r0, #0
 3e0:	f000 f81e 	bl	420 <system_gclk_gen_set_config>
 3e4:	2000      	movs	r0, #0
 3e6:	f000 f871 	bl	4cc <system_gclk_gen_enable>
#endif
}
 3ea:	b005      	add	sp, #20
 3ec:	bd30      	pop	{r4, r5, pc}
 3ee:	46c0      	nop			; (mov r8, r8)
 3f0:	40000800 	.word	0x40000800
 3f4:	41004000 	.word	0x41004000
 3f8:	40000400 	.word	0x40000400

000003fc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 3fc:	4a06      	ldr	r2, [pc, #24]	; (418 <STACK_SIZE+0x18>)
 3fe:	6993      	ldr	r3, [r2, #24]
 400:	2108      	movs	r1, #8
 402:	430b      	orrs	r3, r1
 404:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 406:	4b05      	ldr	r3, [pc, #20]	; (41c <STACK_SIZE+0x1c>)
 408:	2201      	movs	r2, #1
 40a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 40c:	0019      	movs	r1, r3
 40e:	780b      	ldrb	r3, [r1, #0]
 410:	4213      	tst	r3, r2
 412:	d1fc      	bne.n	40e <STACK_SIZE+0xe>
		/* Wait for reset to complete */
	}
}
 414:	4770      	bx	lr
 416:	46c0      	nop			; (mov r8, r8)
 418:	40000400 	.word	0x40000400
 41c:	40000c00 	.word	0x40000c00

00000420 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 420:	b570      	push	{r4, r5, r6, lr}
 422:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 424:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 426:	780c      	ldrb	r4, [r1, #0]
 428:	0224      	lsls	r4, r4, #8
 42a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 42c:	784b      	ldrb	r3, [r1, #1]
 42e:	2b00      	cmp	r3, #0
 430:	d002      	beq.n	438 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 432:	2380      	movs	r3, #128	; 0x80
 434:	02db      	lsls	r3, r3, #11
 436:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 438:	7a4b      	ldrb	r3, [r1, #9]
 43a:	2b00      	cmp	r3, #0
 43c:	d002      	beq.n	444 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 43e:	2380      	movs	r3, #128	; 0x80
 440:	031b      	lsls	r3, r3, #12
 442:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 444:	684a      	ldr	r2, [r1, #4]
 446:	2a01      	cmp	r2, #1
 448:	d910      	bls.n	46c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 44a:	1e53      	subs	r3, r2, #1
 44c:	0015      	movs	r5, r2
 44e:	401d      	ands	r5, r3
 450:	421a      	tst	r2, r3
 452:	d130      	bne.n	4b6 <system_gclk_gen_set_config+0x96>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 454:	2a02      	cmp	r2, #2
 456:	d904      	bls.n	462 <system_gclk_gen_set_config+0x42>
 458:	2302      	movs	r3, #2
						mask <<= 1) {
				div2_count++;
 45a:	3501      	adds	r5, #1
						mask <<= 1) {
 45c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 45e:	429a      	cmp	r2, r3
 460:	d8fb      	bhi.n	45a <system_gclk_gen_set_config+0x3a>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 462:	022d      	lsls	r5, r5, #8
 464:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 466:	2380      	movs	r3, #128	; 0x80
 468:	035b      	lsls	r3, r3, #13
 46a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 46c:	7a0b      	ldrb	r3, [r1, #8]
 46e:	2b00      	cmp	r3, #0
 470:	d002      	beq.n	478 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 472:	2380      	movs	r3, #128	; 0x80
 474:	039b      	lsls	r3, r3, #14
 476:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 478:	4a12      	ldr	r2, [pc, #72]	; (4c4 <system_gclk_gen_set_config+0xa4>)
 47a:	7853      	ldrb	r3, [r2, #1]
 47c:	b25b      	sxtb	r3, r3
 47e:	2b00      	cmp	r3, #0
 480:	dbfb      	blt.n	47a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 482:	f7ff fe27 	bl	d4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 486:	4b10      	ldr	r3, [pc, #64]	; (4c8 <system_gclk_gen_set_config+0xa8>)
 488:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 48a:	4a0e      	ldr	r2, [pc, #56]	; (4c4 <system_gclk_gen_set_config+0xa4>)
 48c:	7853      	ldrb	r3, [r2, #1]
 48e:	b25b      	sxtb	r3, r3
 490:	2b00      	cmp	r3, #0
 492:	dbfb      	blt.n	48c <system_gclk_gen_set_config+0x6c>

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 494:	4b0b      	ldr	r3, [pc, #44]	; (4c4 <system_gclk_gen_set_config+0xa4>)
 496:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 498:	001a      	movs	r2, r3
 49a:	7853      	ldrb	r3, [r2, #1]
 49c:	b25b      	sxtb	r3, r3
 49e:	2b00      	cmp	r3, #0
 4a0:	dbfb      	blt.n	49a <system_gclk_gen_set_config+0x7a>

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 4a2:	4a08      	ldr	r2, [pc, #32]	; (4c4 <system_gclk_gen_set_config+0xa4>)
 4a4:	6853      	ldr	r3, [r2, #4]
 4a6:	2180      	movs	r1, #128	; 0x80
 4a8:	0249      	lsls	r1, r1, #9
 4aa:	400b      	ands	r3, r1
 4ac:	431c      	orrs	r4, r3
 4ae:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4b0:	f7ff fe30 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
 4b4:	bd70      	pop	{r4, r5, r6, pc}
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 4b6:	0215      	lsls	r5, r2, #8
			new_gendiv_config  |=
 4b8:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 4ba:	2380      	movs	r3, #128	; 0x80
 4bc:	029b      	lsls	r3, r3, #10
 4be:	431c      	orrs	r4, r3
 4c0:	e7d4      	b.n	46c <system_gclk_gen_set_config+0x4c>
 4c2:	46c0      	nop			; (mov r8, r8)
 4c4:	40000c00 	.word	0x40000c00
 4c8:	40000c08 	.word	0x40000c08

000004cc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 4cc:	b510      	push	{r4, lr}
 4ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4d0:	4a0b      	ldr	r2, [pc, #44]	; (500 <system_gclk_gen_enable+0x34>)
 4d2:	7853      	ldrb	r3, [r2, #1]
 4d4:	b25b      	sxtb	r3, r3
 4d6:	2b00      	cmp	r3, #0
 4d8:	dbfb      	blt.n	4d2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 4da:	f7ff fdfb 	bl	d4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 4de:	4b09      	ldr	r3, [pc, #36]	; (504 <system_gclk_gen_enable+0x38>)
 4e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4e2:	4a07      	ldr	r2, [pc, #28]	; (500 <system_gclk_gen_enable+0x34>)
 4e4:	7853      	ldrb	r3, [r2, #1]
 4e6:	b25b      	sxtb	r3, r3
 4e8:	2b00      	cmp	r3, #0
 4ea:	dbfb      	blt.n	4e4 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 4ec:	4a04      	ldr	r2, [pc, #16]	; (500 <system_gclk_gen_enable+0x34>)
 4ee:	6851      	ldr	r1, [r2, #4]
 4f0:	2380      	movs	r3, #128	; 0x80
 4f2:	025b      	lsls	r3, r3, #9
 4f4:	430b      	orrs	r3, r1
 4f6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 4f8:	f7ff fe0c 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
 4fc:	bd10      	pop	{r4, pc}
 4fe:	46c0      	nop			; (mov r8, r8)
 500:	40000c00 	.word	0x40000c00
 504:	40000c04 	.word	0x40000c04

00000508 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 508:	b570      	push	{r4, r5, r6, lr}
 50a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 50c:	4a1a      	ldr	r2, [pc, #104]	; (578 <system_gclk_gen_get_hz+0x70>)
 50e:	7853      	ldrb	r3, [r2, #1]
 510:	b25b      	sxtb	r3, r3
 512:	2b00      	cmp	r3, #0
 514:	dbfb      	blt.n	50e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 516:	f7ff fddd 	bl	d4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 51a:	4b18      	ldr	r3, [pc, #96]	; (57c <system_gclk_gen_get_hz+0x74>)
 51c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 51e:	4a16      	ldr	r2, [pc, #88]	; (578 <system_gclk_gen_get_hz+0x70>)
 520:	7853      	ldrb	r3, [r2, #1]
 522:	b25b      	sxtb	r3, r3
 524:	2b00      	cmp	r3, #0
 526:	dbfb      	blt.n	520 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 528:	4d13      	ldr	r5, [pc, #76]	; (578 <system_gclk_gen_get_hz+0x70>)
 52a:	6868      	ldr	r0, [r5, #4]
 52c:	04c0      	lsls	r0, r0, #19
 52e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 530:	f7ff fe68 	bl	204 <system_clock_source_get_hz>
 534:	0006      	movs	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 536:	4b11      	ldr	r3, [pc, #68]	; (57c <system_gclk_gen_get_hz+0x74>)
 538:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 53a:	686d      	ldr	r5, [r5, #4]
 53c:	02ed      	lsls	r5, r5, #11
 53e:	0fed      	lsrs	r5, r5, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 540:	4b0f      	ldr	r3, [pc, #60]	; (580 <system_gclk_gen_get_hz+0x78>)
 542:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 544:	4a0c      	ldr	r2, [pc, #48]	; (578 <system_gclk_gen_get_hz+0x70>)
 546:	7853      	ldrb	r3, [r2, #1]
 548:	b25b      	sxtb	r3, r3
 54a:	2b00      	cmp	r3, #0
 54c:	dbfb      	blt.n	546 <system_gclk_gen_get_hz+0x3e>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 54e:	4b0a      	ldr	r3, [pc, #40]	; (578 <system_gclk_gen_get_hz+0x70>)
 550:	689c      	ldr	r4, [r3, #8]
 552:	0224      	lsls	r4, r4, #8
 554:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 556:	f7ff fddd 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 55a:	2d00      	cmp	r5, #0
 55c:	d107      	bne.n	56e <system_gclk_gen_get_hz+0x66>
 55e:	2c01      	cmp	r4, #1
 560:	d907      	bls.n	572 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 562:	0021      	movs	r1, r4
 564:	0030      	movs	r0, r6
 566:	f000 f933 	bl	7d0 <__udivsi3>
 56a:	0006      	movs	r6, r0
 56c:	e001      	b.n	572 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 56e:	3401      	adds	r4, #1
 570:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
 572:	0030      	movs	r0, r6
 574:	bd70      	pop	{r4, r5, r6, pc}
 576:	46c0      	nop			; (mov r8, r8)
 578:	40000c00 	.word	0x40000c00
 57c:	40000c04 	.word	0x40000c04
 580:	40000c08 	.word	0x40000c08

00000584 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 584:	b510      	push	{r4, lr}
 586:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 588:	f7ff fda4 	bl	d4 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 58c:	4b0e      	ldr	r3, [pc, #56]	; (5c8 <system_gclk_chan_disable+0x44>)
 58e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 590:	4a0e      	ldr	r2, [pc, #56]	; (5cc <system_gclk_chan_disable+0x48>)
 592:	8853      	ldrh	r3, [r2, #2]
 594:	051b      	lsls	r3, r3, #20
 596:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 598:	8853      	ldrh	r3, [r2, #2]
 59a:	490d      	ldr	r1, [pc, #52]	; (5d0 <system_gclk_chan_disable+0x4c>)
 59c:	400b      	ands	r3, r1
 59e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 5a0:	8853      	ldrh	r3, [r2, #2]
 5a2:	490c      	ldr	r1, [pc, #48]	; (5d4 <system_gclk_chan_disable+0x50>)
 5a4:	400b      	ands	r3, r1
 5a6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 5a8:	0011      	movs	r1, r2
 5aa:	2280      	movs	r2, #128	; 0x80
 5ac:	01d2      	lsls	r2, r2, #7
 5ae:	884b      	ldrh	r3, [r1, #2]
 5b0:	4213      	tst	r3, r2
 5b2:	d1fc      	bne.n	5ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 5b4:	4905      	ldr	r1, [pc, #20]	; (5cc <system_gclk_chan_disable+0x48>)
 5b6:	884a      	ldrh	r2, [r1, #2]
 5b8:	0203      	lsls	r3, r0, #8
 5ba:	4805      	ldr	r0, [pc, #20]	; (5d0 <system_gclk_chan_disable+0x4c>)
 5bc:	4002      	ands	r2, r0
 5be:	4313      	orrs	r3, r2
 5c0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 5c2:	f7ff fda7 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
 5c6:	bd10      	pop	{r4, pc}
 5c8:	40000c02 	.word	0x40000c02
 5cc:	40000c00 	.word	0x40000c00
 5d0:	fffff0ff 	.word	0xfffff0ff
 5d4:	ffffbfff 	.word	0xffffbfff

000005d8 <system_gclk_chan_set_config>:
{
 5d8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 5da:	780c      	ldrb	r4, [r1, #0]
 5dc:	0224      	lsls	r4, r4, #8
 5de:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 5e0:	f7ff ffd0 	bl	584 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 5e4:	b2a4      	uxth	r4, r4
 5e6:	4b01      	ldr	r3, [pc, #4]	; (5ec <system_gclk_chan_set_config+0x14>)
 5e8:	805c      	strh	r4, [r3, #2]
}
 5ea:	bd10      	pop	{r4, pc}
 5ec:	40000c00 	.word	0x40000c00

000005f0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 5f0:	b510      	push	{r4, lr}
 5f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 5f4:	f7ff fd6e 	bl	d4 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 5f8:	4b05      	ldr	r3, [pc, #20]	; (610 <system_gclk_chan_get_hz+0x20>)
 5fa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 5fc:	4b05      	ldr	r3, [pc, #20]	; (614 <system_gclk_chan_get_hz+0x24>)
 5fe:	885c      	ldrh	r4, [r3, #2]
 600:	0524      	lsls	r4, r4, #20
 602:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 604:	f7ff fd86 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 608:	0020      	movs	r0, r4
 60a:	f7ff ff7d 	bl	508 <system_gclk_gen_get_hz>
}
 60e:	bd10      	pop	{r4, pc}
 610:	40000c02 	.word	0x40000c02
 614:	40000c00 	.word	0x40000c00

00000618 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 618:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 61a:	78d3      	ldrb	r3, [r2, #3]
 61c:	2b00      	cmp	r3, #0
 61e:	d135      	bne.n	68c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 620:	7813      	ldrb	r3, [r2, #0]
 622:	2b80      	cmp	r3, #128	; 0x80
 624:	d029      	beq.n	67a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 626:	061b      	lsls	r3, r3, #24
 628:	2480      	movs	r4, #128	; 0x80
 62a:	0264      	lsls	r4, r4, #9
 62c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 62e:	7854      	ldrb	r4, [r2, #1]
 630:	2502      	movs	r5, #2
 632:	43ac      	bics	r4, r5
 634:	d106      	bne.n	644 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 636:	7894      	ldrb	r4, [r2, #2]
 638:	2c00      	cmp	r4, #0
 63a:	d120      	bne.n	67e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 63c:	2480      	movs	r4, #128	; 0x80
 63e:	02a4      	lsls	r4, r4, #10
 640:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 642:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 644:	7854      	ldrb	r4, [r2, #1]
 646:	3c01      	subs	r4, #1
 648:	2c01      	cmp	r4, #1
 64a:	d91c      	bls.n	686 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 64c:	040c      	lsls	r4, r1, #16
 64e:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 650:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 652:	25a0      	movs	r5, #160	; 0xa0
 654:	05ed      	lsls	r5, r5, #23
 656:	432c      	orrs	r4, r5
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 658:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 65a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 65c:	431d      	orrs	r5, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 65e:	24d0      	movs	r4, #208	; 0xd0
 660:	0624      	lsls	r4, r4, #24
 662:	432c      	orrs	r4, r5
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 664:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 666:	78d4      	ldrb	r4, [r2, #3]
 668:	2c00      	cmp	r4, #0
 66a:	d122      	bne.n	6b2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 66c:	035b      	lsls	r3, r3, #13
 66e:	d51c      	bpl.n	6aa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 670:	7893      	ldrb	r3, [r2, #2]
 672:	2b01      	cmp	r3, #1
 674:	d01e      	beq.n	6b4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 676:	6141      	str	r1, [r0, #20]
 678:	e017      	b.n	6aa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 67a:	2300      	movs	r3, #0
 67c:	e7d7      	b.n	62e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 67e:	24c0      	movs	r4, #192	; 0xc0
 680:	02e4      	lsls	r4, r4, #11
 682:	4323      	orrs	r3, r4
 684:	e7dd      	b.n	642 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 686:	4c0d      	ldr	r4, [pc, #52]	; (6bc <_system_pinmux_config+0xa4>)
 688:	4023      	ands	r3, r4
 68a:	e7df      	b.n	64c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 68c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 68e:	040c      	lsls	r4, r1, #16
 690:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 692:	23a0      	movs	r3, #160	; 0xa0
 694:	05db      	lsls	r3, r3, #23
 696:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 698:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 69a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 69c:	23d0      	movs	r3, #208	; 0xd0
 69e:	061b      	lsls	r3, r3, #24
 6a0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6a2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 6a4:	78d3      	ldrb	r3, [r2, #3]
 6a6:	2b00      	cmp	r3, #0
 6a8:	d103      	bne.n	6b2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 6aa:	7853      	ldrb	r3, [r2, #1]
 6ac:	3b01      	subs	r3, #1
 6ae:	2b01      	cmp	r3, #1
 6b0:	d902      	bls.n	6b8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 6b2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 6b4:	6181      	str	r1, [r0, #24]
 6b6:	e7f8      	b.n	6aa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 6b8:	6081      	str	r1, [r0, #8]
}
 6ba:	e7fa      	b.n	6b2 <_system_pinmux_config+0x9a>
 6bc:	fffbffff 	.word	0xfffbffff

000006c0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 6c0:	b510      	push	{r4, lr}
 6c2:	0003      	movs	r3, r0
 6c4:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 6c6:	b241      	sxtb	r1, r0
 6c8:	2900      	cmp	r1, #0
 6ca:	db0b      	blt.n	6e4 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
 6cc:	0940      	lsrs	r0, r0, #5
 6ce:	01c0      	lsls	r0, r0, #7
 6d0:	4905      	ldr	r1, [pc, #20]	; (6e8 <system_pinmux_pin_set_config+0x28>)
 6d2:	468c      	mov	ip, r1
 6d4:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 6d6:	211f      	movs	r1, #31
 6d8:	400b      	ands	r3, r1
 6da:	391e      	subs	r1, #30
 6dc:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
 6de:	f7ff ff9b 	bl	618 <_system_pinmux_config>
}
 6e2:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
 6e4:	2000      	movs	r0, #0
 6e6:	e7f6      	b.n	6d6 <system_pinmux_pin_set_config+0x16>
 6e8:	41004400 	.word	0x41004400

000006ec <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 6ec:	4770      	bx	lr

000006ee <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 6ee:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 6f0:	f7ff fe44 	bl	37c <system_clock_init>

	/* Initialize board hardware */
	system_board_init();
 6f4:	f7ff fd5c 	bl	1b0 <system_board_init>

	/* Initialize EVSYS hardware */
	_system_events_init();
 6f8:	f7ff fff8 	bl	6ec <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
 6fc:	f7ff fff6 	bl	6ec <_system_dummy_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 700:	f7ff fff4 	bl	6ec <_system_dummy_init>
}
 704:	bd10      	pop	{r4, pc}

00000706 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
 706:	e7fe      	b.n	706 <Dummy_Handler>

00000708 <Reset_Handler>:
{
 708:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 70a:	4a27      	ldr	r2, [pc, #156]	; (7a8 <Reset_Handler+0xa0>)
 70c:	4b27      	ldr	r3, [pc, #156]	; (7ac <Reset_Handler+0xa4>)
 70e:	429a      	cmp	r2, r3
 710:	d012      	beq.n	738 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
 712:	001a      	movs	r2, r3
 714:	4b26      	ldr	r3, [pc, #152]	; (7b0 <Reset_Handler+0xa8>)
 716:	429a      	cmp	r2, r3
 718:	d20e      	bcs.n	738 <Reset_Handler+0x30>
 71a:	001a      	movs	r2, r3
 71c:	3a01      	subs	r2, #1
 71e:	4b23      	ldr	r3, [pc, #140]	; (7ac <Reset_Handler+0xa4>)
 720:	1ad2      	subs	r2, r2, r3
 722:	0892      	lsrs	r2, r2, #2
 724:	3201      	adds	r2, #1
 726:	0092      	lsls	r2, r2, #2
 728:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
 72a:	4820      	ldr	r0, [pc, #128]	; (7ac <Reset_Handler+0xa4>)
 72c:	491e      	ldr	r1, [pc, #120]	; (7a8 <Reset_Handler+0xa0>)
 72e:	58cc      	ldr	r4, [r1, r3]
 730:	50c4      	str	r4, [r0, r3]
                for (; pDest < &_erelocate;) {
 732:	3304      	adds	r3, #4
 734:	4293      	cmp	r3, r2
 736:	d1fa      	bne.n	72e <Reset_Handler+0x26>
        for (pDest = &_szero; pDest < &_ezero;) {
 738:	4a1e      	ldr	r2, [pc, #120]	; (7b4 <Reset_Handler+0xac>)
 73a:	4b1f      	ldr	r3, [pc, #124]	; (7b8 <Reset_Handler+0xb0>)
 73c:	429a      	cmp	r2, r3
 73e:	d20b      	bcs.n	758 <Reset_Handler+0x50>
 740:	0013      	movs	r3, r2
 742:	4a1d      	ldr	r2, [pc, #116]	; (7b8 <Reset_Handler+0xb0>)
 744:	3a01      	subs	r2, #1
 746:	1ad2      	subs	r2, r2, r3
 748:	2103      	movs	r1, #3
 74a:	438a      	bics	r2, r1
 74c:	1d19      	adds	r1, r3, #4
 74e:	1852      	adds	r2, r2, r1
                *pDest++ = 0;
 750:	2100      	movs	r1, #0
 752:	c302      	stmia	r3!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 754:	4293      	cmp	r3, r2
 756:	d1fc      	bne.n	752 <Reset_Handler+0x4a>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 758:	4b18      	ldr	r3, [pc, #96]	; (7bc <Reset_Handler+0xb4>)
 75a:	22ff      	movs	r2, #255	; 0xff
 75c:	4393      	bics	r3, r2
 75e:	4a18      	ldr	r2, [pc, #96]	; (7c0 <Reset_Handler+0xb8>)
 760:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 762:	4a18      	ldr	r2, [pc, #96]	; (7c4 <Reset_Handler+0xbc>)
 764:	2390      	movs	r3, #144	; 0x90
 766:	005b      	lsls	r3, r3, #1
 768:	2102      	movs	r1, #2
 76a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 76c:	4b16      	ldr	r3, [pc, #88]	; (7c8 <Reset_Handler+0xc0>)
 76e:	7b9a      	ldrb	r2, [r3, #14]
 770:	312e      	adds	r1, #46	; 0x2e
 772:	438a      	bics	r2, r1
 774:	2120      	movs	r1, #32
 776:	430a      	orrs	r2, r1
 778:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 77a:	7b9a      	ldrb	r2, [r3, #14]
 77c:	210c      	movs	r1, #12
 77e:	438a      	bics	r2, r1
 780:	2108      	movs	r1, #8
 782:	430a      	orrs	r2, r1
 784:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 786:	7b9a      	ldrb	r2, [r3, #14]
 788:	2103      	movs	r1, #3
 78a:	438a      	bics	r2, r1
 78c:	2102      	movs	r1, #2
 78e:	430a      	orrs	r2, r1
 790:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 792:	4a0e      	ldr	r2, [pc, #56]	; (7cc <Reset_Handler+0xc4>)
 794:	6853      	ldr	r3, [r2, #4]
 796:	2180      	movs	r1, #128	; 0x80
 798:	430b      	orrs	r3, r1
 79a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 79c:	f000 f8a4 	bl	8e8 <__libc_init_array>
        main();
 7a0:	f7ff fcd8 	bl	154 <main>
        while (1);
 7a4:	e7fe      	b.n	7a4 <Reset_Handler+0x9c>
 7a6:	46c0      	nop			; (mov r8, r8)
 7a8:	00000998 	.word	0x00000998
 7ac:	20000000 	.word	0x20000000
 7b0:	20000004 	.word	0x20000004
 7b4:	20000004 	.word	0x20000004
 7b8:	20000040 	.word	0x20000040
 7bc:	00000000 	.word	0x00000000
 7c0:	e000ed00 	.word	0xe000ed00
 7c4:	41007000 	.word	0x41007000
 7c8:	41004800 	.word	0x41004800
 7cc:	41004000 	.word	0x41004000

000007d0 <__udivsi3>:
 7d0:	2200      	movs	r2, #0
 7d2:	0843      	lsrs	r3, r0, #1
 7d4:	428b      	cmp	r3, r1
 7d6:	d374      	bcc.n	8c2 <__udivsi3+0xf2>
 7d8:	0903      	lsrs	r3, r0, #4
 7da:	428b      	cmp	r3, r1
 7dc:	d35f      	bcc.n	89e <__udivsi3+0xce>
 7de:	0a03      	lsrs	r3, r0, #8
 7e0:	428b      	cmp	r3, r1
 7e2:	d344      	bcc.n	86e <__udivsi3+0x9e>
 7e4:	0b03      	lsrs	r3, r0, #12
 7e6:	428b      	cmp	r3, r1
 7e8:	d328      	bcc.n	83c <__udivsi3+0x6c>
 7ea:	0c03      	lsrs	r3, r0, #16
 7ec:	428b      	cmp	r3, r1
 7ee:	d30d      	bcc.n	80c <__udivsi3+0x3c>
 7f0:	22ff      	movs	r2, #255	; 0xff
 7f2:	0209      	lsls	r1, r1, #8
 7f4:	ba12      	rev	r2, r2
 7f6:	0c03      	lsrs	r3, r0, #16
 7f8:	428b      	cmp	r3, r1
 7fa:	d302      	bcc.n	802 <__udivsi3+0x32>
 7fc:	1212      	asrs	r2, r2, #8
 7fe:	0209      	lsls	r1, r1, #8
 800:	d065      	beq.n	8ce <__udivsi3+0xfe>
 802:	0b03      	lsrs	r3, r0, #12
 804:	428b      	cmp	r3, r1
 806:	d319      	bcc.n	83c <__udivsi3+0x6c>
 808:	e000      	b.n	80c <__udivsi3+0x3c>
 80a:	0a09      	lsrs	r1, r1, #8
 80c:	0bc3      	lsrs	r3, r0, #15
 80e:	428b      	cmp	r3, r1
 810:	d301      	bcc.n	816 <__udivsi3+0x46>
 812:	03cb      	lsls	r3, r1, #15
 814:	1ac0      	subs	r0, r0, r3
 816:	4152      	adcs	r2, r2
 818:	0b83      	lsrs	r3, r0, #14
 81a:	428b      	cmp	r3, r1
 81c:	d301      	bcc.n	822 <__udivsi3+0x52>
 81e:	038b      	lsls	r3, r1, #14
 820:	1ac0      	subs	r0, r0, r3
 822:	4152      	adcs	r2, r2
 824:	0b43      	lsrs	r3, r0, #13
 826:	428b      	cmp	r3, r1
 828:	d301      	bcc.n	82e <__udivsi3+0x5e>
 82a:	034b      	lsls	r3, r1, #13
 82c:	1ac0      	subs	r0, r0, r3
 82e:	4152      	adcs	r2, r2
 830:	0b03      	lsrs	r3, r0, #12
 832:	428b      	cmp	r3, r1
 834:	d301      	bcc.n	83a <__udivsi3+0x6a>
 836:	030b      	lsls	r3, r1, #12
 838:	1ac0      	subs	r0, r0, r3
 83a:	4152      	adcs	r2, r2
 83c:	0ac3      	lsrs	r3, r0, #11
 83e:	428b      	cmp	r3, r1
 840:	d301      	bcc.n	846 <__udivsi3+0x76>
 842:	02cb      	lsls	r3, r1, #11
 844:	1ac0      	subs	r0, r0, r3
 846:	4152      	adcs	r2, r2
 848:	0a83      	lsrs	r3, r0, #10
 84a:	428b      	cmp	r3, r1
 84c:	d301      	bcc.n	852 <__udivsi3+0x82>
 84e:	028b      	lsls	r3, r1, #10
 850:	1ac0      	subs	r0, r0, r3
 852:	4152      	adcs	r2, r2
 854:	0a43      	lsrs	r3, r0, #9
 856:	428b      	cmp	r3, r1
 858:	d301      	bcc.n	85e <__udivsi3+0x8e>
 85a:	024b      	lsls	r3, r1, #9
 85c:	1ac0      	subs	r0, r0, r3
 85e:	4152      	adcs	r2, r2
 860:	0a03      	lsrs	r3, r0, #8
 862:	428b      	cmp	r3, r1
 864:	d301      	bcc.n	86a <__udivsi3+0x9a>
 866:	020b      	lsls	r3, r1, #8
 868:	1ac0      	subs	r0, r0, r3
 86a:	4152      	adcs	r2, r2
 86c:	d2cd      	bcs.n	80a <__udivsi3+0x3a>
 86e:	09c3      	lsrs	r3, r0, #7
 870:	428b      	cmp	r3, r1
 872:	d301      	bcc.n	878 <__udivsi3+0xa8>
 874:	01cb      	lsls	r3, r1, #7
 876:	1ac0      	subs	r0, r0, r3
 878:	4152      	adcs	r2, r2
 87a:	0983      	lsrs	r3, r0, #6
 87c:	428b      	cmp	r3, r1
 87e:	d301      	bcc.n	884 <__udivsi3+0xb4>
 880:	018b      	lsls	r3, r1, #6
 882:	1ac0      	subs	r0, r0, r3
 884:	4152      	adcs	r2, r2
 886:	0943      	lsrs	r3, r0, #5
 888:	428b      	cmp	r3, r1
 88a:	d301      	bcc.n	890 <__udivsi3+0xc0>
 88c:	014b      	lsls	r3, r1, #5
 88e:	1ac0      	subs	r0, r0, r3
 890:	4152      	adcs	r2, r2
 892:	0903      	lsrs	r3, r0, #4
 894:	428b      	cmp	r3, r1
 896:	d301      	bcc.n	89c <__udivsi3+0xcc>
 898:	010b      	lsls	r3, r1, #4
 89a:	1ac0      	subs	r0, r0, r3
 89c:	4152      	adcs	r2, r2
 89e:	08c3      	lsrs	r3, r0, #3
 8a0:	428b      	cmp	r3, r1
 8a2:	d301      	bcc.n	8a8 <__udivsi3+0xd8>
 8a4:	00cb      	lsls	r3, r1, #3
 8a6:	1ac0      	subs	r0, r0, r3
 8a8:	4152      	adcs	r2, r2
 8aa:	0883      	lsrs	r3, r0, #2
 8ac:	428b      	cmp	r3, r1
 8ae:	d301      	bcc.n	8b4 <__udivsi3+0xe4>
 8b0:	008b      	lsls	r3, r1, #2
 8b2:	1ac0      	subs	r0, r0, r3
 8b4:	4152      	adcs	r2, r2
 8b6:	0843      	lsrs	r3, r0, #1
 8b8:	428b      	cmp	r3, r1
 8ba:	d301      	bcc.n	8c0 <__udivsi3+0xf0>
 8bc:	004b      	lsls	r3, r1, #1
 8be:	1ac0      	subs	r0, r0, r3
 8c0:	4152      	adcs	r2, r2
 8c2:	1a41      	subs	r1, r0, r1
 8c4:	d200      	bcs.n	8c8 <__udivsi3+0xf8>
 8c6:	4601      	mov	r1, r0
 8c8:	4152      	adcs	r2, r2
 8ca:	4610      	mov	r0, r2
 8cc:	4770      	bx	lr
 8ce:	e7ff      	b.n	8d0 <__udivsi3+0x100>
 8d0:	b501      	push	{r0, lr}
 8d2:	2000      	movs	r0, #0
 8d4:	f000 f806 	bl	8e4 <__aeabi_idiv0>
 8d8:	bd02      	pop	{r1, pc}
 8da:	46c0      	nop			; (mov r8, r8)

000008dc <__aeabi_uidivmod>:
 8dc:	2900      	cmp	r1, #0
 8de:	d0f7      	beq.n	8d0 <__udivsi3+0x100>
 8e0:	e776      	b.n	7d0 <__udivsi3>
 8e2:	4770      	bx	lr

000008e4 <__aeabi_idiv0>:
 8e4:	4770      	bx	lr
 8e6:	46c0      	nop			; (mov r8, r8)

000008e8 <__libc_init_array>:
 8e8:	b570      	push	{r4, r5, r6, lr}
 8ea:	2600      	movs	r6, #0
 8ec:	4d0c      	ldr	r5, [pc, #48]	; (920 <__libc_init_array+0x38>)
 8ee:	4c0d      	ldr	r4, [pc, #52]	; (924 <__libc_init_array+0x3c>)
 8f0:	1b64      	subs	r4, r4, r5
 8f2:	10a4      	asrs	r4, r4, #2
 8f4:	42a6      	cmp	r6, r4
 8f6:	d109      	bne.n	90c <__libc_init_array+0x24>
 8f8:	2600      	movs	r6, #0
 8fa:	f000 f83d 	bl	978 <_init>
 8fe:	4d0a      	ldr	r5, [pc, #40]	; (928 <__libc_init_array+0x40>)
 900:	4c0a      	ldr	r4, [pc, #40]	; (92c <__libc_init_array+0x44>)
 902:	1b64      	subs	r4, r4, r5
 904:	10a4      	asrs	r4, r4, #2
 906:	42a6      	cmp	r6, r4
 908:	d105      	bne.n	916 <__libc_init_array+0x2e>
 90a:	bd70      	pop	{r4, r5, r6, pc}
 90c:	00b3      	lsls	r3, r6, #2
 90e:	58eb      	ldr	r3, [r5, r3]
 910:	4798      	blx	r3
 912:	3601      	adds	r6, #1
 914:	e7ee      	b.n	8f4 <__libc_init_array+0xc>
 916:	00b3      	lsls	r3, r6, #2
 918:	58eb      	ldr	r3, [r5, r3]
 91a:	4798      	blx	r3
 91c:	3601      	adds	r6, #1
 91e:	e7f2      	b.n	906 <__libc_init_array+0x1e>
 920:	00000984 	.word	0x00000984
 924:	00000984 	.word	0x00000984
 928:	00000984 	.word	0x00000984
 92c:	00000988 	.word	0x00000988
 930:	00000216 	.word	0x00000216
 934:	00000212 	.word	0x00000212
 938:	00000212 	.word	0x00000212
 93c:	0000027a 	.word	0x0000027a
 940:	0000027a 	.word	0x0000027a
 944:	0000022a 	.word	0x0000022a
 948:	0000021c 	.word	0x0000021c
 94c:	00000230 	.word	0x00000230
 950:	0000026a 	.word	0x0000026a
 954:	00000300 	.word	0x00000300
 958:	000002e0 	.word	0x000002e0
 95c:	000002e0 	.word	0x000002e0
 960:	0000036a 	.word	0x0000036a
 964:	000002f2 	.word	0x000002f2
 968:	0000030c 	.word	0x0000030c
 96c:	000002e4 	.word	0x000002e4
 970:	0000031a 	.word	0x0000031a
 974:	0000035a 	.word	0x0000035a

00000978 <_init>:
 978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 97a:	46c0      	nop			; (mov r8, r8)
 97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 97e:	bc08      	pop	{r3}
 980:	469e      	mov	lr, r3
 982:	4770      	bx	lr

00000984 <__frame_dummy_init_array_entry>:
 984:	00b5 0000                                   ....

00000988 <_fini>:
 988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 98a:	46c0      	nop			; (mov r8, r8)
 98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 98e:	bc08      	pop	{r3}
 990:	469e      	mov	lr, r3
 992:	4770      	bx	lr

00000994 <__do_global_dtors_aux_fini_array_entry>:
 994:	008d 0000                                   ....
