
getting-started_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e5c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000118  20000070  00002ecc  00020070  2**2
                  ALLOC
  3 .stack        00000400  20000188  00002fe4  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      0000004d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f6e5  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00003b24  00000000  00000000  0003f7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loc    00005d31  00000000  00000000  000432ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000578  00000000  00000000  0004901f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 00000a58  00000000  00000000  00049597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  0001700b  00000000  00000000  00049fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00010a0b  00000000  00000000  00060ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000712e3  00000000  00000000  00071a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001504  00000000  00000000  000e2ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 05 00 20 19 17 00 00 15 17 00 00 15 17 00 00     ... ............
	...
      2c:	15 17 00 00 00 00 00 00 00 00 00 00 15 17 00 00     ................
      3c:	15 17 00 00 15 17 00 00 15 17 00 00 15 17 00 00     ................
      4c:	15 17 00 00 e9 04 00 00 15 17 00 00 15 17 00 00     ................
      5c:	00 00 00 00 15 17 00 00 89 09 00 00 99 09 00 00     ................
      6c:	a9 09 00 00 15 17 00 00 6d 14 00 00 77 14 00 00     ........m...w...
      7c:	15 17 00 00 15 17 00 00 15 17 00 00 15 17 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000070 	.word	0x20000070
      ac:	00000000 	.word	0x00000000
      b0:	00002e5c 	.word	0x00002e5c

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	20000074 	.word	0x20000074
      d0:	00002e5c 	.word	0x00002e5c

000000d4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
      d4:	4b0c      	ldr	r3, [pc, #48]	; (108 <cpu_irq_enter_critical+0x34>)
      d6:	681b      	ldr	r3, [r3, #0]
      d8:	2b00      	cmp	r3, #0
      da:	d10c      	bne.n	f6 <cpu_irq_enter_critical+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      dc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
      e0:	2b00      	cmp	r3, #0
      e2:	d10d      	bne.n	100 <cpu_irq_enter_critical+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
      e4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
      e6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
      ea:	4b08      	ldr	r3, [pc, #32]	; (10c <cpu_irq_enter_critical+0x38>)
      ec:	2200      	movs	r2, #0
      ee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
      f0:	4b07      	ldr	r3, [pc, #28]	; (110 <cpu_irq_enter_critical+0x3c>)
      f2:	3201      	adds	r2, #1
      f4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      f6:	4a04      	ldr	r2, [pc, #16]	; (108 <cpu_irq_enter_critical+0x34>)
      f8:	6813      	ldr	r3, [r2, #0]
      fa:	3301      	adds	r3, #1
      fc:	6013      	str	r3, [r2, #0]
}
      fe:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
     100:	4b03      	ldr	r3, [pc, #12]	; (110 <cpu_irq_enter_critical+0x3c>)
     102:	2200      	movs	r2, #0
     104:	701a      	strb	r2, [r3, #0]
     106:	e7f6      	b.n	f6 <cpu_irq_enter_critical+0x22>
     108:	2000008c 	.word	0x2000008c
     10c:	20000000 	.word	0x20000000
     110:	20000090 	.word	0x20000090

00000114 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <cpu_irq_leave_critical+0x24>)
     116:	681a      	ldr	r2, [r3, #0]
     118:	3a01      	subs	r2, #1
     11a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d109      	bne.n	136 <cpu_irq_leave_critical+0x22>
     122:	4b06      	ldr	r3, [pc, #24]	; (13c <cpu_irq_leave_critical+0x28>)
     124:	781b      	ldrb	r3, [r3, #0]
     126:	2b00      	cmp	r3, #0
     128:	d005      	beq.n	136 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     12a:	4b05      	ldr	r3, [pc, #20]	; (140 <cpu_irq_leave_critical+0x2c>)
     12c:	2201      	movs	r2, #1
     12e:	701a      	strb	r2, [r3, #0]
     130:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     134:	b662      	cpsie	i
	}
}
     136:	4770      	bx	lr
     138:	2000008c 	.word	0x2000008c
     13c:	20000090 	.word	0x20000090
     140:	20000000 	.word	0x20000000

00000144 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     144:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     146:	2000      	movs	r0, #0
     148:	f001 f836 	bl	11b8 <system_gclk_gen_get_hz>
     14c:	0004      	movs	r4, r0
	cycles_per_ms /= 1000;
     14e:	21fa      	movs	r1, #250	; 0xfa
     150:	0089      	lsls	r1, r1, #2
     152:	f001 fbad 	bl	18b0 <__udivsi3>
     156:	4b06      	ldr	r3, [pc, #24]	; (170 <delay_init+0x2c>)
     158:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     15a:	4906      	ldr	r1, [pc, #24]	; (174 <delay_init+0x30>)
     15c:	0020      	movs	r0, r4
     15e:	f001 fba7 	bl	18b0 <__udivsi3>
     162:	4b05      	ldr	r3, [pc, #20]	; (178 <delay_init+0x34>)
     164:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     166:	4b05      	ldr	r3, [pc, #20]	; (17c <delay_init+0x38>)
     168:	2205      	movs	r2, #5
     16a:	601a      	str	r2, [r3, #0]
}
     16c:	bd10      	pop	{r4, pc}
     16e:	46c0      	nop			; (mov r8, r8)
     170:	20000004 	.word	0x20000004
     174:	000f4240 	.word	0x000f4240
     178:	20000008 	.word	0x20000008
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
     182:	1e44      	subs	r4, r0, #1
     184:	2800      	cmp	r0, #0
     186:	d010      	beq.n	1aa <delay_cycles_ms+0x2a>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     188:	4b08      	ldr	r3, [pc, #32]	; (1ac <delay_cycles_ms+0x2c>)
     18a:	6818      	ldr	r0, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     18c:	4a08      	ldr	r2, [pc, #32]	; (1b0 <delay_cycles_ms+0x30>)
		SysTick->VAL = 0;
     18e:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     190:	2180      	movs	r1, #128	; 0x80
     192:	0249      	lsls	r1, r1, #9
     194:	e001      	b.n	19a <delay_cycles_ms+0x1a>
	while (n--) {
     196:	3c01      	subs	r4, #1
     198:	d307      	bcc.n	1aa <delay_cycles_ms+0x2a>
	if (n > 0) {
     19a:	2800      	cmp	r0, #0
     19c:	d0fb      	beq.n	196 <delay_cycles_ms+0x16>
		SysTick->LOAD = n;
     19e:	6050      	str	r0, [r2, #4]
		SysTick->VAL = 0;
     1a0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1a2:	6813      	ldr	r3, [r2, #0]
     1a4:	420b      	tst	r3, r1
     1a6:	d0fc      	beq.n	1a2 <delay_cycles_ms+0x22>
     1a8:	e7f5      	b.n	196 <delay_cycles_ms+0x16>
	}
}
     1aa:	bd30      	pop	{r4, r5, pc}
     1ac:	20000004 	.word	0x20000004
     1b0:	e000e010 	.word	0xe000e010

000001b4 <extint_callback>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     1b4:	4b06      	ldr	r3, [pc, #24]	; (1d0 <extint_callback+0x1c>)
     1b6:	6a1b      	ldr	r3, [r3, #32]

/* Updates the board LED to the current button state. */
static void update_led_state(void)
{
	bool pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	if (pin_state) {
     1b8:	019b      	lsls	r3, r3, #6
     1ba:	d504      	bpl.n	1c6 <extint_callback+0x12>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1bc:	4b04      	ldr	r3, [pc, #16]	; (1d0 <extint_callback+0x1c>)
     1be:	2280      	movs	r2, #128	; 0x80
     1c0:	0092      	lsls	r2, r2, #2
     1c2:	615a      	str	r2, [r3, #20]
 *  detection occurs.
 */
static void extint_callback(void)
{
	update_led_state();
}
     1c4:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
     1c6:	4b02      	ldr	r3, [pc, #8]	; (1d0 <extint_callback+0x1c>)
     1c8:	2280      	movs	r2, #128	; 0x80
     1ca:	0092      	lsls	r2, r2, #2
     1cc:	619a      	str	r2, [r3, #24]
     1ce:	e7f9      	b.n	1c4 <extint_callback+0x10>
     1d0:	41004400 	.word	0x41004400

000001d4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     1d4:	b530      	push	{r4, r5, lr}
     1d6:	b083      	sub	sp, #12
     1d8:	0004      	movs	r4, r0
     1da:	000d      	movs	r5, r1
	uint16_t temp = 0;
     1dc:	466b      	mov	r3, sp
     1de:	2200      	movs	r2, #0
     1e0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     1e2:	466b      	mov	r3, sp
     1e4:	1d99      	adds	r1, r3, #6
     1e6:	0020      	movs	r0, r4
     1e8:	f000 fd67 	bl	cba <usart_read_wait>
     1ec:	2800      	cmp	r0, #0
     1ee:	d1f8      	bne.n	1e2 <usart_serial_getchar+0xe>

	*c = temp;
     1f0:	466b      	mov	r3, sp
     1f2:	3306      	adds	r3, #6
     1f4:	881b      	ldrh	r3, [r3, #0]
     1f6:	702b      	strb	r3, [r5, #0]
}
     1f8:	b003      	add	sp, #12
     1fa:	bd30      	pop	{r4, r5, pc}

000001fc <usart_serial_putchar>:
{
     1fc:	b570      	push	{r4, r5, r6, lr}
     1fe:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     200:	000c      	movs	r4, r1
     202:	0021      	movs	r1, r4
     204:	0028      	movs	r0, r5
     206:	f000 fd45 	bl	c94 <usart_write_wait>
     20a:	2800      	cmp	r0, #0
     20c:	d1f9      	bne.n	202 <usart_serial_putchar+0x6>
}
     20e:	bd70      	pop	{r4, r5, r6, pc}

00000210 <tc_callback_to_counter>:

/** TC Callback function.
 */
static void tc_callback_to_counter(
		struct tc_module *const module_inst)
{
     210:	b510      	push	{r4, lr}
     212:	0004      	movs	r4, r0
	static uint32_t count = 0;
	count ++;
     214:	4b09      	ldr	r3, [pc, #36]	; (23c <tc_callback_to_counter+0x2c>)
     216:	681a      	ldr	r2, [r3, #0]
     218:	1c50      	adds	r0, r2, #1
     21a:	6018      	str	r0, [r3, #0]
	if(count%800 == 0){
     21c:	21c8      	movs	r1, #200	; 0xc8
     21e:	0089      	lsls	r1, r1, #2
     220:	f001 fbcc 	bl	19bc <__aeabi_uidivmod>
     224:	2900      	cmp	r1, #0
     226:	d004      	beq.n	232 <tc_callback_to_counter+0x22>
		printf("The output is triggered by TC counter\r\n");
	}

	tc_set_count_value(module_inst,TC_COUNT_VALUE);
     228:	4905      	ldr	r1, [pc, #20]	; (240 <tc_callback_to_counter+0x30>)
     22a:	0020      	movs	r0, r4
     22c:	f001 fa5a 	bl	16e4 <tc_set_count_value>
}
     230:	bd10      	pop	{r4, pc}
		printf("The output is triggered by TC counter\r\n");
     232:	4804      	ldr	r0, [pc, #16]	; (244 <tc_callback_to_counter+0x34>)
     234:	f001 fc22 	bl	1a7c <iprintf>
     238:	e7f6      	b.n	228 <tc_callback_to_counter+0x18>
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	200000c8 	.word	0x200000c8
     240:	0000d8ef 	.word	0x0000d8ef
     244:	00002c7c 	.word	0x00002c7c

00000248 <main>:
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
*/
int main(void)
{
     248:	b570      	push	{r4, r5, r6, lr}
     24a:	b092      	sub	sp, #72	; 0x48
	struct port_config pin;

	system_init();
     24c:	f001 f8bb 	bl	13c6 <system_init>
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     250:	aa01      	add	r2, sp, #4
     252:	2380      	movs	r3, #128	; 0x80
     254:	05db      	lsls	r3, r3, #23
     256:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     258:	2300      	movs	r3, #0
     25a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
     25c:	21ff      	movs	r1, #255	; 0xff
     25e:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
     260:	2100      	movs	r1, #0
     262:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     264:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     266:	2401      	movs	r4, #1
     268:	2024      	movs	r0, #36	; 0x24
     26a:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
     26c:	3001      	adds	r0, #1
     26e:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
     270:	3001      	adds	r0, #1
     272:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
     274:	3001      	adds	r0, #1
     276:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
     278:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     27a:	3005      	adds	r0, #5
     27c:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
     27e:	3001      	adds	r0, #1
     280:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     282:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     284:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     286:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     288:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     28a:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     28c:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
     28e:	2313      	movs	r3, #19
     290:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     292:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
     294:	23c4      	movs	r3, #196	; 0xc4
     296:	039b      	lsls	r3, r3, #14
     298:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
     29a:	2301      	movs	r3, #1
     29c:	425b      	negs	r3, r3
     29e:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
     2a0:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
     2a2:	4b5c      	ldr	r3, [pc, #368]	; (414 <STACK_SIZE+0x14>)
     2a4:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
     2a6:	4b5c      	ldr	r3, [pc, #368]	; (418 <STACK_SIZE+0x18>)
     2a8:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
     2aa:	2396      	movs	r3, #150	; 0x96
     2ac:	021b      	lsls	r3, r3, #8
     2ae:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     2b0:	4d5a      	ldr	r5, [pc, #360]	; (41c <STACK_SIZE+0x1c>)
     2b2:	4b5b      	ldr	r3, [pc, #364]	; (420 <STACK_SIZE+0x20>)
     2b4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     2b6:	4b5b      	ldr	r3, [pc, #364]	; (424 <STACK_SIZE+0x24>)
     2b8:	495b      	ldr	r1, [pc, #364]	; (428 <STACK_SIZE+0x28>)
     2ba:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     2bc:	4b5b      	ldr	r3, [pc, #364]	; (42c <STACK_SIZE+0x2c>)
     2be:	495c      	ldr	r1, [pc, #368]	; (430 <STACK_SIZE+0x30>)
     2c0:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     2c2:	495c      	ldr	r1, [pc, #368]	; (434 <STACK_SIZE+0x34>)
     2c4:	0028      	movs	r0, r5
     2c6:	f000 fb77 	bl	9b8 <usart_init>

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     2ca:	4e5b      	ldr	r6, [pc, #364]	; (438 <STACK_SIZE+0x38>)
     2cc:	6833      	ldr	r3, [r6, #0]
     2ce:	6898      	ldr	r0, [r3, #8]
     2d0:	2100      	movs	r1, #0
     2d2:	f001 fc69 	bl	1ba8 <setbuf>
	setbuf(stdin, NULL);
     2d6:	6833      	ldr	r3, [r6, #0]
     2d8:	6858      	ldr	r0, [r3, #4]
     2da:	2100      	movs	r1, #0
     2dc:	f001 fc64 	bl	1ba8 <setbuf>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2e0:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2e2:	0030      	movs	r0, r6
     2e4:	f000 fb40 	bl	968 <_sercom_get_interrupt_vector>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2e8:	231f      	movs	r3, #31
     2ea:	4003      	ands	r3, r0
     2ec:	409c      	lsls	r4, r3
     2ee:	4b53      	ldr	r3, [pc, #332]	; (43c <STACK_SIZE+0x3c>)
     2f0:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     2f2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     2f4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     2f6:	2b00      	cmp	r3, #0
     2f8:	d1fc      	bne.n	2f4 <main+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     2fa:	6833      	ldr	r3, [r6, #0]
     2fc:	2202      	movs	r2, #2
     2fe:	4313      	orrs	r3, r2
     300:	6033      	str	r3, [r6, #0]
	extint_chan_get_config_defaults(&eint_chan_conf);
     302:	ac01      	add	r4, sp, #4
     304:	0020      	movs	r0, r4
     306:	f000 f951 	bl	5ac <extint_chan_get_config_defaults>
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
     30a:	2319      	movs	r3, #25
     30c:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
     30e:	2500      	movs	r5, #0
     310:	6065      	str	r5, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
     312:	3b16      	subs	r3, #22
     314:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
     316:	3b02      	subs	r3, #2
     318:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
     31a:	0021      	movs	r1, r4
     31c:	2005      	movs	r0, #5
     31e:	f000 f94f 	bl	5c0 <extint_chan_set_config>
	extint_register_callback(extint_callback,
     322:	2200      	movs	r2, #0
     324:	2105      	movs	r1, #5
     326:	4846      	ldr	r0, [pc, #280]	; (440 <STACK_SIZE+0x40>)
     328:	f000 f8b6 	bl	498 <extint_register_callback>
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
     32c:	2100      	movs	r1, #0
     32e:	2005      	movs	r0, #5
     330:	f000 f8ca 	bl	4c8 <extint_chan_enable_callback>
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     334:	7025      	strb	r5, [r4, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     336:	70a5      	strb	r5, [r4, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     338:	2300      	movs	r3, #0
     33a:	80a5      	strh	r5, [r4, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     33c:	71a3      	strb	r3, [r4, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     33e:	8125      	strh	r5, [r4, #8]
	config->run_in_standby             = false;
     340:	7063      	strb	r3, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     342:	72a3      	strb	r3, [r4, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     344:	72e3      	strb	r3, [r4, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     346:	7323      	strb	r3, [r4, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     348:	73a3      	strb	r3, [r4, #14]
	config->oneshot                    = false;
     34a:	7363      	strb	r3, [r4, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     34c:	7423      	strb	r3, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     34e:	6165      	str	r5, [r4, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     350:	61a5      	str	r5, [r4, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     352:	7723      	strb	r3, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     354:	6225      	str	r5, [r4, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     356:	6265      	str	r5, [r4, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     358:	8565      	strh	r5, [r4, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     35a:	85a5      	strh	r5, [r4, #44]	; 0x2c
	config_tc.counter_16_bit.value = TC_COUNT_VALUE;
     35c:	4b39      	ldr	r3, [pc, #228]	; (444 <STACK_SIZE+0x44>)
     35e:	8523      	strh	r3, [r4, #40]	; 0x28
	tc_init(&tc_instance, CONF_TC_INSTANCE, &config_tc);
     360:	4d39      	ldr	r5, [pc, #228]	; (448 <STACK_SIZE+0x48>)
     362:	0022      	movs	r2, r4
     364:	4939      	ldr	r1, [pc, #228]	; (44c <STACK_SIZE+0x4c>)
     366:	0028      	movs	r0, r5
     368:	f001 f89c 	bl	14a4 <tc_init>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     36c:	682a      	ldr	r2, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     36e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     370:	b25b      	sxtb	r3, r3
     372:	2b00      	cmp	r3, #0
     374:	dbfb      	blt.n	36e <main+0x126>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     376:	8813      	ldrh	r3, [r2, #0]
     378:	2102      	movs	r1, #2
     37a:	430b      	orrs	r3, r1
     37c:	8013      	strh	r3, [r2, #0]
	tc_register_callback(
     37e:	4d32      	ldr	r5, [pc, #200]	; (448 <STACK_SIZE+0x48>)
     380:	2200      	movs	r2, #0
     382:	4933      	ldr	r1, [pc, #204]	; (450 <STACK_SIZE+0x50>)
     384:	0028      	movs	r0, r5
     386:	f001 f82a 	bl	13de <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     38a:	6828      	ldr	r0, [r5, #0]
     38c:	f001 f878 	bl	1480 <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     390:	4b30      	ldr	r3, [pc, #192]	; (454 <STACK_SIZE+0x54>)
     392:	5c1a      	ldrb	r2, [r3, r0]
     394:	231f      	movs	r3, #31
     396:	4013      	ands	r3, r2
     398:	2401      	movs	r4, #1
     39a:	0022      	movs	r2, r4
     39c:	409a      	lsls	r2, r3
     39e:	4b27      	ldr	r3, [pc, #156]	; (43c <STACK_SIZE+0x3c>)
     3a0:	601a      	str	r2, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     3a2:	7e6b      	ldrb	r3, [r5, #25]
     3a4:	2201      	movs	r2, #1
     3a6:	4313      	orrs	r3, r2
     3a8:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     3aa:	682b      	ldr	r3, [r5, #0]
     3ac:	735c      	strb	r4, [r3, #13]

	/*Configures TC callback*/
	configure_tc_callbacks();

	/*Initialize the delay driver*/
	delay_init();
     3ae:	f7ff fec9 	bl	144 <delay_init>


	/* Output example information */
	puts(STRING_HEADER);
     3b2:	4829      	ldr	r0, [pc, #164]	; (458 <STACK_SIZE+0x58>)
     3b4:	f001 fbee 	bl	1b94 <puts>
	cpu_irq_enable();
     3b8:	4b28      	ldr	r3, [pc, #160]	; (45c <STACK_SIZE+0x5c>)
     3ba:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     3bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     3c0:	b662      	cpsie	i
	config->input_pull = PORT_PIN_PULL_UP;
     3c2:	a911      	add	r1, sp, #68	; 0x44
     3c4:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
     3c6:	2300      	movs	r3, #0
     3c8:	708b      	strb	r3, [r1, #2]
	system_interrupt_enable_global();


    /*Configures PORT for LED0*/
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
     3ca:	700c      	strb	r4, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
     3cc:	2009      	movs	r0, #9
     3ce:	f000 f931 	bl	634 <port_pin_set_config>
		port_base->OUTCLR.reg = pin_mask;
     3d2:	4c23      	ldr	r4, [pc, #140]	; (460 <STACK_SIZE+0x60>)
     3d4:	2580      	movs	r5, #128	; 0x80
     3d6:	00ad      	lsls	r5, r5, #2
     3d8:	6165      	str	r5, [r4, #20]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     3da:	61e5      	str	r5, [r4, #28]

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	for (int i = 0; i < 3; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_s(1);
     3dc:	26fa      	movs	r6, #250	; 0xfa
     3de:	00b6      	lsls	r6, r6, #2
     3e0:	0030      	movs	r0, r6
     3e2:	f7ff fecd 	bl	180 <delay_cycles_ms>
     3e6:	61e5      	str	r5, [r4, #28]
     3e8:	0030      	movs	r0, r6
     3ea:	f7ff fec9 	bl	180 <delay_cycles_ms>
     3ee:	61e5      	str	r5, [r4, #28]
     3f0:	0030      	movs	r0, r6
     3f2:	f7ff fec5 	bl	180 <delay_cycles_ms>
     3f6:	2414      	movs	r4, #20
     3f8:	4e19      	ldr	r6, [pc, #100]	; (460 <STACK_SIZE+0x60>)
     3fa:	61f5      	str	r5, [r6, #28]
	}

	for (int i = 0; i < 20; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_ms(100);
     3fc:	2064      	movs	r0, #100	; 0x64
     3fe:	f7ff febf 	bl	180 <delay_cycles_ms>
	for (int i = 0; i < 20; i++) {
     402:	3c01      	subs	r4, #1
     404:	2c00      	cmp	r4, #0
     406:	d1f8      	bne.n	3fa <main+0x1b2>
		port_base->OUTCLR.reg = pin_mask;
     408:	4b15      	ldr	r3, [pc, #84]	; (460 <STACK_SIZE+0x60>)
     40a:	2280      	movs	r2, #128	; 0x80
     40c:	0092      	lsls	r2, r2, #2
     40e:	615a      	str	r2, [r3, #20]
	}

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	/*main loop*/
	while(1);
     410:	e7fe      	b.n	410 <STACK_SIZE+0x10>
     412:	46c0      	nop			; (mov r8, r8)
     414:	000a0003 	.word	0x000a0003
     418:	000b0003 	.word	0x000b0003
     41c:	20000094 	.word	0x20000094
     420:	20000170 	.word	0x20000170
     424:	2000016c 	.word	0x2000016c
     428:	000001fd 	.word	0x000001fd
     42c:	20000168 	.word	0x20000168
     430:	000001d5 	.word	0x000001d5
     434:	42001000 	.word	0x42001000
     438:	2000000c 	.word	0x2000000c
     43c:	e000e100 	.word	0xe000e100
     440:	000001b5 	.word	0x000001b5
     444:	ffffd8ef 	.word	0xffffd8ef
     448:	200000cc 	.word	0x200000cc
     44c:	42001800 	.word	0x42001800
     450:	00000211 	.word	0x00000211
     454:	00002d48 	.word	0x00002d48
     458:	00002ca4 	.word	0x00002ca4
     45c:	20000000 	.word	0x20000000
     460:	41004400 	.word	0x41004400

00000464 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     464:	b570      	push	{r4, r5, r6, lr}
     466:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     468:	ac01      	add	r4, sp, #4
     46a:	2501      	movs	r5, #1
     46c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     46e:	2600      	movs	r6, #0
     470:	70a6      	strb	r6, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     472:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     474:	0021      	movs	r1, r4
     476:	2009      	movs	r0, #9
     478:	f000 f8dc 	bl	634 <port_pin_set_config>
		port_base->OUTCLR.reg = pin_mask;
     47c:	4b05      	ldr	r3, [pc, #20]	; (494 <system_board_init+0x30>)
     47e:	2280      	movs	r2, #128	; 0x80
     480:	0092      	lsls	r2, r2, #2
     482:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     484:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     486:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     488:	0021      	movs	r1, r4
     48a:	2019      	movs	r0, #25
     48c:	f000 f8d2 	bl	634 <port_pin_set_config>
}
     490:	b002      	add	sp, #8
     492:	bd70      	pop	{r4, r5, r6, pc}
     494:	41004400 	.word	0x41004400

00000498 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     498:	b510      	push	{r4, lr}
     49a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     49c:	2a00      	cmp	r2, #0
     49e:	d10e      	bne.n	4be <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     4a0:	008b      	lsls	r3, r1, #2
     4a2:	4808      	ldr	r0, [pc, #32]	; (4c4 <extint_register_callback+0x2c>)
     4a4:	581b      	ldr	r3, [r3, r0]
     4a6:	2b00      	cmp	r3, #0
     4a8:	d003      	beq.n	4b2 <extint_register_callback+0x1a>
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     4aa:	201d      	movs	r0, #29
	} else if (_extint_dev.callbacks[channel] == callback) {
     4ac:	42a3      	cmp	r3, r4
     4ae:	d004      	beq.n	4ba <extint_register_callback+0x22>
}
     4b0:	bd10      	pop	{r4, pc}
		_extint_dev.callbacks[channel] = callback;
     4b2:	0089      	lsls	r1, r1, #2
     4b4:	500c      	str	r4, [r1, r0]
		return STATUS_OK;
     4b6:	0010      	movs	r0, r2
     4b8:	e7fa      	b.n	4b0 <extint_register_callback+0x18>
		return STATUS_OK;
     4ba:	0010      	movs	r0, r2
     4bc:	e7f8      	b.n	4b0 <extint_register_callback+0x18>
		return STATUS_ERR_INVALID_ARG;
     4be:	2017      	movs	r0, #23
     4c0:	e7f6      	b.n	4b0 <extint_register_callback+0x18>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	200000ec 	.word	0x200000ec

000004c8 <extint_chan_enable_callback>:
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     4c8:	2900      	cmp	r1, #0
     4ca:	d108      	bne.n	4de <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     4cc:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     4ce:	281f      	cmp	r0, #31
     4d0:	d800      	bhi.n	4d4 <extint_chan_enable_callback+0xc>
		return eics[eic_index];
     4d2:	4a04      	ldr	r2, [pc, #16]	; (4e4 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     4d4:	2301      	movs	r3, #1
     4d6:	4083      	lsls	r3, r0
     4d8:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     4da:	0008      	movs	r0, r1
}
     4dc:	4770      	bx	lr
		return STATUS_ERR_INVALID_ARG;
     4de:	2017      	movs	r0, #23
     4e0:	e7fc      	b.n	4dc <extint_chan_enable_callback+0x14>
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	40001800 	.word	0x40001800

000004e8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     4e8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4ea:	4b0f      	ldr	r3, [pc, #60]	; (528 <EIC_Handler+0x40>)
     4ec:	2200      	movs	r2, #0
     4ee:	701a      	strb	r2, [r3, #0]
     4f0:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     4f2:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     4f4:	4c0d      	ldr	r4, [pc, #52]	; (52c <EIC_Handler+0x44>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4f6:	4d0c      	ldr	r5, [pc, #48]	; (528 <EIC_Handler+0x40>)
     4f8:	e005      	b.n	506 <EIC_Handler+0x1e>
     4fa:	782b      	ldrb	r3, [r5, #0]
     4fc:	3301      	adds	r3, #1
     4fe:	b2db      	uxtb	r3, r3
     500:	702b      	strb	r3, [r5, #0]
     502:	2b0f      	cmp	r3, #15
     504:	d80f      	bhi.n	526 <EIC_Handler+0x3e>
     506:	0031      	movs	r1, r6
     508:	4019      	ands	r1, r3
     50a:	2201      	movs	r2, #1
     50c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     50e:	4908      	ldr	r1, [pc, #32]	; (530 <EIC_Handler+0x48>)
     510:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     512:	4211      	tst	r1, r2
     514:	d0f1      	beq.n	4fa <EIC_Handler+0x12>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     516:	4906      	ldr	r1, [pc, #24]	; (530 <EIC_Handler+0x48>)
     518:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     51a:	009b      	lsls	r3, r3, #2
     51c:	591b      	ldr	r3, [r3, r4]
     51e:	2b00      	cmp	r3, #0
     520:	d0eb      	beq.n	4fa <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     522:	4798      	blx	r3
     524:	e7e9      	b.n	4fa <EIC_Handler+0x12>
			}
		}
	}
}
     526:	bd70      	pop	{r4, r5, r6, pc}
     528:	200000e8 	.word	0x200000e8
     52c:	200000ec 	.word	0x200000ec
     530:	40001800 	.word	0x40001800

00000534 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     534:	4a04      	ldr	r2, [pc, #16]	; (548 <_extint_enable+0x14>)
     536:	7813      	ldrb	r3, [r2, #0]
     538:	2102      	movs	r1, #2
     53a:	430b      	orrs	r3, r1
     53c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     53e:	7853      	ldrb	r3, [r2, #1]
     540:	b25b      	sxtb	r3, r3
     542:	2b00      	cmp	r3, #0
     544:	dbfb      	blt.n	53e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     546:	4770      	bx	lr
     548:	40001800 	.word	0x40001800

0000054c <_system_extint_init>:
{
     54c:	b500      	push	{lr}
     54e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     550:	4a12      	ldr	r2, [pc, #72]	; (59c <_system_extint_init+0x50>)
     552:	6993      	ldr	r3, [r2, #24]
     554:	2140      	movs	r1, #64	; 0x40
     556:	430b      	orrs	r3, r1
     558:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     55a:	a901      	add	r1, sp, #4
     55c:	2300      	movs	r3, #0
     55e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     560:	2005      	movs	r0, #5
     562:	f000 fea5 	bl	12b0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     566:	2005      	movs	r0, #5
     568:	f000 fe64 	bl	1234 <system_gclk_chan_enable>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     56c:	4a0c      	ldr	r2, [pc, #48]	; (5a0 <_system_extint_init+0x54>)
     56e:	7813      	ldrb	r3, [r2, #0]
     570:	2101      	movs	r1, #1
     572:	430b      	orrs	r3, r1
     574:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     576:	7853      	ldrb	r3, [r2, #1]
     578:	b25b      	sxtb	r3, r3
     57a:	2b00      	cmp	r3, #0
     57c:	dbfb      	blt.n	576 <_system_extint_init+0x2a>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     57e:	4b09      	ldr	r3, [pc, #36]	; (5a4 <_system_extint_init+0x58>)
     580:	0019      	movs	r1, r3
     582:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     584:	2200      	movs	r2, #0
     586:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     588:	4299      	cmp	r1, r3
     58a:	d1fc      	bne.n	586 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     58c:	4b06      	ldr	r3, [pc, #24]	; (5a8 <_system_extint_init+0x5c>)
     58e:	2210      	movs	r2, #16
     590:	601a      	str	r2, [r3, #0]
	_extint_enable();
     592:	f7ff ffcf 	bl	534 <_extint_enable>
}
     596:	b003      	add	sp, #12
     598:	bd00      	pop	{pc}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	40000400 	.word	0x40000400
     5a0:	40001800 	.word	0x40001800
     5a4:	200000ec 	.word	0x200000ec
     5a8:	e000e100 	.word	0xe000e100

000005ac <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     5ac:	2300      	movs	r3, #0
     5ae:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     5b0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     5b2:	2201      	movs	r2, #1
     5b4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     5b6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     5b8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     5ba:	3302      	adds	r3, #2
     5bc:	72c3      	strb	r3, [r0, #11]
}
     5be:	4770      	bx	lr

000005c0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c2:	b083      	sub	sp, #12
     5c4:	0005      	movs	r5, r0
     5c6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5c8:	a901      	add	r1, sp, #4
     5ca:	2300      	movs	r3, #0
     5cc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     5ce:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     5d0:	6863      	ldr	r3, [r4, #4]
     5d2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     5d4:	7a23      	ldrb	r3, [r4, #8]
     5d6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     5d8:	7820      	ldrb	r0, [r4, #0]
     5da:	f000 fedd 	bl	1398 <system_pinmux_pin_set_config>
		return NULL;
     5de:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     5e0:	2d1f      	cmp	r5, #31
     5e2:	d800      	bhi.n	5e6 <extint_chan_set_config+0x26>
		return eics[eic_index];
     5e4:	4812      	ldr	r0, [pc, #72]	; (630 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     5e6:	2207      	movs	r2, #7
     5e8:	402a      	ands	r2, r5
     5ea:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     5ec:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     5ee:	7aa3      	ldrb	r3, [r4, #10]
     5f0:	2b00      	cmp	r3, #0
     5f2:	d001      	beq.n	5f8 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     5f4:	2308      	movs	r3, #8
     5f6:	431f      	orrs	r7, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     5f8:	08eb      	lsrs	r3, r5, #3
     5fa:	009b      	lsls	r3, r3, #2
     5fc:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     5fe:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     600:	260f      	movs	r6, #15
     602:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     604:	43b1      	bics	r1, r6
			(new_config << config_pos);
     606:	4097      	lsls	r7, r2
     608:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     60a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     60c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     60e:	7a63      	ldrb	r3, [r4, #9]
     610:	2b00      	cmp	r3, #0
     612:	d006      	beq.n	622 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     614:	6942      	ldr	r2, [r0, #20]
     616:	2301      	movs	r3, #1
     618:	40ab      	lsls	r3, r5
     61a:	4313      	orrs	r3, r2
     61c:	6143      	str	r3, [r0, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     61e:	b003      	add	sp, #12
     620:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     622:	6943      	ldr	r3, [r0, #20]
     624:	2201      	movs	r2, #1
     626:	40aa      	lsls	r2, r5
     628:	4393      	bics	r3, r2
     62a:	6143      	str	r3, [r0, #20]
}
     62c:	e7f7      	b.n	61e <extint_chan_set_config+0x5e>
     62e:	46c0      	nop			; (mov r8, r8)
     630:	40001800 	.word	0x40001800

00000634 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     634:	b500      	push	{lr}
     636:	b083      	sub	sp, #12
     638:	000b      	movs	r3, r1
	config->mux_position = SYSTEM_PINMUX_GPIO;
     63a:	a901      	add	r1, sp, #4
     63c:	2280      	movs	r2, #128	; 0x80
     63e:	700a      	strb	r2, [r1, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     640:	781a      	ldrb	r2, [r3, #0]
     642:	704a      	strb	r2, [r1, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     644:	785a      	ldrb	r2, [r3, #1]
     646:	708a      	strb	r2, [r1, #2]
	pinmux_config.powersave    = config->powersave;
     648:	789b      	ldrb	r3, [r3, #2]
     64a:	70cb      	strb	r3, [r1, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     64c:	f000 fea4 	bl	1398 <system_pinmux_pin_set_config>
}
     650:	b003      	add	sp, #12
     652:	bd00      	pop	{pc}

00000654 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     654:	b5f0      	push	{r4, r5, r6, r7, lr}
     656:	46de      	mov	lr, fp
     658:	4657      	mov	r7, sl
     65a:	464e      	mov	r6, r9
     65c:	4645      	mov	r5, r8
     65e:	b5e0      	push	{r5, r6, r7, lr}
     660:	b087      	sub	sp, #28
     662:	4680      	mov	r8, r0
     664:	9104      	str	r1, [sp, #16]
     666:	0016      	movs	r6, r2
     668:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     66a:	2200      	movs	r2, #0
     66c:	2300      	movs	r3, #0
     66e:	2100      	movs	r1, #0
     670:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     672:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     674:	3101      	adds	r1, #1
     676:	0020      	movs	r0, r4
     678:	9600      	str	r6, [sp, #0]
     67a:	9701      	str	r7, [sp, #4]
     67c:	465c      	mov	r4, fp
     67e:	9403      	str	r4, [sp, #12]
     680:	4644      	mov	r4, r8
     682:	9405      	str	r4, [sp, #20]
     684:	e013      	b.n	6ae <long_division+0x5a>
     686:	2420      	movs	r4, #32
     688:	1a24      	subs	r4, r4, r0
     68a:	000d      	movs	r5, r1
     68c:	40e5      	lsrs	r5, r4
     68e:	46a8      	mov	r8, r5
     690:	e014      	b.n	6bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     692:	9c00      	ldr	r4, [sp, #0]
     694:	9d01      	ldr	r5, [sp, #4]
     696:	1b12      	subs	r2, r2, r4
     698:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     69a:	465c      	mov	r4, fp
     69c:	464d      	mov	r5, r9
     69e:	432c      	orrs	r4, r5
     6a0:	46a3      	mov	fp, r4
     6a2:	9c03      	ldr	r4, [sp, #12]
     6a4:	4645      	mov	r5, r8
     6a6:	432c      	orrs	r4, r5
     6a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     6aa:	3801      	subs	r0, #1
     6ac:	d325      	bcc.n	6fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     6ae:	2420      	movs	r4, #32
     6b0:	4264      	negs	r4, r4
     6b2:	1904      	adds	r4, r0, r4
     6b4:	d4e7      	bmi.n	686 <long_division+0x32>
     6b6:	000d      	movs	r5, r1
     6b8:	40a5      	lsls	r5, r4
     6ba:	46a8      	mov	r8, r5
     6bc:	000c      	movs	r4, r1
     6be:	4084      	lsls	r4, r0
     6c0:	46a1      	mov	r9, r4
		r = r << 1;
     6c2:	1892      	adds	r2, r2, r2
     6c4:	415b      	adcs	r3, r3
     6c6:	0014      	movs	r4, r2
     6c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
     6ca:	9e05      	ldr	r6, [sp, #20]
     6cc:	464f      	mov	r7, r9
     6ce:	403e      	ands	r6, r7
     6d0:	46b4      	mov	ip, r6
     6d2:	9e04      	ldr	r6, [sp, #16]
     6d4:	4647      	mov	r7, r8
     6d6:	403e      	ands	r6, r7
     6d8:	46b2      	mov	sl, r6
     6da:	4666      	mov	r6, ip
     6dc:	4657      	mov	r7, sl
     6de:	433e      	orrs	r6, r7
     6e0:	d003      	beq.n	6ea <long_division+0x96>
			r |= 0x01;
     6e2:	000e      	movs	r6, r1
     6e4:	4326      	orrs	r6, r4
     6e6:	0032      	movs	r2, r6
     6e8:	002b      	movs	r3, r5
		if (r >= d) {
     6ea:	9c00      	ldr	r4, [sp, #0]
     6ec:	9d01      	ldr	r5, [sp, #4]
     6ee:	429d      	cmp	r5, r3
     6f0:	d8db      	bhi.n	6aa <long_division+0x56>
     6f2:	d1ce      	bne.n	692 <long_division+0x3e>
     6f4:	4294      	cmp	r4, r2
     6f6:	d8d8      	bhi.n	6aa <long_division+0x56>
     6f8:	e7cb      	b.n	692 <long_division+0x3e>
		}
	}

	return q;
}
     6fa:	9b03      	ldr	r3, [sp, #12]
     6fc:	4658      	mov	r0, fp
     6fe:	0019      	movs	r1, r3
     700:	b007      	add	sp, #28
     702:	bcf0      	pop	{r4, r5, r6, r7}
     704:	46bb      	mov	fp, r7
     706:	46b2      	mov	sl, r6
     708:	46a9      	mov	r9, r5
     70a:	46a0      	mov	r8, r4
     70c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000070e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     70e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     710:	0849      	lsrs	r1, r1, #1
     712:	4281      	cmp	r1, r0
     714:	d30b      	bcc.n	72e <_sercom_get_sync_baud_val+0x20>
	uint16_t baud_calculated = 0;
     716:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     718:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     71a:	001c      	movs	r4, r3
     71c:	3301      	adds	r3, #1
     71e:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     720:	4288      	cmp	r0, r1
     722:	d9f9      	bls.n	718 <_sercom_get_sync_baud_val+0xa>
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     724:	2cff      	cmp	r4, #255	; 0xff
     726:	d804      	bhi.n	732 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     728:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     72a:	2000      	movs	r0, #0
	}
}
     72c:	bd10      	pop	{r4, pc}
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     72e:	2040      	movs	r0, #64	; 0x40
     730:	e7fc      	b.n	72c <_sercom_get_sync_baud_val+0x1e>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     732:	2040      	movs	r0, #64	; 0x40
     734:	e7fa      	b.n	72c <_sercom_get_sync_baud_val+0x1e>

00000736 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     736:	b5f0      	push	{r4, r5, r6, r7, lr}
     738:	46c6      	mov	lr, r8
     73a:	b500      	push	{lr}
     73c:	0005      	movs	r5, r0
     73e:	000c      	movs	r4, r1
     740:	0016      	movs	r6, r2
     742:	aa06      	add	r2, sp, #24
     744:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     746:	002a      	movs	r2, r5
     748:	4342      	muls	r2, r0
     74a:	428a      	cmp	r2, r1
     74c:	d83b      	bhi.n	7c6 <_sercom_get_async_baud_val+0x90>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     74e:	2b00      	cmp	r3, #0
     750:	d117      	bne.n	782 <_sercom_get_async_baud_val+0x4c>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     752:	002a      	movs	r2, r5
     754:	2100      	movs	r1, #0
     756:	f001 f937 	bl	19c8 <__aeabi_lmul>
     75a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     75c:	0022      	movs	r2, r4
     75e:	2300      	movs	r3, #0
     760:	2000      	movs	r0, #0
     762:	f7ff ff77 	bl	654 <long_division>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     766:	2200      	movs	r2, #0
     768:	2301      	movs	r3, #1
     76a:	001c      	movs	r4, r3
     76c:	0013      	movs	r3, r2
     76e:	1a1b      	subs	r3, r3, r0
     770:	418c      	sbcs	r4, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     772:	0c1a      	lsrs	r2, r3, #16
     774:	0420      	lsls	r0, r4, #16
     776:	4302      	orrs	r2, r0
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
     778:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     77a:	2000      	movs	r0, #0
}
     77c:	bc80      	pop	{r7}
     77e:	46b8      	mov	r8, r7
     780:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
     782:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     784:	2b01      	cmp	r3, #1
     786:	d1f7      	bne.n	778 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     788:	0002      	movs	r2, r0
     78a:	2300      	movs	r3, #0
     78c:	0028      	movs	r0, r5
     78e:	2100      	movs	r1, #0
     790:	f001 f91a 	bl	19c8 <__aeabi_lmul>
     794:	4680      	mov	r8, r0
     796:	000f      	movs	r7, r1
		baud_int = long_division( peripheral_clock, temp1);
     798:	0002      	movs	r2, r0
     79a:	000b      	movs	r3, r1
     79c:	0020      	movs	r0, r4
     79e:	2100      	movs	r1, #0
     7a0:	f7ff ff58 	bl	654 <long_division>
     7a4:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     7a6:	2380      	movs	r3, #128	; 0x80
     7a8:	019b      	lsls	r3, r3, #6
     7aa:	4298      	cmp	r0, r3
     7ac:	d80d      	bhi.n	7ca <_sercom_get_async_baud_val+0x94>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     7ae:	0f61      	lsrs	r1, r4, #29
     7b0:	00e0      	lsls	r0, r4, #3
     7b2:	4642      	mov	r2, r8
     7b4:	003b      	movs	r3, r7
     7b6:	f7ff ff4d 	bl	654 <long_division>
		baud_fp = temp1 - 8 * baud_int;
     7ba:	00ea      	lsls	r2, r5, #3
     7bc:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     7be:	b2d2      	uxtb	r2, r2
     7c0:	0352      	lsls	r2, r2, #13
     7c2:	432a      	orrs	r2, r5
     7c4:	e7d8      	b.n	778 <_sercom_get_async_baud_val+0x42>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7c6:	2040      	movs	r0, #64	; 0x40
     7c8:	e7d8      	b.n	77c <_sercom_get_async_baud_val+0x46>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7ca:	2040      	movs	r0, #64	; 0x40
     7cc:	e7d6      	b.n	77c <_sercom_get_async_baud_val+0x46>
	...

000007d0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7d0:	b510      	push	{r4, lr}
     7d2:	b082      	sub	sp, #8
     7d4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7d6:	4b0f      	ldr	r3, [pc, #60]	; (814 <sercom_set_gclk_generator+0x44>)
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	2b00      	cmp	r3, #0
     7dc:	d00b      	beq.n	7f6 <sercom_set_gclk_generator+0x26>
     7de:	2900      	cmp	r1, #0
     7e0:	d109      	bne.n	7f6 <sercom_set_gclk_generator+0x26>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     7e2:	4b0c      	ldr	r3, [pc, #48]	; (814 <sercom_set_gclk_generator+0x44>)
     7e4:	7858      	ldrb	r0, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
     7e6:	1b00      	subs	r0, r0, r4
     7e8:	1e43      	subs	r3, r0, #1
     7ea:	4198      	sbcs	r0, r3
     7ec:	4240      	negs	r0, r0
     7ee:	241d      	movs	r4, #29
     7f0:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     7f2:	b002      	add	sp, #8
     7f4:	bd10      	pop	{r4, pc}
		gclk_chan_conf.source_generator = generator_source;
     7f6:	a901      	add	r1, sp, #4
     7f8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7fa:	200d      	movs	r0, #13
     7fc:	f000 fd58 	bl	12b0 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     800:	200d      	movs	r0, #13
     802:	f000 fd17 	bl	1234 <system_gclk_chan_enable>
		_sercom_config.generator_source = generator_source;
     806:	4b03      	ldr	r3, [pc, #12]	; (814 <sercom_set_gclk_generator+0x44>)
     808:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     80a:	2201      	movs	r2, #1
     80c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     80e:	2000      	movs	r0, #0
     810:	e7ef      	b.n	7f2 <sercom_set_gclk_generator+0x22>
     812:	46c0      	nop			; (mov r8, r8)
     814:	2000012c 	.word	0x2000012c

00000818 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     818:	0003      	movs	r3, r0
	switch ((uintptr_t)sercom_module) {
     81a:	4a26      	ldr	r2, [pc, #152]	; (8b4 <_sercom_get_default_pad+0x9c>)
     81c:	4290      	cmp	r0, r2
     81e:	d01b      	beq.n	858 <_sercom_get_default_pad+0x40>
     820:	4a25      	ldr	r2, [pc, #148]	; (8b8 <_sercom_get_default_pad+0xa0>)
     822:	4290      	cmp	r0, r2
     824:	d02c      	beq.n	880 <_sercom_get_default_pad+0x68>
     826:	4a25      	ldr	r2, [pc, #148]	; (8bc <_sercom_get_default_pad+0xa4>)
     828:	2000      	movs	r0, #0
     82a:	4293      	cmp	r3, r2
     82c:	d000      	beq.n	830 <_sercom_get_default_pad+0x18>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
}
     82e:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     830:	2902      	cmp	r1, #2
     832:	d039      	beq.n	8a8 <_sercom_get_default_pad+0x90>
     834:	d806      	bhi.n	844 <_sercom_get_default_pad+0x2c>
     836:	1e4b      	subs	r3, r1, #1
     838:	4199      	sbcs	r1, r3
     83a:	0408      	lsls	r0, r1, #16
     83c:	4b20      	ldr	r3, [pc, #128]	; (8c0 <_sercom_get_default_pad+0xa8>)
     83e:	469c      	mov	ip, r3
     840:	4460      	add	r0, ip
     842:	e7f4      	b.n	82e <_sercom_get_default_pad+0x16>
     844:	3903      	subs	r1, #3
     846:	1e4b      	subs	r3, r1, #1
     848:	4199      	sbcs	r1, r3
     84a:	4249      	negs	r1, r1
     84c:	481d      	ldr	r0, [pc, #116]	; (8c4 <_sercom_get_default_pad+0xac>)
     84e:	4008      	ands	r0, r1
     850:	4b1d      	ldr	r3, [pc, #116]	; (8c8 <_sercom_get_default_pad+0xb0>)
     852:	469c      	mov	ip, r3
     854:	4460      	add	r0, ip
     856:	e7ea      	b.n	82e <_sercom_get_default_pad+0x16>
     858:	2902      	cmp	r1, #2
     85a:	d027      	beq.n	8ac <_sercom_get_default_pad+0x94>
     85c:	d806      	bhi.n	86c <_sercom_get_default_pad+0x54>
     85e:	1e4b      	subs	r3, r1, #1
     860:	4199      	sbcs	r1, r3
     862:	0408      	lsls	r0, r1, #16
     864:	4b19      	ldr	r3, [pc, #100]	; (8cc <_sercom_get_default_pad+0xb4>)
     866:	469c      	mov	ip, r3
     868:	4460      	add	r0, ip
     86a:	e7e0      	b.n	82e <_sercom_get_default_pad+0x16>
     86c:	3903      	subs	r1, #3
     86e:	1e4b      	subs	r3, r1, #1
     870:	4199      	sbcs	r1, r3
     872:	4249      	negs	r1, r1
     874:	4816      	ldr	r0, [pc, #88]	; (8d0 <_sercom_get_default_pad+0xb8>)
     876:	4008      	ands	r0, r1
     878:	4b16      	ldr	r3, [pc, #88]	; (8d4 <_sercom_get_default_pad+0xbc>)
     87a:	469c      	mov	ip, r3
     87c:	4460      	add	r0, ip
     87e:	e7d6      	b.n	82e <_sercom_get_default_pad+0x16>
     880:	2902      	cmp	r1, #2
     882:	d015      	beq.n	8b0 <_sercom_get_default_pad+0x98>
     884:	d806      	bhi.n	894 <_sercom_get_default_pad+0x7c>
     886:	1e4b      	subs	r3, r1, #1
     888:	4199      	sbcs	r1, r3
     88a:	0408      	lsls	r0, r1, #16
     88c:	4b12      	ldr	r3, [pc, #72]	; (8d8 <_sercom_get_default_pad+0xc0>)
     88e:	469c      	mov	ip, r3
     890:	4460      	add	r0, ip
     892:	e7cc      	b.n	82e <_sercom_get_default_pad+0x16>
     894:	3903      	subs	r1, #3
     896:	1e4b      	subs	r3, r1, #1
     898:	4199      	sbcs	r1, r3
     89a:	4249      	negs	r1, r1
     89c:	480f      	ldr	r0, [pc, #60]	; (8dc <_sercom_get_default_pad+0xc4>)
     89e:	4008      	ands	r0, r1
     8a0:	4b0f      	ldr	r3, [pc, #60]	; (8e0 <_sercom_get_default_pad+0xc8>)
     8a2:	469c      	mov	ip, r3
     8a4:	4460      	add	r0, ip
     8a6:	e7c2      	b.n	82e <_sercom_get_default_pad+0x16>
     8a8:	480e      	ldr	r0, [pc, #56]	; (8e4 <_sercom_get_default_pad+0xcc>)
     8aa:	e7c0      	b.n	82e <_sercom_get_default_pad+0x16>
     8ac:	480e      	ldr	r0, [pc, #56]	; (8e8 <_sercom_get_default_pad+0xd0>)
     8ae:	e7be      	b.n	82e <_sercom_get_default_pad+0x16>
     8b0:	480e      	ldr	r0, [pc, #56]	; (8ec <_sercom_get_default_pad+0xd4>)
     8b2:	e7bc      	b.n	82e <_sercom_get_default_pad+0x16>
     8b4:	42000c00 	.word	0x42000c00
     8b8:	42001000 	.word	0x42001000
     8bc:	42000800 	.word	0x42000800
     8c0:	00040003 	.word	0x00040003
     8c4:	fff8fffd 	.word	0xfff8fffd
     8c8:	00070003 	.word	0x00070003
     8cc:	00160002 	.word	0x00160002
     8d0:	ffe0fffd 	.word	0xffe0fffd
     8d4:	001f0003 	.word	0x001f0003
     8d8:	00160003 	.word	0x00160003
     8dc:	ffe6fffd 	.word	0xffe6fffd
     8e0:	00190003 	.word	0x00190003
     8e4:	00060003 	.word	0x00060003
     8e8:	001e0003 	.word	0x001e0003
     8ec:	00100003 	.word	0x00100003

000008f0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8f0:	b530      	push	{r4, r5, lr}
     8f2:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8f4:	aa01      	add	r2, sp, #4
     8f6:	4b0b      	ldr	r3, [pc, #44]	; (924 <_sercom_get_sercom_inst_index+0x34>)
     8f8:	cb32      	ldmia	r3!, {r1, r4, r5}
     8fa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8fc:	0003      	movs	r3, r0
     8fe:	9a01      	ldr	r2, [sp, #4]
     900:	4282      	cmp	r2, r0
     902:	d00a      	beq.n	91a <_sercom_get_sercom_inst_index+0x2a>
     904:	9a02      	ldr	r2, [sp, #8]
     906:	4282      	cmp	r2, r0
     908:	d00a      	beq.n	920 <_sercom_get_sercom_inst_index+0x30>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     90a:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     90c:	9a03      	ldr	r2, [sp, #12]
     90e:	429a      	cmp	r2, r3
     910:	d001      	beq.n	916 <_sercom_get_sercom_inst_index+0x26>
}
     912:	b005      	add	sp, #20
     914:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     916:	3002      	adds	r0, #2
     918:	e000      	b.n	91c <_sercom_get_sercom_inst_index+0x2c>
     91a:	2000      	movs	r0, #0
			return i;
     91c:	b2c0      	uxtb	r0, r0
     91e:	e7f8      	b.n	912 <_sercom_get_sercom_inst_index+0x22>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     920:	2001      	movs	r0, #1
     922:	e7fb      	b.n	91c <_sercom_get_sercom_inst_index+0x2c>
     924:	00002d4c 	.word	0x00002d4c

00000928 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     928:	4770      	bx	lr
	...

0000092c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     92c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     92e:	4b0a      	ldr	r3, [pc, #40]	; (958 <_sercom_set_handler+0x2c>)
     930:	781b      	ldrb	r3, [r3, #0]
     932:	2b00      	cmp	r3, #0
     934:	d10c      	bne.n	950 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     936:	4c09      	ldr	r4, [pc, #36]	; (95c <_sercom_set_handler+0x30>)
     938:	4d09      	ldr	r5, [pc, #36]	; (960 <_sercom_set_handler+0x34>)
     93a:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     93c:	4b09      	ldr	r3, [pc, #36]	; (964 <_sercom_set_handler+0x38>)
     93e:	2200      	movs	r2, #0
     940:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     942:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     944:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     946:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     948:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
     94a:	4b03      	ldr	r3, [pc, #12]	; (958 <_sercom_set_handler+0x2c>)
     94c:	3201      	adds	r2, #1
     94e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     950:	0080      	lsls	r0, r0, #2
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <_sercom_set_handler+0x30>)
     954:	50c1      	str	r1, [r0, r3]
}
     956:	bd30      	pop	{r4, r5, pc}
     958:	2000012e 	.word	0x2000012e
     95c:	2000013c 	.word	0x2000013c
     960:	00000929 	.word	0x00000929
     964:	20000130 	.word	0x20000130

00000968 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     968:	b510      	push	{r4, lr}
     96a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     96c:	ac01      	add	r4, sp, #4
     96e:	4b05      	ldr	r3, [pc, #20]	; (984 <_sercom_get_interrupt_vector+0x1c>)
     970:	881a      	ldrh	r2, [r3, #0]
     972:	8022      	strh	r2, [r4, #0]
     974:	789b      	ldrb	r3, [r3, #2]
     976:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     978:	f7ff ffba 	bl	8f0 <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     97c:	5620      	ldrsb	r0, [r4, r0]
}
     97e:	b002      	add	sp, #8
     980:	bd10      	pop	{r4, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	00002d58 	.word	0x00002d58

00000988 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     988:	b510      	push	{r4, lr}
     98a:	4b02      	ldr	r3, [pc, #8]	; (994 <SERCOM0_Handler+0xc>)
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	2000      	movs	r0, #0
     990:	4798      	blx	r3
     992:	bd10      	pop	{r4, pc}
     994:	2000013c 	.word	0x2000013c

00000998 <SERCOM1_Handler>:
     998:	b510      	push	{r4, lr}
     99a:	4b02      	ldr	r3, [pc, #8]	; (9a4 <SERCOM1_Handler+0xc>)
     99c:	685b      	ldr	r3, [r3, #4]
     99e:	2001      	movs	r0, #1
     9a0:	4798      	blx	r3
     9a2:	bd10      	pop	{r4, pc}
     9a4:	2000013c 	.word	0x2000013c

000009a8 <SERCOM2_Handler>:
     9a8:	b510      	push	{r4, lr}
     9aa:	4b02      	ldr	r3, [pc, #8]	; (9b4 <SERCOM2_Handler+0xc>)
     9ac:	689b      	ldr	r3, [r3, #8]
     9ae:	2002      	movs	r0, #2
     9b0:	4798      	blx	r3
     9b2:	bd10      	pop	{r4, pc}
     9b4:	2000013c 	.word	0x2000013c

000009b8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ba:	46de      	mov	lr, fp
     9bc:	4657      	mov	r7, sl
     9be:	464e      	mov	r6, r9
     9c0:	4645      	mov	r5, r8
     9c2:	b5e0      	push	{r5, r6, r7, lr}
     9c4:	b08d      	sub	sp, #52	; 0x34
     9c6:	0005      	movs	r5, r0
     9c8:	000f      	movs	r7, r1
     9ca:	0014      	movs	r4, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     9cc:	6001      	str	r1, [r0, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9ce:	0008      	movs	r0, r1
     9d0:	f7ff ff8e 	bl	8f0 <_sercom_get_sercom_inst_index>
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9d4:	683b      	ldr	r3, [r7, #0]
     9d6:	07db      	lsls	r3, r3, #31
     9d8:	d500      	bpl.n	9dc <usart_init+0x24>
     9da:	e14e      	b.n	c7a <usart_init+0x2c2>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     9dc:	683b      	ldr	r3, [r7, #0]
     9de:	079b      	lsls	r3, r3, #30
     9e0:	d500      	bpl.n	9e4 <usart_init+0x2c>
     9e2:	e14c      	b.n	c7e <usart_init+0x2c6>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     9e4:	4aa7      	ldr	r2, [pc, #668]	; (c84 <usart_init+0x2cc>)
     9e6:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     9e8:	1c86      	adds	r6, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     9ea:	2301      	movs	r3, #1
     9ec:	40b3      	lsls	r3, r6
     9ee:	430b      	orrs	r3, r1
     9f0:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     9f2:	a90b      	add	r1, sp, #44	; 0x2c
     9f4:	232d      	movs	r3, #45	; 0x2d
     9f6:	4698      	mov	r8, r3
     9f8:	5ce3      	ldrb	r3, [r4, r3]
     9fa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     9fc:	300e      	adds	r0, #14
     9fe:	b2c6      	uxtb	r6, r0
     a00:	0030      	movs	r0, r6
     a02:	f000 fc55 	bl	12b0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
     a06:	0030      	movs	r0, r6
     a08:	f000 fc14 	bl	1234 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
     a0c:	4643      	mov	r3, r8
     a0e:	5ce0      	ldrb	r0, [r4, r3]
     a10:	2100      	movs	r1, #0
     a12:	f7ff fedd 	bl	7d0 <sercom_set_gclk_generator>

	/* Set character size */
	module->character_size = config->character_size;
     a16:	7ae3      	ldrb	r3, [r4, #11]
     a18:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     a1a:	2324      	movs	r3, #36	; 0x24
     a1c:	5ce3      	ldrb	r3, [r4, r3]
     a1e:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     a20:	2325      	movs	r3, #37	; 0x25
     a22:	5ce3      	ldrb	r3, [r4, r3]
     a24:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     a26:	7ee3      	ldrb	r3, [r4, #27]
     a28:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     a2a:	7f23      	ldrb	r3, [r4, #28]
     a2c:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a2e:	682b      	ldr	r3, [r5, #0]
     a30:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a32:	0018      	movs	r0, r3
     a34:	f7ff ff5c 	bl	8f0 <_sercom_get_sercom_inst_index>
	uint16_t baud  = 0;
     a38:	230e      	movs	r3, #14
     a3a:	aa02      	add	r2, sp, #8
     a3c:	4694      	mov	ip, r2
     a3e:	4463      	add	r3, ip
     a40:	2200      	movs	r2, #0
     a42:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     a44:	8a22      	ldrh	r2, [r4, #16]
     a46:	23c0      	movs	r3, #192	; 0xc0
     a48:	01db      	lsls	r3, r3, #7
     a4a:	429a      	cmp	r2, r3
     a4c:	d03d      	beq.n	aca <usart_init+0x112>
     a4e:	d833      	bhi.n	ab8 <usart_init+0x100>
     a50:	2380      	movs	r3, #128	; 0x80
     a52:	019b      	lsls	r3, r3, #6
     a54:	429a      	cmp	r2, r3
     a56:	d03d      	beq.n	ad4 <usart_init+0x11c>
     a58:	2380      	movs	r3, #128	; 0x80
     a5a:	01db      	lsls	r3, r3, #7
     a5c:	429a      	cmp	r2, r3
     a5e:	d13e      	bne.n	ade <usart_init+0x126>
     a60:	2308      	movs	r3, #8
     a62:	469b      	mov	fp, r3
     a64:	2300      	movs	r3, #0
     a66:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a68:	2326      	movs	r3, #38	; 0x26
     a6a:	5ce3      	ldrb	r3, [r4, r3]
     a6c:	075b      	lsls	r3, r3, #29
     a6e:	4699      	mov	r9, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a70:	6863      	ldr	r3, [r4, #4]
     a72:	6826      	ldr	r6, [r4, #0]
     a74:	68e1      	ldr	r1, [r4, #12]
     a76:	430e      	orrs	r6, r1
     a78:	6961      	ldr	r1, [r4, #20]
     a7a:	430e      	orrs	r6, r1
     a7c:	431e      	orrs	r6, r3
     a7e:	4316      	orrs	r6, r2
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a80:	7e22      	ldrb	r2, [r4, #24]
     a82:	0212      	lsls	r2, r2, #8
     a84:	4316      	orrs	r6, r2
	switch (transfer_mode)
     a86:	2b00      	cmp	r3, #0
     a88:	d033      	beq.n	af2 <usart_init+0x13a>
     a8a:	2280      	movs	r2, #128	; 0x80
     a8c:	0552      	lsls	r2, r2, #21
     a8e:	4293      	cmp	r3, r2
     a90:	d141      	bne.n	b16 <usart_init+0x15e>
			if (!config->use_external_clock) {
     a92:	2327      	movs	r3, #39	; 0x27
     a94:	5ce3      	ldrb	r3, [r4, r3]
     a96:	2b00      	cmp	r3, #0
     a98:	d13d      	bne.n	b16 <usart_init+0x15e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a9a:	6a23      	ldr	r3, [r4, #32]
     a9c:	469a      	mov	sl, r3
     a9e:	300e      	adds	r0, #14
     aa0:	b2c0      	uxtb	r0, r0
     aa2:	f000 fc11 	bl	12c8 <system_gclk_chan_get_hz>
     aa6:	0001      	movs	r1, r0
     aa8:	220e      	movs	r2, #14
     aaa:	ab02      	add	r3, sp, #8
     aac:	469c      	mov	ip, r3
     aae:	4462      	add	r2, ip
     ab0:	4650      	mov	r0, sl
     ab2:	f7ff fe2c 	bl	70e <_sercom_get_sync_baud_val>
     ab6:	e02b      	b.n	b10 <usart_init+0x158>
	switch (config->sample_rate) {
     ab8:	2380      	movs	r3, #128	; 0x80
     aba:	021b      	lsls	r3, r3, #8
     abc:	429a      	cmp	r2, r3
     abe:	d113      	bne.n	ae8 <usart_init+0x130>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     ac0:	2303      	movs	r3, #3
     ac2:	469b      	mov	fp, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ac4:	2300      	movs	r3, #0
     ac6:	469a      	mov	sl, r3
     ac8:	e7ce      	b.n	a68 <usart_init+0xb0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     aca:	2308      	movs	r3, #8
     acc:	469b      	mov	fp, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ace:	3b07      	subs	r3, #7
     ad0:	469a      	mov	sl, r3
     ad2:	e7c9      	b.n	a68 <usart_init+0xb0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ad4:	2310      	movs	r3, #16
     ad6:	469b      	mov	fp, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ad8:	3b0f      	subs	r3, #15
     ada:	469a      	mov	sl, r3
     adc:	e7c4      	b.n	a68 <usart_init+0xb0>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ade:	2310      	movs	r3, #16
     ae0:	469b      	mov	fp, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ae2:	2300      	movs	r3, #0
     ae4:	469a      	mov	sl, r3
     ae6:	e7bf      	b.n	a68 <usart_init+0xb0>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ae8:	2310      	movs	r3, #16
     aea:	469b      	mov	fp, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     aec:	2300      	movs	r3, #0
     aee:	469a      	mov	sl, r3
     af0:	e7ba      	b.n	a68 <usart_init+0xb0>
			if (config->use_external_clock) {
     af2:	2327      	movs	r3, #39	; 0x27
     af4:	5ce3      	ldrb	r3, [r4, r3]
     af6:	2b00      	cmp	r3, #0
     af8:	d067      	beq.n	bca <usart_init+0x212>
						_sercom_get_async_baud_val(config->baudrate,
     afa:	465b      	mov	r3, fp
     afc:	9300      	str	r3, [sp, #0]
     afe:	4653      	mov	r3, sl
     b00:	220e      	movs	r2, #14
     b02:	a902      	add	r1, sp, #8
     b04:	468c      	mov	ip, r1
     b06:	4462      	add	r2, ip
     b08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     b0a:	6a20      	ldr	r0, [r4, #32]
     b0c:	f7ff fe13 	bl	736 <_sercom_get_async_baud_val>
	if (status_code != STATUS_OK) {
     b10:	2800      	cmp	r0, #0
     b12:	d000      	beq.n	b16 <usart_init+0x15e>
     b14:	e0aa      	b.n	c6c <usart_init+0x2b4>
	if(config->encoding_format_enable) {
     b16:	7e63      	ldrb	r3, [r4, #25]
     b18:	2b00      	cmp	r3, #0
     b1a:	d002      	beq.n	b22 <usart_init+0x16a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     b1c:	7ea3      	ldrb	r3, [r4, #26]
     b1e:	4642      	mov	r2, r8
     b20:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     b22:	230e      	movs	r3, #14
     b24:	aa02      	add	r2, sp, #8
     b26:	4694      	mov	ip, r2
     b28:	4463      	add	r3, ip
     b2a:	881b      	ldrh	r3, [r3, #0]
     b2c:	4642      	mov	r2, r8
     b2e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     b30:	464b      	mov	r3, r9
     b32:	4333      	orrs	r3, r6
     b34:	001e      	movs	r6, r3
	if (config->use_external_clock == false) {
     b36:	2327      	movs	r3, #39	; 0x27
     b38:	5ce3      	ldrb	r3, [r4, r3]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d101      	bne.n	b42 <usart_init+0x18a>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     b3e:	3304      	adds	r3, #4
     b40:	431e      	orrs	r6, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b42:	7e63      	ldrb	r3, [r4, #25]
     b44:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b46:	7f22      	ldrb	r2, [r4, #28]
     b48:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b4a:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b4c:	7f62      	ldrb	r2, [r4, #29]
     b4e:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b50:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b52:	2224      	movs	r2, #36	; 0x24
     b54:	5ca2      	ldrb	r2, [r4, r2]
     b56:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b58:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     b5a:	2225      	movs	r2, #37	; 0x25
     b5c:	5ca2      	ldrb	r2, [r4, r2]
     b5e:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b60:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     b62:	7aa1      	ldrb	r1, [r4, #10]
     b64:	7ae2      	ldrb	r2, [r4, #11]
     b66:	4311      	orrs	r1, r2
     b68:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     b6a:	8923      	ldrh	r3, [r4, #8]
     b6c:	2bff      	cmp	r3, #255	; 0xff
     b6e:	d03e      	beq.n	bee <usart_init+0x236>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     b70:	2280      	movs	r2, #128	; 0x80
     b72:	0452      	lsls	r2, r2, #17
     b74:	4316      	orrs	r6, r2
		ctrlb |= config->parity;
     b76:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     b78:	232c      	movs	r3, #44	; 0x2c
     b7a:	5ce3      	ldrb	r3, [r4, r3]
     b7c:	2b00      	cmp	r3, #0
     b7e:	d103      	bne.n	b88 <usart_init+0x1d0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b80:	4b41      	ldr	r3, [pc, #260]	; (c88 <usart_init+0x2d0>)
     b82:	789b      	ldrb	r3, [r3, #2]
     b84:	079b      	lsls	r3, r3, #30
     b86:	d501      	bpl.n	b8c <usart_init+0x1d4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     b88:	2380      	movs	r3, #128	; 0x80
     b8a:	431e      	orrs	r6, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     b8c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b8e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     b90:	2b00      	cmp	r3, #0
     b92:	d1fc      	bne.n	b8e <usart_init+0x1d6>
	usart_hw->CTRLB.reg = ctrlb;
     b94:	4643      	mov	r3, r8
     b96:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b98:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b9a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     b9c:	2b00      	cmp	r3, #0
     b9e:	d1fc      	bne.n	b9a <usart_init+0x1e2>
	usart_hw->CTRLA.reg = ctrla;
     ba0:	4643      	mov	r3, r8
     ba2:	601e      	str	r6, [r3, #0]
     ba4:	ab0a      	add	r3, sp, #40	; 0x28
     ba6:	2280      	movs	r2, #128	; 0x80
     ba8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     baa:	2200      	movs	r2, #0
     bac:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     bae:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     bb0:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
     bb4:	9306      	str	r3, [sp, #24]
     bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
     bb8:	9307      	str	r3, [sp, #28]
     bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     bbc:	9308      	str	r3, [sp, #32]
     bbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     bc0:	9303      	str	r3, [sp, #12]
     bc2:	9309      	str	r3, [sp, #36]	; 0x24
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     bc4:	ae06      	add	r6, sp, #24
     bc6:	2400      	movs	r4, #0
     bc8:	e022      	b.n	c10 <usart_init+0x258>
						_sercom_get_async_baud_val(config->baudrate,
     bca:	6a23      	ldr	r3, [r4, #32]
     bcc:	9303      	str	r3, [sp, #12]
     bce:	300e      	adds	r0, #14
     bd0:	b2c0      	uxtb	r0, r0
     bd2:	f000 fb79 	bl	12c8 <system_gclk_chan_get_hz>
     bd6:	0001      	movs	r1, r0
     bd8:	465a      	mov	r2, fp
     bda:	9200      	str	r2, [sp, #0]
     bdc:	4653      	mov	r3, sl
     bde:	220e      	movs	r2, #14
     be0:	a802      	add	r0, sp, #8
     be2:	4684      	mov	ip, r0
     be4:	4462      	add	r2, ip
     be6:	9803      	ldr	r0, [sp, #12]
     be8:	f7ff fda5 	bl	736 <_sercom_get_async_baud_val>
     bec:	e790      	b.n	b10 <usart_init+0x158>
		if(config->lin_slave_enable) {
     bee:	7ee3      	ldrb	r3, [r4, #27]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d0c1      	beq.n	b78 <usart_init+0x1c0>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     bf4:	2380      	movs	r3, #128	; 0x80
     bf6:	04db      	lsls	r3, r3, #19
     bf8:	431e      	orrs	r6, r3
     bfa:	e7bd      	b.n	b78 <usart_init+0x1c0>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     bfc:	0021      	movs	r1, r4
     bfe:	0038      	movs	r0, r7
     c00:	f7ff fe0a 	bl	818 <_sercom_get_default_pad>
     c04:	e007      	b.n	c16 <usart_init+0x25e>
	for (uint8_t pad = 0; pad < 4; pad++) {
     c06:	3401      	adds	r4, #1
     c08:	b2e4      	uxtb	r4, r4
     c0a:	3604      	adds	r6, #4
     c0c:	2c04      	cmp	r4, #4
     c0e:	d00e      	beq.n	c2e <usart_init+0x276>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c10:	6830      	ldr	r0, [r6, #0]
		if (current_pinmux == PINMUX_DEFAULT) {
     c12:	2800      	cmp	r0, #0
     c14:	d0f2      	beq.n	bfc <usart_init+0x244>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     c16:	1c43      	adds	r3, r0, #1
     c18:	d0f5      	beq.n	c06 <usart_init+0x24e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c1a:	ab02      	add	r3, sp, #8
     c1c:	2220      	movs	r2, #32
     c1e:	189b      	adds	r3, r3, r2
     c20:	7018      	strb	r0, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c22:	0c00      	lsrs	r0, r0, #16
     c24:	b2c0      	uxtb	r0, r0
     c26:	a90a      	add	r1, sp, #40	; 0x28
     c28:	f000 fbb6 	bl	1398 <system_pinmux_pin_set_config>
     c2c:	e7eb      	b.n	c06 <usart_init+0x24e>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     c2e:	2300      	movs	r3, #0
     c30:	60eb      	str	r3, [r5, #12]
     c32:	612b      	str	r3, [r5, #16]
     c34:	616b      	str	r3, [r5, #20]
     c36:	61ab      	str	r3, [r5, #24]
     c38:	61eb      	str	r3, [r5, #28]
     c3a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     c3c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     c3e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     c40:	2200      	movs	r2, #0
     c42:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     c44:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     c46:	3330      	adds	r3, #48	; 0x30
     c48:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     c4a:	3301      	adds	r3, #1
     c4c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     c4e:	3301      	adds	r3, #1
     c50:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     c52:	3301      	adds	r3, #1
     c54:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     c56:	6828      	ldr	r0, [r5, #0]
     c58:	f7ff fe4a 	bl	8f0 <_sercom_get_sercom_inst_index>
     c5c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     c5e:	490b      	ldr	r1, [pc, #44]	; (c8c <usart_init+0x2d4>)
     c60:	f7ff fe64 	bl	92c <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
     c64:	00a4      	lsls	r4, r4, #2
     c66:	4b0a      	ldr	r3, [pc, #40]	; (c90 <usart_init+0x2d8>)
     c68:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     c6a:	2000      	movs	r0, #0
}
     c6c:	b00d      	add	sp, #52	; 0x34
     c6e:	bcf0      	pop	{r4, r5, r6, r7}
     c70:	46bb      	mov	fp, r7
     c72:	46b2      	mov	sl, r6
     c74:	46a9      	mov	r9, r5
     c76:	46a0      	mov	r8, r4
     c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_BUSY;
     c7a:	2005      	movs	r0, #5
     c7c:	e7f6      	b.n	c6c <usart_init+0x2b4>
		return STATUS_ERR_DENIED;
     c7e:	201c      	movs	r0, #28
     c80:	e7f4      	b.n	c6c <usart_init+0x2b4>
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	40000400 	.word	0x40000400
     c88:	41002000 	.word	0x41002000
     c8c:	00000d29 	.word	0x00000d29
     c90:	20000130 	.word	0x20000130

00000c94 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     c94:	79c3      	ldrb	r3, [r0, #7]
     c96:	2b00      	cmp	r3, #0
     c98:	d00b      	beq.n	cb2 <usart_write_wait+0x1e>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     c9a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
     c9c:	b29b      	uxth	r3, r3
     c9e:	2b00      	cmp	r3, #0
     ca0:	d109      	bne.n	cb6 <usart_write_wait+0x22>
	SercomUsart *const usart_hw = &(module->hw->USART);
     ca2:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     ca4:	8511      	strh	r1, [r2, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     ca6:	2102      	movs	r1, #2
     ca8:	7e13      	ldrb	r3, [r2, #24]
     caa:	420b      	tst	r3, r1
     cac:	d0fc      	beq.n	ca8 <usart_write_wait+0x14>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     cae:	2000      	movs	r0, #0
}
     cb0:	4770      	bx	lr
		return STATUS_ERR_DENIED;
     cb2:	201c      	movs	r0, #28
     cb4:	e7fc      	b.n	cb0 <usart_write_wait+0x1c>
		return STATUS_BUSY;
     cb6:	2005      	movs	r0, #5
     cb8:	e7fa      	b.n	cb0 <usart_write_wait+0x1c>

00000cba <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     cba:	7983      	ldrb	r3, [r0, #6]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d02d      	beq.n	d1c <usart_read_wait+0x62>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     cc0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
     cc2:	b29b      	uxth	r3, r3
     cc4:	2b00      	cmp	r3, #0
     cc6:	d12b      	bne.n	d20 <usart_read_wait+0x66>
	SercomUsart *const usart_hw = &(module->hw->USART);
     cc8:	6803      	ldr	r3, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     cca:	7e1a      	ldrb	r2, [r3, #24]
     ccc:	0752      	lsls	r2, r2, #29
     cce:	d529      	bpl.n	d24 <usart_read_wait+0x6a>
		/* Return error code */
		return STATUS_BUSY;
	}

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cd0:	8b5a      	ldrh	r2, [r3, #26]
     cd2:	b2d0      	uxtb	r0, r2

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     cd4:	0692      	lsls	r2, r2, #26
     cd6:	d009      	beq.n	cec <usart_read_wait+0x32>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     cd8:	0782      	lsls	r2, r0, #30
     cda:	d40b      	bmi.n	cf4 <usart_read_wait+0x3a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;

			return STATUS_ERR_BAD_FORMAT;
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     cdc:	0742      	lsls	r2, r0, #29
     cde:	d40d      	bmi.n	cfc <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;

			return STATUS_ERR_OVERFLOW;
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ce0:	07c2      	lsls	r2, r0, #31
     ce2:	d40f      	bmi.n	d04 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;

			return STATUS_ERR_BAD_DATA;
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     ce4:	06c2      	lsls	r2, r0, #27
     ce6:	d411      	bmi.n	d0c <usart_read_wait+0x52>

			return STATUS_ERR_PROTOCOL;
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ce8:	0682      	lsls	r2, r0, #26
     cea:	d413      	bmi.n	d14 <usart_read_wait+0x5a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     cee:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     cf0:	2000      	movs	r0, #0
}
     cf2:	4770      	bx	lr
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     cf4:	2202      	movs	r2, #2
     cf6:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_BAD_FORMAT;
     cf8:	201a      	movs	r0, #26
     cfa:	e7fa      	b.n	cf2 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cfc:	2204      	movs	r2, #4
     cfe:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_OVERFLOW;
     d00:	201e      	movs	r0, #30
     d02:	e7f6      	b.n	cf2 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d04:	2201      	movs	r2, #1
     d06:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_BAD_DATA;
     d08:	2013      	movs	r0, #19
     d0a:	e7f2      	b.n	cf2 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d0c:	2210      	movs	r2, #16
     d0e:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_PROTOCOL;
     d10:	2042      	movs	r0, #66	; 0x42
     d12:	e7ee      	b.n	cf2 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d14:	2220      	movs	r2, #32
     d16:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_PACKET_COLLISION;
     d18:	2041      	movs	r0, #65	; 0x41
     d1a:	e7ea      	b.n	cf2 <usart_read_wait+0x38>
		return STATUS_ERR_DENIED;
     d1c:	201c      	movs	r0, #28
     d1e:	e7e8      	b.n	cf2 <usart_read_wait+0x38>
		return STATUS_BUSY;
     d20:	2005      	movs	r0, #5
     d22:	e7e6      	b.n	cf2 <usart_read_wait+0x38>
		return STATUS_BUSY;
     d24:	2005      	movs	r0, #5
     d26:	e7e4      	b.n	cf2 <usart_read_wait+0x38>

00000d28 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     d2a:	0080      	lsls	r0, r0, #2
     d2c:	4b60      	ldr	r3, [pc, #384]	; (eb0 <_usart_interrupt_handler+0x188>)
     d2e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     d30:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d32:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     d34:	2b00      	cmp	r3, #0
     d36:	d1fc      	bne.n	d32 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     d38:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     d3a:	7da6      	ldrb	r6, [r4, #22]
     d3c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     d3e:	2330      	movs	r3, #48	; 0x30
     d40:	5ceb      	ldrb	r3, [r5, r3]
     d42:	2231      	movs	r2, #49	; 0x31
     d44:	5caf      	ldrb	r7, [r5, r2]
     d46:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     d48:	07f3      	lsls	r3, r6, #31
     d4a:	d522      	bpl.n	d92 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     d4c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d4e:	b29b      	uxth	r3, r3
     d50:	2b00      	cmp	r3, #0
     d52:	d01c      	beq.n	d8e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     d56:	7813      	ldrb	r3, [r2, #0]
     d58:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     d5a:	1c51      	adds	r1, r2, #1
     d5c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d5e:	7969      	ldrb	r1, [r5, #5]
     d60:	2901      	cmp	r1, #1
     d62:	d00e      	beq.n	d82 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d64:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     d66:	05db      	lsls	r3, r3, #23
     d68:	0ddb      	lsrs	r3, r3, #23
     d6a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     d6c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d6e:	3b01      	subs	r3, #1
     d70:	b29b      	uxth	r3, r3
     d72:	85eb      	strh	r3, [r5, #46]	; 0x2e
     d74:	2b00      	cmp	r3, #0
     d76:	d10c      	bne.n	d92 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d78:	3301      	adds	r3, #1
     d7a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     d7c:	3301      	adds	r3, #1
     d7e:	75a3      	strb	r3, [r4, #22]
     d80:	e007      	b.n	d92 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     d82:	7851      	ldrb	r1, [r2, #1]
     d84:	0209      	lsls	r1, r1, #8
     d86:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     d88:	3202      	adds	r2, #2
     d8a:	62aa      	str	r2, [r5, #40]	; 0x28
     d8c:	e7eb      	b.n	d66 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d8e:	2301      	movs	r3, #1
     d90:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     d92:	07b3      	lsls	r3, r6, #30
     d94:	d509      	bpl.n	daa <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     d96:	2302      	movs	r3, #2
     d98:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     d9a:	3331      	adds	r3, #49	; 0x31
     d9c:	2200      	movs	r2, #0
     d9e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     da0:	07fb      	lsls	r3, r7, #31
     da2:	d502      	bpl.n	daa <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     da4:	0028      	movs	r0, r5
     da6:	68eb      	ldr	r3, [r5, #12]
     da8:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     daa:	0773      	lsls	r3, r6, #29
     dac:	d561      	bpl.n	e72 <_usart_interrupt_handler+0x14a>

		if (module->remaining_rx_buffer_length) {
     dae:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     db0:	b29b      	uxth	r3, r3
     db2:	2b00      	cmp	r3, #0
     db4:	d05b      	beq.n	e6e <_usart_interrupt_handler+0x146>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     db6:	8b62      	ldrh	r2, [r4, #26]
     db8:	b2d3      	uxtb	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     dba:	0712      	lsls	r2, r2, #28
     dbc:	d410      	bmi.n	de0 <_usart_interrupt_handler+0xb8>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     dbe:	223f      	movs	r2, #63	; 0x3f
     dc0:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     dc2:	2b00      	cmp	r3, #0
     dc4:	d030      	beq.n	e28 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     dc6:	079a      	lsls	r2, r3, #30
     dc8:	d50d      	bpl.n	de6 <_usart_interrupt_handler+0xbe>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     dca:	2332      	movs	r3, #50	; 0x32
     dcc:	221a      	movs	r2, #26
     dce:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     dd0:	3b30      	subs	r3, #48	; 0x30
     dd2:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     dd4:	077b      	lsls	r3, r7, #29
     dd6:	d54c      	bpl.n	e72 <_usart_interrupt_handler+0x14a>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     dd8:	0028      	movs	r0, r5
     dda:	696b      	ldr	r3, [r5, #20]
     ddc:	4798      	blx	r3
     dde:	e048      	b.n	e72 <_usart_interrupt_handler+0x14a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     de0:	2237      	movs	r2, #55	; 0x37
     de2:	4013      	ands	r3, r2
     de4:	e7ed      	b.n	dc2 <_usart_interrupt_handler+0x9a>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     de6:	075a      	lsls	r2, r3, #29
     de8:	d505      	bpl.n	df6 <_usart_interrupt_handler+0xce>
					module->rx_status = STATUS_ERR_OVERFLOW;
     dea:	2332      	movs	r3, #50	; 0x32
     dec:	221e      	movs	r2, #30
     dee:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     df0:	3b2e      	subs	r3, #46	; 0x2e
     df2:	8363      	strh	r3, [r4, #26]
     df4:	e7ee      	b.n	dd4 <_usart_interrupt_handler+0xac>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     df6:	07da      	lsls	r2, r3, #31
     df8:	d505      	bpl.n	e06 <_usart_interrupt_handler+0xde>
					module->rx_status = STATUS_ERR_BAD_DATA;
     dfa:	2332      	movs	r3, #50	; 0x32
     dfc:	2213      	movs	r2, #19
     dfe:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e00:	3b31      	subs	r3, #49	; 0x31
     e02:	8363      	strh	r3, [r4, #26]
     e04:	e7e6      	b.n	dd4 <_usart_interrupt_handler+0xac>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     e06:	06da      	lsls	r2, r3, #27
     e08:	d505      	bpl.n	e16 <_usart_interrupt_handler+0xee>
					module->rx_status = STATUS_ERR_PROTOCOL;
     e0a:	2332      	movs	r3, #50	; 0x32
     e0c:	2242      	movs	r2, #66	; 0x42
     e0e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e10:	3b22      	subs	r3, #34	; 0x22
     e12:	8363      	strh	r3, [r4, #26]
     e14:	e7de      	b.n	dd4 <_usart_interrupt_handler+0xac>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     e16:	2220      	movs	r2, #32
     e18:	421a      	tst	r2, r3
     e1a:	d0db      	beq.n	dd4 <_usart_interrupt_handler+0xac>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     e1c:	2332      	movs	r3, #50	; 0x32
     e1e:	3221      	adds	r2, #33	; 0x21
     e20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e22:	3b12      	subs	r3, #18
     e24:	8363      	strh	r3, [r4, #26]
     e26:	e7d5      	b.n	dd4 <_usart_interrupt_handler+0xac>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     e28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e2a:	05db      	lsls	r3, r3, #23
     e2c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     e2e:	b2da      	uxtb	r2, r3
     e30:	6a69      	ldr	r1, [r5, #36]	; 0x24
     e32:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     e34:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     e36:	1c51      	adds	r1, r2, #1
     e38:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e3a:	7969      	ldrb	r1, [r5, #5]
     e3c:	2901      	cmp	r1, #1
     e3e:	d010      	beq.n	e62 <_usart_interrupt_handler+0x13a>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     e40:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e42:	3b01      	subs	r3, #1
     e44:	b29b      	uxth	r3, r3
     e46:	85ab      	strh	r3, [r5, #44]	; 0x2c
     e48:	2b00      	cmp	r3, #0
     e4a:	d112      	bne.n	e72 <_usart_interrupt_handler+0x14a>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e4c:	3304      	adds	r3, #4
     e4e:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     e50:	332e      	adds	r3, #46	; 0x2e
     e52:	2200      	movs	r2, #0
     e54:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     e56:	07bb      	lsls	r3, r7, #30
     e58:	d50b      	bpl.n	e72 <_usart_interrupt_handler+0x14a>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     e5a:	0028      	movs	r0, r5
     e5c:	692b      	ldr	r3, [r5, #16]
     e5e:	4798      	blx	r3
     e60:	e007      	b.n	e72 <_usart_interrupt_handler+0x14a>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     e62:	0a1b      	lsrs	r3, r3, #8
     e64:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     e68:	3301      	adds	r3, #1
     e6a:	626b      	str	r3, [r5, #36]	; 0x24
     e6c:	e7e8      	b.n	e40 <_usart_interrupt_handler+0x118>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e6e:	2304      	movs	r3, #4
     e70:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     e72:	06f3      	lsls	r3, r6, #27
     e74:	d507      	bpl.n	e86 <_usart_interrupt_handler+0x15e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     e76:	2310      	movs	r3, #16
     e78:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     e7a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     e7c:	06fb      	lsls	r3, r7, #27
     e7e:	d502      	bpl.n	e86 <_usart_interrupt_handler+0x15e>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     e80:	0028      	movs	r0, r5
     e82:	69eb      	ldr	r3, [r5, #28]
     e84:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     e86:	06b3      	lsls	r3, r6, #26
     e88:	d507      	bpl.n	e9a <_usart_interrupt_handler+0x172>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     e8a:	2320      	movs	r3, #32
     e8c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     e8e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     e90:	073b      	lsls	r3, r7, #28
     e92:	d502      	bpl.n	e9a <_usart_interrupt_handler+0x172>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     e94:	0028      	movs	r0, r5
     e96:	69ab      	ldr	r3, [r5, #24]
     e98:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     e9a:	0733      	lsls	r3, r6, #28
     e9c:	d507      	bpl.n	eae <_usart_interrupt_handler+0x186>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     e9e:	2308      	movs	r3, #8
     ea0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ea2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     ea4:	06bb      	lsls	r3, r7, #26
     ea6:	d502      	bpl.n	eae <_usart_interrupt_handler+0x186>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ea8:	6a2b      	ldr	r3, [r5, #32]
     eaa:	0028      	movs	r0, r5
     eac:	4798      	blx	r3
		}
	}
#endif
}
     eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eb0:	20000130 	.word	0x20000130

00000eb4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     eb4:	b510      	push	{r4, lr}
	switch (clock_source) {
     eb6:	2808      	cmp	r0, #8
     eb8:	d803      	bhi.n	ec2 <system_clock_source_get_hz+0xe>
     eba:	0080      	lsls	r0, r0, #2
     ebc:	4b1d      	ldr	r3, [pc, #116]	; (f34 <system_clock_source_get_hz+0x80>)
     ebe:	581b      	ldr	r3, [r3, r0]
     ec0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     ec2:	2000      	movs	r0, #0
     ec4:	e033      	b.n	f2e <system_clock_source_get_hz+0x7a>
		return _system_clock_inst.xosc.frequency;
     ec6:	4b1c      	ldr	r3, [pc, #112]	; (f38 <system_clock_source_get_hz+0x84>)
     ec8:	6918      	ldr	r0, [r3, #16]
     eca:	e030      	b.n	f2e <system_clock_source_get_hz+0x7a>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     ecc:	4b1b      	ldr	r3, [pc, #108]	; (f3c <system_clock_source_get_hz+0x88>)
     ece:	6a1b      	ldr	r3, [r3, #32]
     ed0:	059b      	lsls	r3, r3, #22
     ed2:	0f9b      	lsrs	r3, r3, #30
     ed4:	481a      	ldr	r0, [pc, #104]	; (f40 <system_clock_source_get_hz+0x8c>)
     ed6:	40d8      	lsrs	r0, r3
     ed8:	e029      	b.n	f2e <system_clock_source_get_hz+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     eda:	4b17      	ldr	r3, [pc, #92]	; (f38 <system_clock_source_get_hz+0x84>)
     edc:	6958      	ldr	r0, [r3, #20]
     ede:	e026      	b.n	f2e <system_clock_source_get_hz+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ee0:	4b15      	ldr	r3, [pc, #84]	; (f38 <system_clock_source_get_hz+0x84>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	2202      	movs	r2, #2
     ee6:	0010      	movs	r0, r2
     ee8:	4018      	ands	r0, r3
     eea:	421a      	tst	r2, r3
     eec:	d01f      	beq.n	f2e <system_clock_source_get_hz+0x7a>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     eee:	4913      	ldr	r1, [pc, #76]	; (f3c <system_clock_source_get_hz+0x88>)
     ef0:	320e      	adds	r2, #14
     ef2:	68cb      	ldr	r3, [r1, #12]
     ef4:	421a      	tst	r2, r3
     ef6:	d0fc      	beq.n	ef2 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
     ef8:	4b0f      	ldr	r3, [pc, #60]	; (f38 <system_clock_source_get_hz+0x84>)
     efa:	681a      	ldr	r2, [r3, #0]
     efc:	2324      	movs	r3, #36	; 0x24
     efe:	4013      	ands	r3, r2
     f00:	2b04      	cmp	r3, #4
     f02:	d001      	beq.n	f08 <system_clock_source_get_hz+0x54>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		default:
			return 48000000UL;
     f04:	480f      	ldr	r0, [pc, #60]	; (f44 <system_clock_source_get_hz+0x90>)
     f06:	e012      	b.n	f2e <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f08:	2000      	movs	r0, #0
     f0a:	f000 f9dd 	bl	12c8 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
     f0e:	4b0a      	ldr	r3, [pc, #40]	; (f38 <system_clock_source_get_hz+0x84>)
     f10:	689b      	ldr	r3, [r3, #8]
     f12:	041b      	lsls	r3, r3, #16
     f14:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f16:	4358      	muls	r0, r3
     f18:	e009      	b.n	f2e <system_clock_source_get_hz+0x7a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f1a:	4a08      	ldr	r2, [pc, #32]	; (f3c <system_clock_source_get_hz+0x88>)
     f1c:	2350      	movs	r3, #80	; 0x50
     f1e:	5cd3      	ldrb	r3, [r2, r3]
     f20:	075b      	lsls	r3, r3, #29
     f22:	d505      	bpl.n	f30 <system_clock_source_get_hz+0x7c>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     f24:	4b04      	ldr	r3, [pc, #16]	; (f38 <system_clock_source_get_hz+0x84>)
     f26:	68d8      	ldr	r0, [r3, #12]
     f28:	e001      	b.n	f2e <system_clock_source_get_hz+0x7a>
		return 32768UL;
     f2a:	2080      	movs	r0, #128	; 0x80
     f2c:	0200      	lsls	r0, r0, #8
#endif

	default:
		return 0;
	}
}
     f2e:	bd10      	pop	{r4, pc}
			return 0;
     f30:	2000      	movs	r0, #0
     f32:	e7fc      	b.n	f2e <system_clock_source_get_hz+0x7a>
     f34:	00002d5c 	.word	0x00002d5c
     f38:	20000148 	.word	0x20000148
     f3c:	40000800 	.word	0x40000800
     f40:	007a1200 	.word	0x007a1200
     f44:	02dc6c00 	.word	0x02dc6c00

00000f48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     f48:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     f4a:	490c      	ldr	r1, [pc, #48]	; (f7c <system_clock_source_osc8m_set_config+0x34>)
     f4c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     f4e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     f50:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     f52:	7840      	ldrb	r0, [r0, #1]
     f54:	2201      	movs	r2, #1
     f56:	4010      	ands	r0, r2
     f58:	0180      	lsls	r0, r0, #6
     f5a:	2640      	movs	r6, #64	; 0x40
     f5c:	43b3      	bics	r3, r6
     f5e:	4303      	orrs	r3, r0
     f60:	402a      	ands	r2, r5
     f62:	01d2      	lsls	r2, r2, #7
     f64:	2080      	movs	r0, #128	; 0x80
     f66:	4383      	bics	r3, r0
     f68:	4313      	orrs	r3, r2
     f6a:	2203      	movs	r2, #3
     f6c:	4022      	ands	r2, r4
     f6e:	0212      	lsls	r2, r2, #8
     f70:	4803      	ldr	r0, [pc, #12]	; (f80 <system_clock_source_osc8m_set_config+0x38>)
     f72:	4003      	ands	r3, r0
     f74:	4313      	orrs	r3, r2
     f76:	620b      	str	r3, [r1, #32]
}
     f78:	bd70      	pop	{r4, r5, r6, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	40000800 	.word	0x40000800
     f80:	fffffcff 	.word	0xfffffcff

00000f84 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f84:	2808      	cmp	r0, #8
     f86:	d803      	bhi.n	f90 <system_clock_source_enable+0xc>
     f88:	0083      	lsls	r3, r0, #2
     f8a:	4a25      	ldr	r2, [pc, #148]	; (1020 <system_clock_source_enable+0x9c>)
     f8c:	58d3      	ldr	r3, [r2, r3]
     f8e:	469f      	mov	pc, r3
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f90:	2017      	movs	r0, #23
}
     f92:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f94:	4a23      	ldr	r2, [pc, #140]	; (1024 <system_clock_source_enable+0xa0>)
     f96:	6a13      	ldr	r3, [r2, #32]
     f98:	2102      	movs	r1, #2
     f9a:	430b      	orrs	r3, r1
     f9c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     f9e:	2000      	movs	r0, #0
     fa0:	e7f7      	b.n	f92 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     fa2:	4a20      	ldr	r2, [pc, #128]	; (1024 <system_clock_source_enable+0xa0>)
     fa4:	6993      	ldr	r3, [r2, #24]
     fa6:	2102      	movs	r1, #2
     fa8:	430b      	orrs	r3, r1
     faa:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
     fac:	2000      	movs	r0, #0
		break;
     fae:	e7f0      	b.n	f92 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     fb0:	4a1c      	ldr	r2, [pc, #112]	; (1024 <system_clock_source_enable+0xa0>)
     fb2:	8a13      	ldrh	r3, [r2, #16]
     fb4:	2102      	movs	r1, #2
     fb6:	430b      	orrs	r3, r1
     fb8:	8213      	strh	r3, [r2, #16]
		break;
     fba:	e7ea      	b.n	f92 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     fbc:	4a19      	ldr	r2, [pc, #100]	; (1024 <system_clock_source_enable+0xa0>)
     fbe:	8a93      	ldrh	r3, [r2, #20]
     fc0:	2102      	movs	r1, #2
     fc2:	430b      	orrs	r3, r1
     fc4:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     fc6:	2000      	movs	r0, #0
		break;
     fc8:	e7e3      	b.n	f92 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     fca:	4917      	ldr	r1, [pc, #92]	; (1028 <system_clock_source_enable+0xa4>)
     fcc:	680b      	ldr	r3, [r1, #0]
     fce:	2202      	movs	r2, #2
     fd0:	4313      	orrs	r3, r2
     fd2:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     fd4:	4b13      	ldr	r3, [pc, #76]	; (1024 <system_clock_source_enable+0xa0>)
     fd6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     fd8:	0019      	movs	r1, r3
     fda:	320e      	adds	r2, #14
     fdc:	68cb      	ldr	r3, [r1, #12]
     fde:	421a      	tst	r2, r3
     fe0:	d0fc      	beq.n	fdc <system_clock_source_enable+0x58>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     fe2:	4a11      	ldr	r2, [pc, #68]	; (1028 <system_clock_source_enable+0xa4>)
     fe4:	6891      	ldr	r1, [r2, #8]
     fe6:	4b0f      	ldr	r3, [pc, #60]	; (1024 <system_clock_source_enable+0xa0>)
     fe8:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     fea:	6852      	ldr	r2, [r2, #4]
     fec:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     fee:	2200      	movs	r2, #0
     ff0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ff2:	0019      	movs	r1, r3
     ff4:	3210      	adds	r2, #16
     ff6:	68cb      	ldr	r3, [r1, #12]
     ff8:	421a      	tst	r2, r3
     ffa:	d0fc      	beq.n	ff6 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ffc:	4b0a      	ldr	r3, [pc, #40]	; (1028 <system_clock_source_enable+0xa4>)
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	b29b      	uxth	r3, r3
    1002:	4a08      	ldr	r2, [pc, #32]	; (1024 <system_clock_source_enable+0xa0>)
    1004:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1006:	2000      	movs	r0, #0
}
    1008:	e7c3      	b.n	f92 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    100a:	4906      	ldr	r1, [pc, #24]	; (1024 <system_clock_source_enable+0xa0>)
    100c:	2244      	movs	r2, #68	; 0x44
    100e:	5c8b      	ldrb	r3, [r1, r2]
    1010:	2002      	movs	r0, #2
    1012:	4303      	orrs	r3, r0
    1014:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1016:	2000      	movs	r0, #0
		break;
    1018:	e7bb      	b.n	f92 <system_clock_source_enable+0xe>
		return STATUS_OK;
    101a:	2000      	movs	r0, #0
    101c:	e7b9      	b.n	f92 <system_clock_source_enable+0xe>
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00002d80 	.word	0x00002d80
    1024:	40000800 	.word	0x40000800
    1028:	20000148 	.word	0x20000148

0000102c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    102c:	b530      	push	{r4, r5, lr}
    102e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1030:	4b1b      	ldr	r3, [pc, #108]	; (10a0 <system_clock_init+0x74>)
    1032:	22c2      	movs	r2, #194	; 0xc2
    1034:	00d2      	lsls	r2, r2, #3
    1036:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1038:	4a1a      	ldr	r2, [pc, #104]	; (10a4 <system_clock_init+0x78>)
    103a:	6853      	ldr	r3, [r2, #4]
    103c:	211e      	movs	r1, #30
    103e:	438b      	bics	r3, r1
    1040:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1042:	2301      	movs	r3, #1
    1044:	466a      	mov	r2, sp
    1046:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1048:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    104a:	b2e0      	uxtb	r0, r4
    104c:	4669      	mov	r1, sp
    104e:	f000 f92f 	bl	12b0 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1052:	3401      	adds	r4, #1
    1054:	2c18      	cmp	r4, #24
    1056:	d1f8      	bne.n	104a <system_clock_init+0x1e>
	config->run_in_standby  = false;
    1058:	a803      	add	r0, sp, #12
    105a:	2400      	movs	r4, #0
    105c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    105e:	2501      	movs	r5, #1
    1060:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1062:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1064:	f7ff ff70 	bl	f48 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1068:	2006      	movs	r0, #6
    106a:	f7ff ff8b 	bl	f84 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    106e:	f000 f81d 	bl	10ac <system_gclk_init>
	PM->CPUSEL.reg = (uint32_t)divider;
    1072:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <system_clock_init+0x7c>)
    1074:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1076:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1078:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    107a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    107c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    107e:	466b      	mov	r3, sp
    1080:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1082:	2306      	movs	r3, #6
    1084:	466a      	mov	r2, sp
    1086:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1088:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    108a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    108c:	4669      	mov	r1, sp
    108e:	2000      	movs	r0, #0
    1090:	f000 f81e 	bl	10d0 <system_gclk_gen_set_config>
    1094:	2000      	movs	r0, #0
    1096:	f000 f871 	bl	117c <system_gclk_gen_enable>
#endif
}
    109a:	b005      	add	sp, #20
    109c:	bd30      	pop	{r4, r5, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	40000800 	.word	0x40000800
    10a4:	41004000 	.word	0x41004000
    10a8:	40000400 	.word	0x40000400

000010ac <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    10ac:	4a06      	ldr	r2, [pc, #24]	; (10c8 <system_gclk_init+0x1c>)
    10ae:	6993      	ldr	r3, [r2, #24]
    10b0:	2108      	movs	r1, #8
    10b2:	430b      	orrs	r3, r1
    10b4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10b6:	4b05      	ldr	r3, [pc, #20]	; (10cc <system_gclk_init+0x20>)
    10b8:	2201      	movs	r2, #1
    10ba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10bc:	0019      	movs	r1, r3
    10be:	780b      	ldrb	r3, [r1, #0]
    10c0:	4213      	tst	r3, r2
    10c2:	d1fc      	bne.n	10be <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    10c4:	4770      	bx	lr
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	40000400 	.word	0x40000400
    10cc:	40000c00 	.word	0x40000c00

000010d0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    10d0:	b570      	push	{r4, r5, r6, lr}
    10d2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    10d4:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    10d6:	780c      	ldrb	r4, [r1, #0]
    10d8:	0224      	lsls	r4, r4, #8
    10da:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    10dc:	784b      	ldrb	r3, [r1, #1]
    10de:	2b00      	cmp	r3, #0
    10e0:	d002      	beq.n	10e8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    10e2:	2380      	movs	r3, #128	; 0x80
    10e4:	02db      	lsls	r3, r3, #11
    10e6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    10e8:	7a4b      	ldrb	r3, [r1, #9]
    10ea:	2b00      	cmp	r3, #0
    10ec:	d002      	beq.n	10f4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    10ee:	2380      	movs	r3, #128	; 0x80
    10f0:	031b      	lsls	r3, r3, #12
    10f2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    10f4:	684a      	ldr	r2, [r1, #4]
    10f6:	2a01      	cmp	r2, #1
    10f8:	d910      	bls.n	111c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    10fa:	1e53      	subs	r3, r2, #1
    10fc:	0015      	movs	r5, r2
    10fe:	401d      	ands	r5, r3
    1100:	421a      	tst	r2, r3
    1102:	d130      	bne.n	1166 <system_gclk_gen_set_config+0x96>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1104:	2a02      	cmp	r2, #2
    1106:	d904      	bls.n	1112 <system_gclk_gen_set_config+0x42>
    1108:	2302      	movs	r3, #2
						mask <<= 1) {
				div2_count++;
    110a:	3501      	adds	r5, #1
						mask <<= 1) {
    110c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    110e:	429a      	cmp	r2, r3
    1110:	d8fb      	bhi.n	110a <system_gclk_gen_set_config+0x3a>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1112:	022d      	lsls	r5, r5, #8
    1114:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1116:	2380      	movs	r3, #128	; 0x80
    1118:	035b      	lsls	r3, r3, #13
    111a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    111c:	7a0b      	ldrb	r3, [r1, #8]
    111e:	2b00      	cmp	r3, #0
    1120:	d002      	beq.n	1128 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1122:	2380      	movs	r3, #128	; 0x80
    1124:	039b      	lsls	r3, r3, #14
    1126:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1128:	4a12      	ldr	r2, [pc, #72]	; (1174 <system_gclk_gen_set_config+0xa4>)
    112a:	7853      	ldrb	r3, [r2, #1]
    112c:	b25b      	sxtb	r3, r3
    112e:	2b00      	cmp	r3, #0
    1130:	dbfb      	blt.n	112a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1132:	f7fe ffcf 	bl	d4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1136:	4b10      	ldr	r3, [pc, #64]	; (1178 <system_gclk_gen_set_config+0xa8>)
    1138:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    113a:	4a0e      	ldr	r2, [pc, #56]	; (1174 <system_gclk_gen_set_config+0xa4>)
    113c:	7853      	ldrb	r3, [r2, #1]
    113e:	b25b      	sxtb	r3, r3
    1140:	2b00      	cmp	r3, #0
    1142:	dbfb      	blt.n	113c <system_gclk_gen_set_config+0x6c>

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1144:	4b0b      	ldr	r3, [pc, #44]	; (1174 <system_gclk_gen_set_config+0xa4>)
    1146:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1148:	001a      	movs	r2, r3
    114a:	7853      	ldrb	r3, [r2, #1]
    114c:	b25b      	sxtb	r3, r3
    114e:	2b00      	cmp	r3, #0
    1150:	dbfb      	blt.n	114a <system_gclk_gen_set_config+0x7a>

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1152:	4a08      	ldr	r2, [pc, #32]	; (1174 <system_gclk_gen_set_config+0xa4>)
    1154:	6853      	ldr	r3, [r2, #4]
    1156:	2180      	movs	r1, #128	; 0x80
    1158:	0249      	lsls	r1, r1, #9
    115a:	400b      	ands	r3, r1
    115c:	431c      	orrs	r4, r3
    115e:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    1160:	f7fe ffd8 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1164:	bd70      	pop	{r4, r5, r6, pc}
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1166:	0215      	lsls	r5, r2, #8
			new_gendiv_config  |=
    1168:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    116a:	2380      	movs	r3, #128	; 0x80
    116c:	029b      	lsls	r3, r3, #10
    116e:	431c      	orrs	r4, r3
    1170:	e7d4      	b.n	111c <system_gclk_gen_set_config+0x4c>
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	40000c00 	.word	0x40000c00
    1178:	40000c08 	.word	0x40000c08

0000117c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    117c:	b510      	push	{r4, lr}
    117e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1180:	4a0b      	ldr	r2, [pc, #44]	; (11b0 <system_gclk_gen_enable+0x34>)
    1182:	7853      	ldrb	r3, [r2, #1]
    1184:	b25b      	sxtb	r3, r3
    1186:	2b00      	cmp	r3, #0
    1188:	dbfb      	blt.n	1182 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    118a:	f7fe ffa3 	bl	d4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    118e:	4b09      	ldr	r3, [pc, #36]	; (11b4 <system_gclk_gen_enable+0x38>)
    1190:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1192:	4a07      	ldr	r2, [pc, #28]	; (11b0 <system_gclk_gen_enable+0x34>)
    1194:	7853      	ldrb	r3, [r2, #1]
    1196:	b25b      	sxtb	r3, r3
    1198:	2b00      	cmp	r3, #0
    119a:	dbfb      	blt.n	1194 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    119c:	4a04      	ldr	r2, [pc, #16]	; (11b0 <system_gclk_gen_enable+0x34>)
    119e:	6851      	ldr	r1, [r2, #4]
    11a0:	2380      	movs	r3, #128	; 0x80
    11a2:	025b      	lsls	r3, r3, #9
    11a4:	430b      	orrs	r3, r1
    11a6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    11a8:	f7fe ffb4 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    11ac:	bd10      	pop	{r4, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	40000c00 	.word	0x40000c00
    11b4:	40000c04 	.word	0x40000c04

000011b8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    11b8:	b570      	push	{r4, r5, r6, lr}
    11ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11bc:	4a1a      	ldr	r2, [pc, #104]	; (1228 <system_gclk_gen_get_hz+0x70>)
    11be:	7853      	ldrb	r3, [r2, #1]
    11c0:	b25b      	sxtb	r3, r3
    11c2:	2b00      	cmp	r3, #0
    11c4:	dbfb      	blt.n	11be <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    11c6:	f7fe ff85 	bl	d4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11ca:	4b18      	ldr	r3, [pc, #96]	; (122c <system_gclk_gen_get_hz+0x74>)
    11cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ce:	4a16      	ldr	r2, [pc, #88]	; (1228 <system_gclk_gen_get_hz+0x70>)
    11d0:	7853      	ldrb	r3, [r2, #1]
    11d2:	b25b      	sxtb	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	dbfb      	blt.n	11d0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    11d8:	4d13      	ldr	r5, [pc, #76]	; (1228 <system_gclk_gen_get_hz+0x70>)
    11da:	6868      	ldr	r0, [r5, #4]
    11dc:	04c0      	lsls	r0, r0, #19
    11de:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    11e0:	f7ff fe68 	bl	eb4 <system_clock_source_get_hz>
    11e4:	0006      	movs	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11e6:	4b11      	ldr	r3, [pc, #68]	; (122c <system_gclk_gen_get_hz+0x74>)
    11e8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    11ea:	686d      	ldr	r5, [r5, #4]
    11ec:	02ed      	lsls	r5, r5, #11
    11ee:	0fed      	lsrs	r5, r5, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11f0:	4b0f      	ldr	r3, [pc, #60]	; (1230 <system_gclk_gen_get_hz+0x78>)
    11f2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11f4:	4a0c      	ldr	r2, [pc, #48]	; (1228 <system_gclk_gen_get_hz+0x70>)
    11f6:	7853      	ldrb	r3, [r2, #1]
    11f8:	b25b      	sxtb	r3, r3
    11fa:	2b00      	cmp	r3, #0
    11fc:	dbfb      	blt.n	11f6 <system_gclk_gen_get_hz+0x3e>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    11fe:	4b0a      	ldr	r3, [pc, #40]	; (1228 <system_gclk_gen_get_hz+0x70>)
    1200:	689c      	ldr	r4, [r3, #8]
    1202:	0224      	lsls	r4, r4, #8
    1204:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1206:	f7fe ff85 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    120a:	2d00      	cmp	r5, #0
    120c:	d107      	bne.n	121e <system_gclk_gen_get_hz+0x66>
    120e:	2c01      	cmp	r4, #1
    1210:	d907      	bls.n	1222 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1212:	0021      	movs	r1, r4
    1214:	0030      	movs	r0, r6
    1216:	f000 fb4b 	bl	18b0 <__udivsi3>
    121a:	0006      	movs	r6, r0
    121c:	e001      	b.n	1222 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    121e:	3401      	adds	r4, #1
    1220:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1222:	0030      	movs	r0, r6
    1224:	bd70      	pop	{r4, r5, r6, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	40000c00 	.word	0x40000c00
    122c:	40000c04 	.word	0x40000c04
    1230:	40000c08 	.word	0x40000c08

00001234 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1234:	b510      	push	{r4, lr}
    1236:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1238:	f7fe ff4c 	bl	d4 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    123c:	4b05      	ldr	r3, [pc, #20]	; (1254 <system_gclk_chan_enable+0x20>)
    123e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1240:	4a05      	ldr	r2, [pc, #20]	; (1258 <system_gclk_chan_enable+0x24>)
    1242:	8853      	ldrh	r3, [r2, #2]
    1244:	2180      	movs	r1, #128	; 0x80
    1246:	01c9      	lsls	r1, r1, #7
    1248:	430b      	orrs	r3, r1
    124a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    124c:	f7fe ff62 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1250:	bd10      	pop	{r4, pc}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	40000c02 	.word	0x40000c02
    1258:	40000c00 	.word	0x40000c00

0000125c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    125c:	b510      	push	{r4, lr}
    125e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1260:	f7fe ff38 	bl	d4 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1264:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <system_gclk_chan_disable+0x44>)
    1266:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1268:	4a0e      	ldr	r2, [pc, #56]	; (12a4 <system_gclk_chan_disable+0x48>)
    126a:	8853      	ldrh	r3, [r2, #2]
    126c:	051b      	lsls	r3, r3, #20
    126e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1270:	8853      	ldrh	r3, [r2, #2]
    1272:	490d      	ldr	r1, [pc, #52]	; (12a8 <system_gclk_chan_disable+0x4c>)
    1274:	400b      	ands	r3, r1
    1276:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1278:	8853      	ldrh	r3, [r2, #2]
    127a:	490c      	ldr	r1, [pc, #48]	; (12ac <system_gclk_chan_disable+0x50>)
    127c:	400b      	ands	r3, r1
    127e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1280:	0011      	movs	r1, r2
    1282:	2280      	movs	r2, #128	; 0x80
    1284:	01d2      	lsls	r2, r2, #7
    1286:	884b      	ldrh	r3, [r1, #2]
    1288:	4213      	tst	r3, r2
    128a:	d1fc      	bne.n	1286 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    128c:	4905      	ldr	r1, [pc, #20]	; (12a4 <system_gclk_chan_disable+0x48>)
    128e:	884a      	ldrh	r2, [r1, #2]
    1290:	0203      	lsls	r3, r0, #8
    1292:	4805      	ldr	r0, [pc, #20]	; (12a8 <system_gclk_chan_disable+0x4c>)
    1294:	4002      	ands	r2, r0
    1296:	4313      	orrs	r3, r2
    1298:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    129a:	f7fe ff3b 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    129e:	bd10      	pop	{r4, pc}
    12a0:	40000c02 	.word	0x40000c02
    12a4:	40000c00 	.word	0x40000c00
    12a8:	fffff0ff 	.word	0xfffff0ff
    12ac:	ffffbfff 	.word	0xffffbfff

000012b0 <system_gclk_chan_set_config>:
{
    12b0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    12b2:	780c      	ldrb	r4, [r1, #0]
    12b4:	0224      	lsls	r4, r4, #8
    12b6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    12b8:	f7ff ffd0 	bl	125c <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    12bc:	b2a4      	uxth	r4, r4
    12be:	4b01      	ldr	r3, [pc, #4]	; (12c4 <system_gclk_chan_set_config+0x14>)
    12c0:	805c      	strh	r4, [r3, #2]
}
    12c2:	bd10      	pop	{r4, pc}
    12c4:	40000c00 	.word	0x40000c00

000012c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    12c8:	b510      	push	{r4, lr}
    12ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12cc:	f7fe ff02 	bl	d4 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12d0:	4b05      	ldr	r3, [pc, #20]	; (12e8 <system_gclk_chan_get_hz+0x20>)
    12d2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    12d4:	4b05      	ldr	r3, [pc, #20]	; (12ec <system_gclk_chan_get_hz+0x24>)
    12d6:	885c      	ldrh	r4, [r3, #2]
    12d8:	0524      	lsls	r4, r4, #20
    12da:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    12dc:	f7fe ff1a 	bl	114 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    12e0:	0020      	movs	r0, r4
    12e2:	f7ff ff69 	bl	11b8 <system_gclk_gen_get_hz>
}
    12e6:	bd10      	pop	{r4, pc}
    12e8:	40000c02 	.word	0x40000c02
    12ec:	40000c00 	.word	0x40000c00

000012f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    12f0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    12f2:	78d3      	ldrb	r3, [r2, #3]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d135      	bne.n	1364 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    12f8:	7813      	ldrb	r3, [r2, #0]
    12fa:	2b80      	cmp	r3, #128	; 0x80
    12fc:	d029      	beq.n	1352 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    12fe:	061b      	lsls	r3, r3, #24
    1300:	2480      	movs	r4, #128	; 0x80
    1302:	0264      	lsls	r4, r4, #9
    1304:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1306:	7854      	ldrb	r4, [r2, #1]
    1308:	2502      	movs	r5, #2
    130a:	43ac      	bics	r4, r5
    130c:	d106      	bne.n	131c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    130e:	7894      	ldrb	r4, [r2, #2]
    1310:	2c00      	cmp	r4, #0
    1312:	d120      	bne.n	1356 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1314:	2480      	movs	r4, #128	; 0x80
    1316:	02a4      	lsls	r4, r4, #10
    1318:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    131a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    131c:	7854      	ldrb	r4, [r2, #1]
    131e:	3c01      	subs	r4, #1
    1320:	2c01      	cmp	r4, #1
    1322:	d91c      	bls.n	135e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1324:	040c      	lsls	r4, r1, #16
    1326:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1328:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    132a:	25a0      	movs	r5, #160	; 0xa0
    132c:	05ed      	lsls	r5, r5, #23
    132e:	432c      	orrs	r4, r5
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1330:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1332:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1334:	431d      	orrs	r5, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1336:	24d0      	movs	r4, #208	; 0xd0
    1338:	0624      	lsls	r4, r4, #24
    133a:	432c      	orrs	r4, r5
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    133c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    133e:	78d4      	ldrb	r4, [r2, #3]
    1340:	2c00      	cmp	r4, #0
    1342:	d122      	bne.n	138a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1344:	035b      	lsls	r3, r3, #13
    1346:	d51c      	bpl.n	1382 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1348:	7893      	ldrb	r3, [r2, #2]
    134a:	2b01      	cmp	r3, #1
    134c:	d01e      	beq.n	138c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    134e:	6141      	str	r1, [r0, #20]
    1350:	e017      	b.n	1382 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1352:	2300      	movs	r3, #0
    1354:	e7d7      	b.n	1306 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1356:	24c0      	movs	r4, #192	; 0xc0
    1358:	02e4      	lsls	r4, r4, #11
    135a:	4323      	orrs	r3, r4
    135c:	e7dd      	b.n	131a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    135e:	4c0d      	ldr	r4, [pc, #52]	; (1394 <_system_pinmux_config+0xa4>)
    1360:	4023      	ands	r3, r4
    1362:	e7df      	b.n	1324 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1364:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1366:	040c      	lsls	r4, r1, #16
    1368:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    136a:	23a0      	movs	r3, #160	; 0xa0
    136c:	05db      	lsls	r3, r3, #23
    136e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1370:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1372:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1374:	23d0      	movs	r3, #208	; 0xd0
    1376:	061b      	lsls	r3, r3, #24
    1378:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    137a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    137c:	78d3      	ldrb	r3, [r2, #3]
    137e:	2b00      	cmp	r3, #0
    1380:	d103      	bne.n	138a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1382:	7853      	ldrb	r3, [r2, #1]
    1384:	3b01      	subs	r3, #1
    1386:	2b01      	cmp	r3, #1
    1388:	d902      	bls.n	1390 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    138a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    138c:	6181      	str	r1, [r0, #24]
    138e:	e7f8      	b.n	1382 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1390:	6081      	str	r1, [r0, #8]
}
    1392:	e7fa      	b.n	138a <_system_pinmux_config+0x9a>
    1394:	fffbffff 	.word	0xfffbffff

00001398 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1398:	b510      	push	{r4, lr}
    139a:	0003      	movs	r3, r0
    139c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    139e:	b241      	sxtb	r1, r0
    13a0:	2900      	cmp	r1, #0
    13a2:	db0b      	blt.n	13bc <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    13a4:	0940      	lsrs	r0, r0, #5
    13a6:	01c0      	lsls	r0, r0, #7
    13a8:	4905      	ldr	r1, [pc, #20]	; (13c0 <system_pinmux_pin_set_config+0x28>)
    13aa:	468c      	mov	ip, r1
    13ac:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    13ae:	211f      	movs	r1, #31
    13b0:	400b      	ands	r3, r1
    13b2:	391e      	subs	r1, #30
    13b4:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    13b6:	f7ff ff9b 	bl	12f0 <_system_pinmux_config>
}
    13ba:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
    13bc:	2000      	movs	r0, #0
    13be:	e7f6      	b.n	13ae <system_pinmux_pin_set_config+0x16>
    13c0:	41004400 	.word	0x41004400

000013c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    13c4:	4770      	bx	lr

000013c6 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    13c6:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    13c8:	f7ff fe30 	bl	102c <system_clock_init>

	/* Initialize board hardware */
	system_board_init();
    13cc:	f7ff f84a 	bl	464 <system_board_init>

	/* Initialize EVSYS hardware */
	_system_events_init();
    13d0:	f7ff fff8 	bl	13c4 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    13d4:	f7ff f8ba 	bl	54c <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    13d8:	f7ff fff4 	bl	13c4 <_system_dummy_init>
}
    13dc:	bd10      	pop	{r4, pc}

000013de <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    13de:	1c93      	adds	r3, r2, #2
    13e0:	009b      	lsls	r3, r3, #2
    13e2:	50c1      	str	r1, [r0, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    13e4:	2a02      	cmp	r2, #2
    13e6:	d009      	beq.n	13fc <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    13e8:	2a03      	cmp	r2, #3
    13ea:	d00c      	beq.n	1406 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    13ec:	2301      	movs	r3, #1
    13ee:	4093      	lsls	r3, r2
    13f0:	001a      	movs	r2, r3
    13f2:	7e03      	ldrb	r3, [r0, #24]
    13f4:	4313      	orrs	r3, r2
    13f6:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    13f8:	2000      	movs	r0, #0
    13fa:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    13fc:	7e03      	ldrb	r3, [r0, #24]
    13fe:	2210      	movs	r2, #16
    1400:	4313      	orrs	r3, r2
    1402:	7603      	strb	r3, [r0, #24]
    1404:	e7f8      	b.n	13f8 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1406:	7e03      	ldrb	r3, [r0, #24]
    1408:	2220      	movs	r2, #32
    140a:	4313      	orrs	r3, r2
    140c:	7603      	strb	r3, [r0, #24]
    140e:	e7f3      	b.n	13f8 <tc_register_callback+0x1a>

00001410 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1410:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1412:	0080      	lsls	r0, r0, #2
    1414:	4b14      	ldr	r3, [pc, #80]	; (1468 <_tc_interrupt_handler+0x58>)
    1416:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1418:	6823      	ldr	r3, [r4, #0]
    141a:	7b9d      	ldrb	r5, [r3, #14]
    141c:	7e22      	ldrb	r2, [r4, #24]
    141e:	7e63      	ldrb	r3, [r4, #25]
    1420:	4013      	ands	r3, r2
    1422:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1424:	07eb      	lsls	r3, r5, #31
    1426:	d505      	bpl.n	1434 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1428:	0020      	movs	r0, r4
    142a:	68a3      	ldr	r3, [r4, #8]
    142c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    142e:	2301      	movs	r3, #1
    1430:	6822      	ldr	r2, [r4, #0]
    1432:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1434:	07ab      	lsls	r3, r5, #30
    1436:	d505      	bpl.n	1444 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1438:	0020      	movs	r0, r4
    143a:	68e3      	ldr	r3, [r4, #12]
    143c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    143e:	2302      	movs	r3, #2
    1440:	6822      	ldr	r2, [r4, #0]
    1442:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1444:	06eb      	lsls	r3, r5, #27
    1446:	d505      	bpl.n	1454 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1448:	0020      	movs	r0, r4
    144a:	6923      	ldr	r3, [r4, #16]
    144c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    144e:	2310      	movs	r3, #16
    1450:	6822      	ldr	r2, [r4, #0]
    1452:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1454:	06ab      	lsls	r3, r5, #26
    1456:	d505      	bpl.n	1464 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1458:	0020      	movs	r0, r4
    145a:	6963      	ldr	r3, [r4, #20]
    145c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    145e:	6823      	ldr	r3, [r4, #0]
    1460:	2220      	movs	r2, #32
    1462:	739a      	strb	r2, [r3, #14]
	}
}
    1464:	bd70      	pop	{r4, r5, r6, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	20000160 	.word	0x20000160

0000146c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    146c:	b510      	push	{r4, lr}
    146e:	2000      	movs	r0, #0
    1470:	f7ff ffce 	bl	1410 <_tc_interrupt_handler>
    1474:	bd10      	pop	{r4, pc}

00001476 <TC2_Handler>:
    1476:	b510      	push	{r4, lr}
    1478:	2001      	movs	r0, #1
    147a:	f7ff ffc9 	bl	1410 <_tc_interrupt_handler>
    147e:	bd10      	pop	{r4, pc}

00001480 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1480:	0003      	movs	r3, r0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1482:	4a06      	ldr	r2, [pc, #24]	; (149c <_tc_get_inst_index+0x1c>)
    1484:	4290      	cmp	r0, r2
    1486:	d006      	beq.n	1496 <_tc_get_inst_index+0x16>
    1488:	4a05      	ldr	r2, [pc, #20]	; (14a0 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    148a:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
    148c:	4293      	cmp	r3, r2
    148e:	d000      	beq.n	1492 <_tc_get_inst_index+0x12>
}
    1490:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1492:	3001      	adds	r0, #1
    1494:	e000      	b.n	1498 <_tc_get_inst_index+0x18>
    1496:	2000      	movs	r0, #0
			return i;
    1498:	b2c0      	uxtb	r0, r0
    149a:	e7f9      	b.n	1490 <_tc_get_inst_index+0x10>
    149c:	42001800 	.word	0x42001800
    14a0:	42001c00 	.word	0x42001c00

000014a4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a6:	46c6      	mov	lr, r8
    14a8:	b500      	push	{lr}
    14aa:	b084      	sub	sp, #16
    14ac:	0004      	movs	r4, r0
    14ae:	000e      	movs	r6, r1
    14b0:	0015      	movs	r5, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    14b2:	0008      	movs	r0, r1
    14b4:	f7ff ffe4 	bl	1480 <_tc_get_inst_index>
    14b8:	4680      	mov	r8, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    14ba:	ab03      	add	r3, sp, #12
    14bc:	4a86      	ldr	r2, [pc, #536]	; (16d8 <tc_init+0x234>)
    14be:	801a      	strh	r2, [r3, #0]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    14c0:	ab02      	add	r3, sp, #8
    14c2:	2240      	movs	r2, #64	; 0x40
    14c4:	801a      	strh	r2, [r3, #0]
    14c6:	3240      	adds	r2, #64	; 0x40
    14c8:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    14ca:	2300      	movs	r3, #0
    14cc:	60a3      	str	r3, [r4, #8]
    14ce:	60e3      	str	r3, [r4, #12]
    14d0:	6123      	str	r3, [r4, #16]
    14d2:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    14d4:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    14d6:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    14d8:	0082      	lsls	r2, r0, #2
    14da:	4b80      	ldr	r3, [pc, #512]	; (16dc <tc_init+0x238>)
    14dc:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    14de:	6026      	str	r6, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    14e0:	78ab      	ldrb	r3, [r5, #2]
    14e2:	2b08      	cmp	r3, #8
    14e4:	d100      	bne.n	14e8 <tc_init+0x44>
    14e6:	e081      	b.n	15ec <tc_init+0x148>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    14e8:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    14ea:	8833      	ldrh	r3, [r6, #0]
    14ec:	07db      	lsls	r3, r3, #31
    14ee:	d500      	bpl.n	14f2 <tc_init+0x4e>
    14f0:	e0ec      	b.n	16cc <tc_init+0x228>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    14f2:	7bf2      	ldrb	r2, [r6, #15]
    14f4:	2310      	movs	r3, #16
    14f6:	0017      	movs	r7, r2
    14f8:	401f      	ands	r7, r3
    14fa:	421a      	tst	r2, r3
    14fc:	d000      	beq.n	1500 <tc_init+0x5c>
    14fe:	e0e7      	b.n	16d0 <tc_init+0x22c>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1500:	8833      	ldrh	r3, [r6, #0]
    1502:	079b      	lsls	r3, r3, #30
    1504:	d500      	bpl.n	1508 <tc_init+0x64>
    1506:	e0e5      	b.n	16d4 <tc_init+0x230>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1508:	7c2b      	ldrb	r3, [r5, #16]
    150a:	2b00      	cmp	r3, #0
    150c:	d000      	beq.n	1510 <tc_init+0x6c>
    150e:	e073      	b.n	15f8 <tc_init+0x154>
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1510:	7f2b      	ldrb	r3, [r5, #28]
    1512:	2b00      	cmp	r3, #0
    1514:	d000      	beq.n	1518 <tc_init+0x74>
    1516:	e07b      	b.n	1610 <tc_init+0x16c>
			PM->APBCMASK.reg |= mask;
    1518:	4971      	ldr	r1, [pc, #452]	; (16e0 <tc_init+0x23c>)
    151a:	6a08      	ldr	r0, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    151c:	4643      	mov	r3, r8
    151e:	005a      	lsls	r2, r3, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1520:	ab02      	add	r3, sp, #8
    1522:	5ad3      	ldrh	r3, [r2, r3]
    1524:	4303      	orrs	r3, r0
    1526:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1528:	78ab      	ldrb	r3, [r5, #2]
    152a:	2b08      	cmp	r3, #8
    152c:	d100      	bne.n	1530 <tc_init+0x8c>
    152e:	e07c      	b.n	162a <tc_init+0x186>
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1530:	782b      	ldrb	r3, [r5, #0]
    1532:	466a      	mov	r2, sp
    1534:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1536:	ab03      	add	r3, sp, #12
    1538:	4642      	mov	r2, r8
    153a:	5c9b      	ldrb	r3, [r3, r2]
    153c:	4698      	mov	r8, r3
    153e:	4669      	mov	r1, sp
    1540:	0018      	movs	r0, r3
    1542:	f7ff feb5 	bl	12b0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1546:	4640      	mov	r0, r8
    1548:	f7ff fe74 	bl	1234 <system_gclk_chan_enable>

	/* Set ctrla register */
	ctrla_tmp =
    154c:	8929      	ldrh	r1, [r5, #8]
    154e:	88ab      	ldrh	r3, [r5, #4]
    1550:	430b      	orrs	r3, r1
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    1552:	78a9      	ldrb	r1, [r5, #2]
    1554:	79aa      	ldrb	r2, [r5, #6]
    1556:	4311      	orrs	r1, r2
	ctrla_tmp =
    1558:	4319      	orrs	r1, r3
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    155a:	786b      	ldrb	r3, [r5, #1]
    155c:	2b00      	cmp	r3, #0
    155e:	d002      	beq.n	1566 <tc_init+0xc2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1560:	2380      	movs	r3, #128	; 0x80
    1562:	011b      	lsls	r3, r3, #4
    1564:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1566:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1568:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    156a:	b25b      	sxtb	r3, r3
    156c:	2b00      	cmp	r3, #0
    156e:	dbfb      	blt.n	1568 <tc_init+0xc4>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1570:	8031      	strh	r1, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1572:	7b6b      	ldrb	r3, [r5, #13]
	uint8_t ctrlbset_tmp = 0;
    1574:	0039      	movs	r1, r7
	if (config->oneshot) {
    1576:	2b00      	cmp	r3, #0
    1578:	d000      	beq.n	157c <tc_init+0xd8>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    157a:	2104      	movs	r1, #4
	}

	if (config->count_direction) {
    157c:	7bab      	ldrb	r3, [r5, #14]
    157e:	2b00      	cmp	r3, #0
    1580:	d002      	beq.n	1588 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1582:	2301      	movs	r3, #1
    1584:	4319      	orrs	r1, r3
    1586:	b2c9      	uxtb	r1, r1
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1588:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    158a:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    158c:	b25b      	sxtb	r3, r3
    158e:	2b00      	cmp	r3, #0
    1590:	dbfb      	blt.n	158a <tc_init+0xe6>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1592:	23ff      	movs	r3, #255	; 0xff
    1594:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1596:	2900      	cmp	r1, #0
    1598:	d005      	beq.n	15a6 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    159a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    159c:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    159e:	b25b      	sxtb	r3, r3
    15a0:	2b00      	cmp	r3, #0
    15a2:	dbfb      	blt.n	159c <tc_init+0xf8>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    15a4:	7171      	strb	r1, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    15a6:	7aa9      	ldrb	r1, [r5, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    15a8:	7aeb      	ldrb	r3, [r5, #11]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d001      	beq.n	15b2 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    15ae:	2310      	movs	r3, #16
    15b0:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    15b2:	7b2b      	ldrb	r3, [r5, #12]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d001      	beq.n	15bc <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    15b8:	2320      	movs	r3, #32
    15ba:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15be:	7bd3      	ldrb	r3, [r2, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    15c0:	b25b      	sxtb	r3, r3
    15c2:	2b00      	cmp	r3, #0
    15c4:	dbfb      	blt.n	15be <tc_init+0x11a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    15c6:	71b1      	strb	r1, [r6, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15c8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15ca:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    15cc:	b25b      	sxtb	r3, r3
    15ce:	2b00      	cmp	r3, #0
    15d0:	dbfb      	blt.n	15ca <tc_init+0x126>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    15d2:	7921      	ldrb	r1, [r4, #4]
    15d4:	2904      	cmp	r1, #4
    15d6:	d02e      	beq.n	1636 <tc_init+0x192>
    15d8:	2908      	cmp	r1, #8
    15da:	d062      	beq.n	16a2 <tc_init+0x1fe>
    15dc:	2900      	cmp	r1, #0
    15de:	d04a      	beq.n	1676 <tc_init+0x1d2>
    15e0:	2717      	movs	r7, #23
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    15e2:	0038      	movs	r0, r7
    15e4:	b004      	add	sp, #16
    15e6:	bc80      	pop	{r7}
    15e8:	46b8      	mov	r8, r7
    15ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    15ec:	0002      	movs	r2, r0
    15ee:	07d2      	lsls	r2, r2, #31
    15f0:	d400      	bmi.n	15f4 <tc_init+0x150>
    15f2:	e779      	b.n	14e8 <tc_init+0x44>
		return STATUS_ERR_INVALID_ARG;
    15f4:	2717      	movs	r7, #23
    15f6:	e7f4      	b.n	15e2 <tc_init+0x13e>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    15f8:	a901      	add	r1, sp, #4
    15fa:	2301      	movs	r3, #1
    15fc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    15fe:	2200      	movs	r2, #0
    1600:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1602:	69aa      	ldr	r2, [r5, #24]
    1604:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1606:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1608:	7d28      	ldrb	r0, [r5, #20]
    160a:	f7ff fec5 	bl	1398 <system_pinmux_pin_set_config>
    160e:	e77f      	b.n	1510 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1610:	a901      	add	r1, sp, #4
    1612:	2301      	movs	r3, #1
    1614:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1616:	2200      	movs	r2, #0
    1618:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    161a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    161c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    161e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1620:	6a2b      	ldr	r3, [r5, #32]
    1622:	b2d8      	uxtb	r0, r3
    1624:	f7ff feb8 	bl	1398 <system_pinmux_pin_set_config>
    1628:	e776      	b.n	1518 <tc_init+0x74>
    162a:	000a      	movs	r2, r1
    162c:	6a0b      	ldr	r3, [r1, #32]
    162e:	2180      	movs	r1, #128	; 0x80
    1630:	430b      	orrs	r3, r1
    1632:	6213      	str	r3, [r2, #32]
			break;
    1634:	e77c      	b.n	1530 <tc_init+0x8c>
    1636:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1638:	b25b      	sxtb	r3, r3
    163a:	2b00      	cmp	r3, #0
    163c:	dbfb      	blt.n	1636 <tc_init+0x192>
					config->counter_8_bit.value;
    163e:	2328      	movs	r3, #40	; 0x28
    1640:	5ceb      	ldrb	r3, [r5, r3]
			hw->COUNT8.COUNT.reg =
    1642:	7433      	strb	r3, [r6, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1644:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1646:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1648:	b25b      	sxtb	r3, r3
    164a:	2b00      	cmp	r3, #0
    164c:	dbfb      	blt.n	1646 <tc_init+0x1a2>
					config->counter_8_bit.period;
    164e:	2329      	movs	r3, #41	; 0x29
    1650:	5ceb      	ldrb	r3, [r5, r3]
			hw->COUNT8.PER.reg =
    1652:	7533      	strb	r3, [r6, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1654:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1656:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1658:	b25b      	sxtb	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	dbfb      	blt.n	1656 <tc_init+0x1b2>
					config->counter_8_bit.compare_capture_channel[0];
    165e:	232a      	movs	r3, #42	; 0x2a
    1660:	5ceb      	ldrb	r3, [r5, r3]
			hw->COUNT8.CC[0].reg =
    1662:	7633      	strb	r3, [r6, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1664:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1666:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1668:	b25b      	sxtb	r3, r3
    166a:	2b00      	cmp	r3, #0
    166c:	dbfb      	blt.n	1666 <tc_init+0x1c2>
					config->counter_8_bit.compare_capture_channel[1];
    166e:	232b      	movs	r3, #43	; 0x2b
    1670:	5ceb      	ldrb	r3, [r5, r3]
			hw->COUNT8.CC[1].reg =
    1672:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    1674:	e7b5      	b.n	15e2 <tc_init+0x13e>
    1676:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1678:	b25b      	sxtb	r3, r3
    167a:	2b00      	cmp	r3, #0
    167c:	dbfb      	blt.n	1676 <tc_init+0x1d2>
				= config->counter_16_bit.value;
    167e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    1680:	8233      	strh	r3, [r6, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1682:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1684:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1686:	b25b      	sxtb	r3, r3
    1688:	2b00      	cmp	r3, #0
    168a:	dbfb      	blt.n	1684 <tc_init+0x1e0>
					config->counter_16_bit.compare_capture_channel[0];
    168c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    168e:	8333      	strh	r3, [r6, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1690:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1692:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1694:	b25b      	sxtb	r3, r3
    1696:	2b00      	cmp	r3, #0
    1698:	dbfb      	blt.n	1692 <tc_init+0x1ee>
					config->counter_16_bit.compare_capture_channel[1];
    169a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    169c:	8373      	strh	r3, [r6, #26]
			return STATUS_OK;
    169e:	000f      	movs	r7, r1
    16a0:	e79f      	b.n	15e2 <tc_init+0x13e>
    16a2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    16a4:	b25b      	sxtb	r3, r3
    16a6:	2b00      	cmp	r3, #0
    16a8:	dbfb      	blt.n	16a2 <tc_init+0x1fe>
				= config->counter_32_bit.value;
    16aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    16ac:	6133      	str	r3, [r6, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16b0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    16b2:	b25b      	sxtb	r3, r3
    16b4:	2b00      	cmp	r3, #0
    16b6:	dbfb      	blt.n	16b0 <tc_init+0x20c>
			hw->COUNT32.CC[0].reg =
    16b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    16ba:	61b3      	str	r3, [r6, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    16c0:	b25b      	sxtb	r3, r3
    16c2:	2b00      	cmp	r3, #0
    16c4:	dbfb      	blt.n	16be <tc_init+0x21a>
					config->counter_32_bit.compare_capture_channel[1];
    16c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    16c8:	61f3      	str	r3, [r6, #28]
			return STATUS_OK;
    16ca:	e78a      	b.n	15e2 <tc_init+0x13e>
		return STATUS_BUSY;
    16cc:	2705      	movs	r7, #5
    16ce:	e788      	b.n	15e2 <tc_init+0x13e>
		return STATUS_ERR_DENIED;
    16d0:	271c      	movs	r7, #28
    16d2:	e786      	b.n	15e2 <tc_init+0x13e>
		return STATUS_ERR_DENIED;
    16d4:	271c      	movs	r7, #28
    16d6:	e784      	b.n	15e2 <tc_init+0x13e>
    16d8:	00001212 	.word	0x00001212
    16dc:	20000160 	.word	0x20000160
    16e0:	40000400 	.word	0x40000400

000016e4 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    16e4:	6802      	ldr	r2, [r0, #0]
    16e6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    16e8:	b25b      	sxtb	r3, r3
    16ea:	2b00      	cmp	r3, #0
    16ec:	dbfb      	blt.n	16e6 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    16ee:	7900      	ldrb	r0, [r0, #4]
    16f0:	2804      	cmp	r0, #4
    16f2:	d005      	beq.n	1700 <tc_set_count_value+0x1c>
    16f4:	2808      	cmp	r0, #8
    16f6:	d00a      	beq.n	170e <tc_set_count_value+0x2a>
    16f8:	2800      	cmp	r0, #0
    16fa:	d005      	beq.n	1708 <tc_set_count_value+0x24>
    16fc:	2017      	movs	r0, #23
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
	}
}
    16fe:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1700:	b2c9      	uxtb	r1, r1
    1702:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    1704:	2000      	movs	r0, #0
    1706:	e7fa      	b.n	16fe <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1708:	b289      	uxth	r1, r1
    170a:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    170c:	e7f7      	b.n	16fe <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    170e:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    1710:	2000      	movs	r0, #0
    1712:	e7f4      	b.n	16fe <tc_set_count_value+0x1a>

00001714 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    1714:	e7fe      	b.n	1714 <Dummy_Handler>
	...

00001718 <Reset_Handler>:
{
    1718:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    171a:	4a27      	ldr	r2, [pc, #156]	; (17b8 <Reset_Handler+0xa0>)
    171c:	4b27      	ldr	r3, [pc, #156]	; (17bc <Reset_Handler+0xa4>)
    171e:	429a      	cmp	r2, r3
    1720:	d012      	beq.n	1748 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1722:	001a      	movs	r2, r3
    1724:	4b26      	ldr	r3, [pc, #152]	; (17c0 <Reset_Handler+0xa8>)
    1726:	429a      	cmp	r2, r3
    1728:	d20e      	bcs.n	1748 <Reset_Handler+0x30>
    172a:	001a      	movs	r2, r3
    172c:	3a01      	subs	r2, #1
    172e:	4b23      	ldr	r3, [pc, #140]	; (17bc <Reset_Handler+0xa4>)
    1730:	1ad2      	subs	r2, r2, r3
    1732:	0892      	lsrs	r2, r2, #2
    1734:	3201      	adds	r2, #1
    1736:	0092      	lsls	r2, r2, #2
    1738:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    173a:	4820      	ldr	r0, [pc, #128]	; (17bc <Reset_Handler+0xa4>)
    173c:	491e      	ldr	r1, [pc, #120]	; (17b8 <Reset_Handler+0xa0>)
    173e:	58cc      	ldr	r4, [r1, r3]
    1740:	50c4      	str	r4, [r0, r3]
                for (; pDest < &_erelocate;) {
    1742:	3304      	adds	r3, #4
    1744:	4293      	cmp	r3, r2
    1746:	d1fa      	bne.n	173e <Reset_Handler+0x26>
        for (pDest = &_szero; pDest < &_ezero;) {
    1748:	4a1e      	ldr	r2, [pc, #120]	; (17c4 <Reset_Handler+0xac>)
    174a:	4b1f      	ldr	r3, [pc, #124]	; (17c8 <Reset_Handler+0xb0>)
    174c:	429a      	cmp	r2, r3
    174e:	d20b      	bcs.n	1768 <Reset_Handler+0x50>
    1750:	0013      	movs	r3, r2
    1752:	4a1d      	ldr	r2, [pc, #116]	; (17c8 <Reset_Handler+0xb0>)
    1754:	3a01      	subs	r2, #1
    1756:	1ad2      	subs	r2, r2, r3
    1758:	2103      	movs	r1, #3
    175a:	438a      	bics	r2, r1
    175c:	1d19      	adds	r1, r3, #4
    175e:	1852      	adds	r2, r2, r1
                *pDest++ = 0;
    1760:	2100      	movs	r1, #0
    1762:	c302      	stmia	r3!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1764:	4293      	cmp	r3, r2
    1766:	d1fc      	bne.n	1762 <Reset_Handler+0x4a>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1768:	4b18      	ldr	r3, [pc, #96]	; (17cc <Reset_Handler+0xb4>)
    176a:	22ff      	movs	r2, #255	; 0xff
    176c:	4393      	bics	r3, r2
    176e:	4a18      	ldr	r2, [pc, #96]	; (17d0 <Reset_Handler+0xb8>)
    1770:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1772:	4a18      	ldr	r2, [pc, #96]	; (17d4 <Reset_Handler+0xbc>)
    1774:	2390      	movs	r3, #144	; 0x90
    1776:	005b      	lsls	r3, r3, #1
    1778:	2102      	movs	r1, #2
    177a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    177c:	4b16      	ldr	r3, [pc, #88]	; (17d8 <Reset_Handler+0xc0>)
    177e:	7b9a      	ldrb	r2, [r3, #14]
    1780:	312e      	adds	r1, #46	; 0x2e
    1782:	438a      	bics	r2, r1
    1784:	2120      	movs	r1, #32
    1786:	430a      	orrs	r2, r1
    1788:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    178a:	7b9a      	ldrb	r2, [r3, #14]
    178c:	210c      	movs	r1, #12
    178e:	438a      	bics	r2, r1
    1790:	2108      	movs	r1, #8
    1792:	430a      	orrs	r2, r1
    1794:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1796:	7b9a      	ldrb	r2, [r3, #14]
    1798:	2103      	movs	r1, #3
    179a:	438a      	bics	r2, r1
    179c:	2102      	movs	r1, #2
    179e:	430a      	orrs	r2, r1
    17a0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    17a2:	4a0e      	ldr	r2, [pc, #56]	; (17dc <Reset_Handler+0xc4>)
    17a4:	6853      	ldr	r3, [r2, #4]
    17a6:	2180      	movs	r1, #128	; 0x80
    17a8:	430b      	orrs	r3, r1
    17aa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    17ac:	f000 f93a 	bl	1a24 <__libc_init_array>
        main();
    17b0:	f7fe fd4a 	bl	248 <main>
        while (1);
    17b4:	e7fe      	b.n	17b4 <Reset_Handler+0x9c>
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	00002e5c 	.word	0x00002e5c
    17bc:	20000000 	.word	0x20000000
    17c0:	20000070 	.word	0x20000070
    17c4:	20000070 	.word	0x20000070
    17c8:	20000188 	.word	0x20000188
    17cc:	00000000 	.word	0x00000000
    17d0:	e000ed00 	.word	0xe000ed00
    17d4:	41007000 	.word	0x41007000
    17d8:	41004800 	.word	0x41004800
    17dc:	41004000 	.word	0x41004000

000017e0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    17e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e2:	46c6      	mov	lr, r8
    17e4:	b500      	push	{lr}
    17e6:	000c      	movs	r4, r1
    17e8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    17ea:	2800      	cmp	r0, #0
    17ec:	d10f      	bne.n	180e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    17ee:	2a00      	cmp	r2, #0
    17f0:	dd11      	ble.n	1816 <_read+0x36>
    17f2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    17f4:	4e09      	ldr	r6, [pc, #36]	; (181c <_read+0x3c>)
    17f6:	4d0a      	ldr	r5, [pc, #40]	; (1820 <_read+0x40>)
    17f8:	6830      	ldr	r0, [r6, #0]
    17fa:	0021      	movs	r1, r4
    17fc:	682b      	ldr	r3, [r5, #0]
    17fe:	4798      	blx	r3
		ptr++;
    1800:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1802:	42bc      	cmp	r4, r7
    1804:	d1f8      	bne.n	17f8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1806:	4640      	mov	r0, r8
    1808:	bc80      	pop	{r7}
    180a:	46b8      	mov	r8, r7
    180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    180e:	2301      	movs	r3, #1
    1810:	425b      	negs	r3, r3
    1812:	4698      	mov	r8, r3
    1814:	e7f7      	b.n	1806 <_read+0x26>
	int nChars = 0;
    1816:	4680      	mov	r8, r0
    1818:	e7f5      	b.n	1806 <_read+0x26>
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	20000170 	.word	0x20000170
    1820:	20000168 	.word	0x20000168

00001824 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1824:	b5f0      	push	{r4, r5, r6, r7, lr}
    1826:	46c6      	mov	lr, r8
    1828:	b500      	push	{lr}
    182a:	000e      	movs	r6, r1
    182c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    182e:	3801      	subs	r0, #1
    1830:	2802      	cmp	r0, #2
    1832:	d810      	bhi.n	1856 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1834:	2a00      	cmp	r2, #0
    1836:	d011      	beq.n	185c <_write+0x38>
	int nChars = 0;
    1838:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    183a:	4b0c      	ldr	r3, [pc, #48]	; (186c <_write+0x48>)
    183c:	4698      	mov	r8, r3
    183e:	4f0c      	ldr	r7, [pc, #48]	; (1870 <_write+0x4c>)
    1840:	4643      	mov	r3, r8
    1842:	6818      	ldr	r0, [r3, #0]
    1844:	5d31      	ldrb	r1, [r6, r4]
    1846:	683b      	ldr	r3, [r7, #0]
    1848:	4798      	blx	r3
    184a:	2800      	cmp	r0, #0
    184c:	db08      	blt.n	1860 <_write+0x3c>
			return -1;
		}
		++nChars;
    184e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1850:	42a5      	cmp	r5, r4
    1852:	d1f5      	bne.n	1840 <_write+0x1c>
    1854:	e006      	b.n	1864 <_write+0x40>
		return -1;
    1856:	2401      	movs	r4, #1
    1858:	4264      	negs	r4, r4
    185a:	e003      	b.n	1864 <_write+0x40>
	int nChars = 0;
    185c:	0014      	movs	r4, r2
    185e:	e001      	b.n	1864 <_write+0x40>
			return -1;
    1860:	2401      	movs	r4, #1
    1862:	4264      	negs	r4, r4
	}
	return nChars;
}
    1864:	0020      	movs	r0, r4
    1866:	bc80      	pop	{r7}
    1868:	46b8      	mov	r8, r7
    186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    186c:	20000170 	.word	0x20000170
    1870:	2000016c 	.word	0x2000016c

00001874 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1874:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1876:	4a06      	ldr	r2, [pc, #24]	; (1890 <_sbrk+0x1c>)
    1878:	6812      	ldr	r2, [r2, #0]
    187a:	2a00      	cmp	r2, #0
    187c:	d004      	beq.n	1888 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    187e:	4a04      	ldr	r2, [pc, #16]	; (1890 <_sbrk+0x1c>)
    1880:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1882:	18c3      	adds	r3, r0, r3
    1884:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1886:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1888:	4a01      	ldr	r2, [pc, #4]	; (1890 <_sbrk+0x1c>)
    188a:	4902      	ldr	r1, [pc, #8]	; (1894 <_sbrk+0x20>)
    188c:	6011      	str	r1, [r2, #0]
    188e:	e7f6      	b.n	187e <_sbrk+0xa>
    1890:	20000174 	.word	0x20000174
    1894:	20000588 	.word	0x20000588

00001898 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1898:	2001      	movs	r0, #1
}
    189a:	4240      	negs	r0, r0
    189c:	4770      	bx	lr

0000189e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    189e:	2380      	movs	r3, #128	; 0x80
    18a0:	019b      	lsls	r3, r3, #6
    18a2:	604b      	str	r3, [r1, #4]

	return 0;
}
    18a4:	2000      	movs	r0, #0
    18a6:	4770      	bx	lr

000018a8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    18a8:	2001      	movs	r0, #1
    18aa:	4770      	bx	lr

000018ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    18ac:	2000      	movs	r0, #0
    18ae:	4770      	bx	lr

000018b0 <__udivsi3>:
    18b0:	2200      	movs	r2, #0
    18b2:	0843      	lsrs	r3, r0, #1
    18b4:	428b      	cmp	r3, r1
    18b6:	d374      	bcc.n	19a2 <__udivsi3+0xf2>
    18b8:	0903      	lsrs	r3, r0, #4
    18ba:	428b      	cmp	r3, r1
    18bc:	d35f      	bcc.n	197e <__udivsi3+0xce>
    18be:	0a03      	lsrs	r3, r0, #8
    18c0:	428b      	cmp	r3, r1
    18c2:	d344      	bcc.n	194e <__udivsi3+0x9e>
    18c4:	0b03      	lsrs	r3, r0, #12
    18c6:	428b      	cmp	r3, r1
    18c8:	d328      	bcc.n	191c <__udivsi3+0x6c>
    18ca:	0c03      	lsrs	r3, r0, #16
    18cc:	428b      	cmp	r3, r1
    18ce:	d30d      	bcc.n	18ec <__udivsi3+0x3c>
    18d0:	22ff      	movs	r2, #255	; 0xff
    18d2:	0209      	lsls	r1, r1, #8
    18d4:	ba12      	rev	r2, r2
    18d6:	0c03      	lsrs	r3, r0, #16
    18d8:	428b      	cmp	r3, r1
    18da:	d302      	bcc.n	18e2 <__udivsi3+0x32>
    18dc:	1212      	asrs	r2, r2, #8
    18de:	0209      	lsls	r1, r1, #8
    18e0:	d065      	beq.n	19ae <__udivsi3+0xfe>
    18e2:	0b03      	lsrs	r3, r0, #12
    18e4:	428b      	cmp	r3, r1
    18e6:	d319      	bcc.n	191c <__udivsi3+0x6c>
    18e8:	e000      	b.n	18ec <__udivsi3+0x3c>
    18ea:	0a09      	lsrs	r1, r1, #8
    18ec:	0bc3      	lsrs	r3, r0, #15
    18ee:	428b      	cmp	r3, r1
    18f0:	d301      	bcc.n	18f6 <__udivsi3+0x46>
    18f2:	03cb      	lsls	r3, r1, #15
    18f4:	1ac0      	subs	r0, r0, r3
    18f6:	4152      	adcs	r2, r2
    18f8:	0b83      	lsrs	r3, r0, #14
    18fa:	428b      	cmp	r3, r1
    18fc:	d301      	bcc.n	1902 <__udivsi3+0x52>
    18fe:	038b      	lsls	r3, r1, #14
    1900:	1ac0      	subs	r0, r0, r3
    1902:	4152      	adcs	r2, r2
    1904:	0b43      	lsrs	r3, r0, #13
    1906:	428b      	cmp	r3, r1
    1908:	d301      	bcc.n	190e <__udivsi3+0x5e>
    190a:	034b      	lsls	r3, r1, #13
    190c:	1ac0      	subs	r0, r0, r3
    190e:	4152      	adcs	r2, r2
    1910:	0b03      	lsrs	r3, r0, #12
    1912:	428b      	cmp	r3, r1
    1914:	d301      	bcc.n	191a <__udivsi3+0x6a>
    1916:	030b      	lsls	r3, r1, #12
    1918:	1ac0      	subs	r0, r0, r3
    191a:	4152      	adcs	r2, r2
    191c:	0ac3      	lsrs	r3, r0, #11
    191e:	428b      	cmp	r3, r1
    1920:	d301      	bcc.n	1926 <__udivsi3+0x76>
    1922:	02cb      	lsls	r3, r1, #11
    1924:	1ac0      	subs	r0, r0, r3
    1926:	4152      	adcs	r2, r2
    1928:	0a83      	lsrs	r3, r0, #10
    192a:	428b      	cmp	r3, r1
    192c:	d301      	bcc.n	1932 <__udivsi3+0x82>
    192e:	028b      	lsls	r3, r1, #10
    1930:	1ac0      	subs	r0, r0, r3
    1932:	4152      	adcs	r2, r2
    1934:	0a43      	lsrs	r3, r0, #9
    1936:	428b      	cmp	r3, r1
    1938:	d301      	bcc.n	193e <__udivsi3+0x8e>
    193a:	024b      	lsls	r3, r1, #9
    193c:	1ac0      	subs	r0, r0, r3
    193e:	4152      	adcs	r2, r2
    1940:	0a03      	lsrs	r3, r0, #8
    1942:	428b      	cmp	r3, r1
    1944:	d301      	bcc.n	194a <__udivsi3+0x9a>
    1946:	020b      	lsls	r3, r1, #8
    1948:	1ac0      	subs	r0, r0, r3
    194a:	4152      	adcs	r2, r2
    194c:	d2cd      	bcs.n	18ea <__udivsi3+0x3a>
    194e:	09c3      	lsrs	r3, r0, #7
    1950:	428b      	cmp	r3, r1
    1952:	d301      	bcc.n	1958 <__udivsi3+0xa8>
    1954:	01cb      	lsls	r3, r1, #7
    1956:	1ac0      	subs	r0, r0, r3
    1958:	4152      	adcs	r2, r2
    195a:	0983      	lsrs	r3, r0, #6
    195c:	428b      	cmp	r3, r1
    195e:	d301      	bcc.n	1964 <__udivsi3+0xb4>
    1960:	018b      	lsls	r3, r1, #6
    1962:	1ac0      	subs	r0, r0, r3
    1964:	4152      	adcs	r2, r2
    1966:	0943      	lsrs	r3, r0, #5
    1968:	428b      	cmp	r3, r1
    196a:	d301      	bcc.n	1970 <__udivsi3+0xc0>
    196c:	014b      	lsls	r3, r1, #5
    196e:	1ac0      	subs	r0, r0, r3
    1970:	4152      	adcs	r2, r2
    1972:	0903      	lsrs	r3, r0, #4
    1974:	428b      	cmp	r3, r1
    1976:	d301      	bcc.n	197c <__udivsi3+0xcc>
    1978:	010b      	lsls	r3, r1, #4
    197a:	1ac0      	subs	r0, r0, r3
    197c:	4152      	adcs	r2, r2
    197e:	08c3      	lsrs	r3, r0, #3
    1980:	428b      	cmp	r3, r1
    1982:	d301      	bcc.n	1988 <__udivsi3+0xd8>
    1984:	00cb      	lsls	r3, r1, #3
    1986:	1ac0      	subs	r0, r0, r3
    1988:	4152      	adcs	r2, r2
    198a:	0883      	lsrs	r3, r0, #2
    198c:	428b      	cmp	r3, r1
    198e:	d301      	bcc.n	1994 <__udivsi3+0xe4>
    1990:	008b      	lsls	r3, r1, #2
    1992:	1ac0      	subs	r0, r0, r3
    1994:	4152      	adcs	r2, r2
    1996:	0843      	lsrs	r3, r0, #1
    1998:	428b      	cmp	r3, r1
    199a:	d301      	bcc.n	19a0 <__udivsi3+0xf0>
    199c:	004b      	lsls	r3, r1, #1
    199e:	1ac0      	subs	r0, r0, r3
    19a0:	4152      	adcs	r2, r2
    19a2:	1a41      	subs	r1, r0, r1
    19a4:	d200      	bcs.n	19a8 <__udivsi3+0xf8>
    19a6:	4601      	mov	r1, r0
    19a8:	4152      	adcs	r2, r2
    19aa:	4610      	mov	r0, r2
    19ac:	4770      	bx	lr
    19ae:	e7ff      	b.n	19b0 <__udivsi3+0x100>
    19b0:	b501      	push	{r0, lr}
    19b2:	2000      	movs	r0, #0
    19b4:	f000 f806 	bl	19c4 <__aeabi_idiv0>
    19b8:	bd02      	pop	{r1, pc}
    19ba:	46c0      	nop			; (mov r8, r8)

000019bc <__aeabi_uidivmod>:
    19bc:	2900      	cmp	r1, #0
    19be:	d0f7      	beq.n	19b0 <__udivsi3+0x100>
    19c0:	e776      	b.n	18b0 <__udivsi3>
    19c2:	4770      	bx	lr

000019c4 <__aeabi_idiv0>:
    19c4:	4770      	bx	lr
    19c6:	46c0      	nop			; (mov r8, r8)

000019c8 <__aeabi_lmul>:
    19c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ca:	46ce      	mov	lr, r9
    19cc:	4647      	mov	r7, r8
    19ce:	b580      	push	{r7, lr}
    19d0:	0007      	movs	r7, r0
    19d2:	4699      	mov	r9, r3
    19d4:	0c3b      	lsrs	r3, r7, #16
    19d6:	469c      	mov	ip, r3
    19d8:	0413      	lsls	r3, r2, #16
    19da:	0c1b      	lsrs	r3, r3, #16
    19dc:	001d      	movs	r5, r3
    19de:	000e      	movs	r6, r1
    19e0:	4661      	mov	r1, ip
    19e2:	0400      	lsls	r0, r0, #16
    19e4:	0c14      	lsrs	r4, r2, #16
    19e6:	0c00      	lsrs	r0, r0, #16
    19e8:	4345      	muls	r5, r0
    19ea:	434b      	muls	r3, r1
    19ec:	4360      	muls	r0, r4
    19ee:	4361      	muls	r1, r4
    19f0:	18c0      	adds	r0, r0, r3
    19f2:	0c2c      	lsrs	r4, r5, #16
    19f4:	1820      	adds	r0, r4, r0
    19f6:	468c      	mov	ip, r1
    19f8:	4283      	cmp	r3, r0
    19fa:	d903      	bls.n	1a04 <__aeabi_lmul+0x3c>
    19fc:	2380      	movs	r3, #128	; 0x80
    19fe:	025b      	lsls	r3, r3, #9
    1a00:	4698      	mov	r8, r3
    1a02:	44c4      	add	ip, r8
    1a04:	4649      	mov	r1, r9
    1a06:	4379      	muls	r1, r7
    1a08:	4372      	muls	r2, r6
    1a0a:	0c03      	lsrs	r3, r0, #16
    1a0c:	4463      	add	r3, ip
    1a0e:	042d      	lsls	r5, r5, #16
    1a10:	0c2d      	lsrs	r5, r5, #16
    1a12:	18c9      	adds	r1, r1, r3
    1a14:	0400      	lsls	r0, r0, #16
    1a16:	1940      	adds	r0, r0, r5
    1a18:	1889      	adds	r1, r1, r2
    1a1a:	bcc0      	pop	{r6, r7}
    1a1c:	46b9      	mov	r9, r7
    1a1e:	46b0      	mov	r8, r6
    1a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a22:	46c0      	nop			; (mov r8, r8)

00001a24 <__libc_init_array>:
    1a24:	b570      	push	{r4, r5, r6, lr}
    1a26:	2600      	movs	r6, #0
    1a28:	4d0c      	ldr	r5, [pc, #48]	; (1a5c <__libc_init_array+0x38>)
    1a2a:	4c0d      	ldr	r4, [pc, #52]	; (1a60 <__libc_init_array+0x3c>)
    1a2c:	1b64      	subs	r4, r4, r5
    1a2e:	10a4      	asrs	r4, r4, #2
    1a30:	42a6      	cmp	r6, r4
    1a32:	d109      	bne.n	1a48 <__libc_init_array+0x24>
    1a34:	2600      	movs	r6, #0
    1a36:	f001 fa01 	bl	2e3c <_init>
    1a3a:	4d0a      	ldr	r5, [pc, #40]	; (1a64 <__libc_init_array+0x40>)
    1a3c:	4c0a      	ldr	r4, [pc, #40]	; (1a68 <__libc_init_array+0x44>)
    1a3e:	1b64      	subs	r4, r4, r5
    1a40:	10a4      	asrs	r4, r4, #2
    1a42:	42a6      	cmp	r6, r4
    1a44:	d105      	bne.n	1a52 <__libc_init_array+0x2e>
    1a46:	bd70      	pop	{r4, r5, r6, pc}
    1a48:	00b3      	lsls	r3, r6, #2
    1a4a:	58eb      	ldr	r3, [r5, r3]
    1a4c:	4798      	blx	r3
    1a4e:	3601      	adds	r6, #1
    1a50:	e7ee      	b.n	1a30 <__libc_init_array+0xc>
    1a52:	00b3      	lsls	r3, r6, #2
    1a54:	58eb      	ldr	r3, [r5, r3]
    1a56:	4798      	blx	r3
    1a58:	3601      	adds	r6, #1
    1a5a:	e7f2      	b.n	1a42 <__libc_init_array+0x1e>
    1a5c:	00002e48 	.word	0x00002e48
    1a60:	00002e48 	.word	0x00002e48
    1a64:	00002e48 	.word	0x00002e48
    1a68:	00002e4c 	.word	0x00002e4c

00001a6c <memset>:
    1a6c:	0003      	movs	r3, r0
    1a6e:	1882      	adds	r2, r0, r2
    1a70:	4293      	cmp	r3, r2
    1a72:	d100      	bne.n	1a76 <memset+0xa>
    1a74:	4770      	bx	lr
    1a76:	7019      	strb	r1, [r3, #0]
    1a78:	3301      	adds	r3, #1
    1a7a:	e7f9      	b.n	1a70 <memset+0x4>

00001a7c <iprintf>:
    1a7c:	b40f      	push	{r0, r1, r2, r3}
    1a7e:	4b0b      	ldr	r3, [pc, #44]	; (1aac <iprintf+0x30>)
    1a80:	b513      	push	{r0, r1, r4, lr}
    1a82:	681c      	ldr	r4, [r3, #0]
    1a84:	2c00      	cmp	r4, #0
    1a86:	d005      	beq.n	1a94 <iprintf+0x18>
    1a88:	69a3      	ldr	r3, [r4, #24]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d102      	bne.n	1a94 <iprintf+0x18>
    1a8e:	0020      	movs	r0, r4
    1a90:	f000 fb58 	bl	2144 <__sinit>
    1a94:	ab05      	add	r3, sp, #20
    1a96:	0020      	movs	r0, r4
    1a98:	9a04      	ldr	r2, [sp, #16]
    1a9a:	68a1      	ldr	r1, [r4, #8]
    1a9c:	9301      	str	r3, [sp, #4]
    1a9e:	f000 fd3b 	bl	2518 <_vfiprintf_r>
    1aa2:	bc16      	pop	{r1, r2, r4}
    1aa4:	bc08      	pop	{r3}
    1aa6:	b004      	add	sp, #16
    1aa8:	4718      	bx	r3
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	2000000c 	.word	0x2000000c

00001ab0 <_puts_r>:
    1ab0:	b570      	push	{r4, r5, r6, lr}
    1ab2:	0005      	movs	r5, r0
    1ab4:	000e      	movs	r6, r1
    1ab6:	2800      	cmp	r0, #0
    1ab8:	d004      	beq.n	1ac4 <_puts_r+0x14>
    1aba:	6983      	ldr	r3, [r0, #24]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d101      	bne.n	1ac4 <_puts_r+0x14>
    1ac0:	f000 fb40 	bl	2144 <__sinit>
    1ac4:	69ab      	ldr	r3, [r5, #24]
    1ac6:	68ac      	ldr	r4, [r5, #8]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d102      	bne.n	1ad2 <_puts_r+0x22>
    1acc:	0028      	movs	r0, r5
    1ace:	f000 fb39 	bl	2144 <__sinit>
    1ad2:	4b2d      	ldr	r3, [pc, #180]	; (1b88 <_puts_r+0xd8>)
    1ad4:	429c      	cmp	r4, r3
    1ad6:	d122      	bne.n	1b1e <_puts_r+0x6e>
    1ad8:	686c      	ldr	r4, [r5, #4]
    1ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1adc:	07db      	lsls	r3, r3, #31
    1ade:	d405      	bmi.n	1aec <_puts_r+0x3c>
    1ae0:	89a3      	ldrh	r3, [r4, #12]
    1ae2:	059b      	lsls	r3, r3, #22
    1ae4:	d402      	bmi.n	1aec <_puts_r+0x3c>
    1ae6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1ae8:	f000 fbcd 	bl	2286 <__retarget_lock_acquire_recursive>
    1aec:	89a3      	ldrh	r3, [r4, #12]
    1aee:	071b      	lsls	r3, r3, #28
    1af0:	d502      	bpl.n	1af8 <_puts_r+0x48>
    1af2:	6923      	ldr	r3, [r4, #16]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d129      	bne.n	1b4c <_puts_r+0x9c>
    1af8:	0021      	movs	r1, r4
    1afa:	0028      	movs	r0, r5
    1afc:	f000 f97c 	bl	1df8 <__swsetup_r>
    1b00:	2800      	cmp	r0, #0
    1b02:	d023      	beq.n	1b4c <_puts_r+0x9c>
    1b04:	2501      	movs	r5, #1
    1b06:	426d      	negs	r5, r5
    1b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1b0a:	07db      	lsls	r3, r3, #31
    1b0c:	d405      	bmi.n	1b1a <_puts_r+0x6a>
    1b0e:	89a3      	ldrh	r3, [r4, #12]
    1b10:	059b      	lsls	r3, r3, #22
    1b12:	d402      	bmi.n	1b1a <_puts_r+0x6a>
    1b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1b16:	f000 fbb7 	bl	2288 <__retarget_lock_release_recursive>
    1b1a:	0028      	movs	r0, r5
    1b1c:	bd70      	pop	{r4, r5, r6, pc}
    1b1e:	4b1b      	ldr	r3, [pc, #108]	; (1b8c <_puts_r+0xdc>)
    1b20:	429c      	cmp	r4, r3
    1b22:	d101      	bne.n	1b28 <_puts_r+0x78>
    1b24:	68ac      	ldr	r4, [r5, #8]
    1b26:	e7d8      	b.n	1ada <_puts_r+0x2a>
    1b28:	4b19      	ldr	r3, [pc, #100]	; (1b90 <_puts_r+0xe0>)
    1b2a:	429c      	cmp	r4, r3
    1b2c:	d1d5      	bne.n	1ada <_puts_r+0x2a>
    1b2e:	68ec      	ldr	r4, [r5, #12]
    1b30:	e7d3      	b.n	1ada <_puts_r+0x2a>
    1b32:	3601      	adds	r6, #1
    1b34:	60a3      	str	r3, [r4, #8]
    1b36:	2b00      	cmp	r3, #0
    1b38:	da04      	bge.n	1b44 <_puts_r+0x94>
    1b3a:	69a2      	ldr	r2, [r4, #24]
    1b3c:	429a      	cmp	r2, r3
    1b3e:	dc16      	bgt.n	1b6e <_puts_r+0xbe>
    1b40:	290a      	cmp	r1, #10
    1b42:	d014      	beq.n	1b6e <_puts_r+0xbe>
    1b44:	6823      	ldr	r3, [r4, #0]
    1b46:	1c5a      	adds	r2, r3, #1
    1b48:	6022      	str	r2, [r4, #0]
    1b4a:	7019      	strb	r1, [r3, #0]
    1b4c:	68a3      	ldr	r3, [r4, #8]
    1b4e:	7831      	ldrb	r1, [r6, #0]
    1b50:	3b01      	subs	r3, #1
    1b52:	2900      	cmp	r1, #0
    1b54:	d1ed      	bne.n	1b32 <_puts_r+0x82>
    1b56:	60a3      	str	r3, [r4, #8]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	da0f      	bge.n	1b7c <_puts_r+0xcc>
    1b5c:	0028      	movs	r0, r5
    1b5e:	0022      	movs	r2, r4
    1b60:	310a      	adds	r1, #10
    1b62:	f000 f8f3 	bl	1d4c <__swbuf_r>
    1b66:	250a      	movs	r5, #10
    1b68:	1c43      	adds	r3, r0, #1
    1b6a:	d1cd      	bne.n	1b08 <_puts_r+0x58>
    1b6c:	e7ca      	b.n	1b04 <_puts_r+0x54>
    1b6e:	0022      	movs	r2, r4
    1b70:	0028      	movs	r0, r5
    1b72:	f000 f8eb 	bl	1d4c <__swbuf_r>
    1b76:	1c43      	adds	r3, r0, #1
    1b78:	d1e8      	bne.n	1b4c <_puts_r+0x9c>
    1b7a:	e7c3      	b.n	1b04 <_puts_r+0x54>
    1b7c:	250a      	movs	r5, #10
    1b7e:	6823      	ldr	r3, [r4, #0]
    1b80:	1c5a      	adds	r2, r3, #1
    1b82:	6022      	str	r2, [r4, #0]
    1b84:	701d      	strb	r5, [r3, #0]
    1b86:	e7bf      	b.n	1b08 <_puts_r+0x58>
    1b88:	00002dc8 	.word	0x00002dc8
    1b8c:	00002de8 	.word	0x00002de8
    1b90:	00002da8 	.word	0x00002da8

00001b94 <puts>:
    1b94:	b510      	push	{r4, lr}
    1b96:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <puts+0x10>)
    1b98:	0001      	movs	r1, r0
    1b9a:	6818      	ldr	r0, [r3, #0]
    1b9c:	f7ff ff88 	bl	1ab0 <_puts_r>
    1ba0:	bd10      	pop	{r4, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	2000000c 	.word	0x2000000c

00001ba8 <setbuf>:
    1ba8:	424a      	negs	r2, r1
    1baa:	414a      	adcs	r2, r1
    1bac:	2380      	movs	r3, #128	; 0x80
    1bae:	b510      	push	{r4, lr}
    1bb0:	0052      	lsls	r2, r2, #1
    1bb2:	00db      	lsls	r3, r3, #3
    1bb4:	f000 f802 	bl	1bbc <setvbuf>
    1bb8:	bd10      	pop	{r4, pc}
	...

00001bbc <setvbuf>:
    1bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bbe:	001d      	movs	r5, r3
    1bc0:	4b5d      	ldr	r3, [pc, #372]	; (1d38 <setvbuf+0x17c>)
    1bc2:	b085      	sub	sp, #20
    1bc4:	681e      	ldr	r6, [r3, #0]
    1bc6:	0004      	movs	r4, r0
    1bc8:	000f      	movs	r7, r1
    1bca:	9200      	str	r2, [sp, #0]
    1bcc:	2e00      	cmp	r6, #0
    1bce:	d005      	beq.n	1bdc <setvbuf+0x20>
    1bd0:	69b3      	ldr	r3, [r6, #24]
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d102      	bne.n	1bdc <setvbuf+0x20>
    1bd6:	0030      	movs	r0, r6
    1bd8:	f000 fab4 	bl	2144 <__sinit>
    1bdc:	4b57      	ldr	r3, [pc, #348]	; (1d3c <setvbuf+0x180>)
    1bde:	429c      	cmp	r4, r3
    1be0:	d161      	bne.n	1ca6 <setvbuf+0xea>
    1be2:	6874      	ldr	r4, [r6, #4]
    1be4:	9b00      	ldr	r3, [sp, #0]
    1be6:	2b02      	cmp	r3, #2
    1be8:	d005      	beq.n	1bf6 <setvbuf+0x3a>
    1bea:	2b01      	cmp	r3, #1
    1bec:	d900      	bls.n	1bf0 <setvbuf+0x34>
    1bee:	e09d      	b.n	1d2c <setvbuf+0x170>
    1bf0:	2d00      	cmp	r5, #0
    1bf2:	da00      	bge.n	1bf6 <setvbuf+0x3a>
    1bf4:	e09a      	b.n	1d2c <setvbuf+0x170>
    1bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1bf8:	07db      	lsls	r3, r3, #31
    1bfa:	d405      	bmi.n	1c08 <setvbuf+0x4c>
    1bfc:	89a3      	ldrh	r3, [r4, #12]
    1bfe:	059b      	lsls	r3, r3, #22
    1c00:	d402      	bmi.n	1c08 <setvbuf+0x4c>
    1c02:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1c04:	f000 fb3f 	bl	2286 <__retarget_lock_acquire_recursive>
    1c08:	0021      	movs	r1, r4
    1c0a:	0030      	movs	r0, r6
    1c0c:	f000 f9f8 	bl	2000 <_fflush_r>
    1c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1c12:	2900      	cmp	r1, #0
    1c14:	d008      	beq.n	1c28 <setvbuf+0x6c>
    1c16:	0023      	movs	r3, r4
    1c18:	3344      	adds	r3, #68	; 0x44
    1c1a:	4299      	cmp	r1, r3
    1c1c:	d002      	beq.n	1c24 <setvbuf+0x68>
    1c1e:	0030      	movs	r0, r6
    1c20:	f000 fbaa 	bl	2378 <_free_r>
    1c24:	2300      	movs	r3, #0
    1c26:	6363      	str	r3, [r4, #52]	; 0x34
    1c28:	2300      	movs	r3, #0
    1c2a:	61a3      	str	r3, [r4, #24]
    1c2c:	6063      	str	r3, [r4, #4]
    1c2e:	89a3      	ldrh	r3, [r4, #12]
    1c30:	061b      	lsls	r3, r3, #24
    1c32:	d503      	bpl.n	1c3c <setvbuf+0x80>
    1c34:	0030      	movs	r0, r6
    1c36:	6921      	ldr	r1, [r4, #16]
    1c38:	f000 fb9e 	bl	2378 <_free_r>
    1c3c:	89a3      	ldrh	r3, [r4, #12]
    1c3e:	4a40      	ldr	r2, [pc, #256]	; (1d40 <setvbuf+0x184>)
    1c40:	4013      	ands	r3, r2
    1c42:	81a3      	strh	r3, [r4, #12]
    1c44:	9b00      	ldr	r3, [sp, #0]
    1c46:	2b02      	cmp	r3, #2
    1c48:	d100      	bne.n	1c4c <setvbuf+0x90>
    1c4a:	e069      	b.n	1d20 <setvbuf+0x164>
    1c4c:	ab03      	add	r3, sp, #12
    1c4e:	0021      	movs	r1, r4
    1c50:	0030      	movs	r0, r6
    1c52:	aa02      	add	r2, sp, #8
    1c54:	f000 fb1a 	bl	228c <__swhatbuf_r>
    1c58:	89a3      	ldrh	r3, [r4, #12]
    1c5a:	4303      	orrs	r3, r0
    1c5c:	81a3      	strh	r3, [r4, #12]
    1c5e:	2d00      	cmp	r5, #0
    1c60:	d12b      	bne.n	1cba <setvbuf+0xfe>
    1c62:	9d02      	ldr	r5, [sp, #8]
    1c64:	0028      	movs	r0, r5
    1c66:	f000 fb7d 	bl	2364 <malloc>
    1c6a:	1e07      	subs	r7, r0, #0
    1c6c:	d153      	bne.n	1d16 <setvbuf+0x15a>
    1c6e:	9b02      	ldr	r3, [sp, #8]
    1c70:	9301      	str	r3, [sp, #4]
    1c72:	42ab      	cmp	r3, r5
    1c74:	d149      	bne.n	1d0a <setvbuf+0x14e>
    1c76:	2501      	movs	r5, #1
    1c78:	426d      	negs	r5, r5
    1c7a:	2302      	movs	r3, #2
    1c7c:	89a2      	ldrh	r2, [r4, #12]
    1c7e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    1c80:	4313      	orrs	r3, r2
    1c82:	2200      	movs	r2, #0
    1c84:	60a2      	str	r2, [r4, #8]
    1c86:	0022      	movs	r2, r4
    1c88:	3247      	adds	r2, #71	; 0x47
    1c8a:	6022      	str	r2, [r4, #0]
    1c8c:	6122      	str	r2, [r4, #16]
    1c8e:	2201      	movs	r2, #1
    1c90:	b21b      	sxth	r3, r3
    1c92:	81a3      	strh	r3, [r4, #12]
    1c94:	6162      	str	r2, [r4, #20]
    1c96:	4211      	tst	r1, r2
    1c98:	d134      	bne.n	1d04 <setvbuf+0x148>
    1c9a:	059b      	lsls	r3, r3, #22
    1c9c:	d432      	bmi.n	1d04 <setvbuf+0x148>
    1c9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1ca0:	f000 faf2 	bl	2288 <__retarget_lock_release_recursive>
    1ca4:	e02e      	b.n	1d04 <setvbuf+0x148>
    1ca6:	4b27      	ldr	r3, [pc, #156]	; (1d44 <setvbuf+0x188>)
    1ca8:	429c      	cmp	r4, r3
    1caa:	d101      	bne.n	1cb0 <setvbuf+0xf4>
    1cac:	68b4      	ldr	r4, [r6, #8]
    1cae:	e799      	b.n	1be4 <setvbuf+0x28>
    1cb0:	4b25      	ldr	r3, [pc, #148]	; (1d48 <setvbuf+0x18c>)
    1cb2:	429c      	cmp	r4, r3
    1cb4:	d196      	bne.n	1be4 <setvbuf+0x28>
    1cb6:	68f4      	ldr	r4, [r6, #12]
    1cb8:	e794      	b.n	1be4 <setvbuf+0x28>
    1cba:	2f00      	cmp	r7, #0
    1cbc:	d0d2      	beq.n	1c64 <setvbuf+0xa8>
    1cbe:	69b3      	ldr	r3, [r6, #24]
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d102      	bne.n	1cca <setvbuf+0x10e>
    1cc4:	0030      	movs	r0, r6
    1cc6:	f000 fa3d 	bl	2144 <__sinit>
    1cca:	9b00      	ldr	r3, [sp, #0]
    1ccc:	2b01      	cmp	r3, #1
    1cce:	d102      	bne.n	1cd6 <setvbuf+0x11a>
    1cd0:	89a2      	ldrh	r2, [r4, #12]
    1cd2:	4313      	orrs	r3, r2
    1cd4:	81a3      	strh	r3, [r4, #12]
    1cd6:	89a2      	ldrh	r2, [r4, #12]
    1cd8:	2308      	movs	r3, #8
    1cda:	0011      	movs	r1, r2
    1cdc:	6027      	str	r7, [r4, #0]
    1cde:	6127      	str	r7, [r4, #16]
    1ce0:	6165      	str	r5, [r4, #20]
    1ce2:	4019      	ands	r1, r3
    1ce4:	421a      	tst	r2, r3
    1ce6:	d01f      	beq.n	1d28 <setvbuf+0x16c>
    1ce8:	07d3      	lsls	r3, r2, #31
    1cea:	d51b      	bpl.n	1d24 <setvbuf+0x168>
    1cec:	2300      	movs	r3, #0
    1cee:	426d      	negs	r5, r5
    1cf0:	60a3      	str	r3, [r4, #8]
    1cf2:	61a5      	str	r5, [r4, #24]
    1cf4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    1cf6:	2301      	movs	r3, #1
    1cf8:	000d      	movs	r5, r1
    1cfa:	401d      	ands	r5, r3
    1cfc:	4219      	tst	r1, r3
    1cfe:	d118      	bne.n	1d32 <setvbuf+0x176>
    1d00:	0593      	lsls	r3, r2, #22
    1d02:	d5cc      	bpl.n	1c9e <setvbuf+0xe2>
    1d04:	0028      	movs	r0, r5
    1d06:	b005      	add	sp, #20
    1d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d0a:	9801      	ldr	r0, [sp, #4]
    1d0c:	f000 fb2a 	bl	2364 <malloc>
    1d10:	9d01      	ldr	r5, [sp, #4]
    1d12:	1e07      	subs	r7, r0, #0
    1d14:	d0af      	beq.n	1c76 <setvbuf+0xba>
    1d16:	2380      	movs	r3, #128	; 0x80
    1d18:	89a2      	ldrh	r2, [r4, #12]
    1d1a:	4313      	orrs	r3, r2
    1d1c:	81a3      	strh	r3, [r4, #12]
    1d1e:	e7ce      	b.n	1cbe <setvbuf+0x102>
    1d20:	2500      	movs	r5, #0
    1d22:	e7aa      	b.n	1c7a <setvbuf+0xbe>
    1d24:	60a5      	str	r5, [r4, #8]
    1d26:	e7e5      	b.n	1cf4 <setvbuf+0x138>
    1d28:	60a1      	str	r1, [r4, #8]
    1d2a:	e7e3      	b.n	1cf4 <setvbuf+0x138>
    1d2c:	2501      	movs	r5, #1
    1d2e:	426d      	negs	r5, r5
    1d30:	e7e8      	b.n	1d04 <setvbuf+0x148>
    1d32:	2500      	movs	r5, #0
    1d34:	e7e6      	b.n	1d04 <setvbuf+0x148>
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	2000000c 	.word	0x2000000c
    1d3c:	00002dc8 	.word	0x00002dc8
    1d40:	fffff35c 	.word	0xfffff35c
    1d44:	00002de8 	.word	0x00002de8
    1d48:	00002da8 	.word	0x00002da8

00001d4c <__swbuf_r>:
    1d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d4e:	0005      	movs	r5, r0
    1d50:	000e      	movs	r6, r1
    1d52:	0014      	movs	r4, r2
    1d54:	2800      	cmp	r0, #0
    1d56:	d004      	beq.n	1d62 <__swbuf_r+0x16>
    1d58:	6983      	ldr	r3, [r0, #24]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d101      	bne.n	1d62 <__swbuf_r+0x16>
    1d5e:	f000 f9f1 	bl	2144 <__sinit>
    1d62:	4b22      	ldr	r3, [pc, #136]	; (1dec <__swbuf_r+0xa0>)
    1d64:	429c      	cmp	r4, r3
    1d66:	d12e      	bne.n	1dc6 <__swbuf_r+0x7a>
    1d68:	686c      	ldr	r4, [r5, #4]
    1d6a:	69a3      	ldr	r3, [r4, #24]
    1d6c:	60a3      	str	r3, [r4, #8]
    1d6e:	89a3      	ldrh	r3, [r4, #12]
    1d70:	071b      	lsls	r3, r3, #28
    1d72:	d532      	bpl.n	1dda <__swbuf_r+0x8e>
    1d74:	6923      	ldr	r3, [r4, #16]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d02f      	beq.n	1dda <__swbuf_r+0x8e>
    1d7a:	6823      	ldr	r3, [r4, #0]
    1d7c:	6922      	ldr	r2, [r4, #16]
    1d7e:	b2f7      	uxtb	r7, r6
    1d80:	1a98      	subs	r0, r3, r2
    1d82:	6963      	ldr	r3, [r4, #20]
    1d84:	b2f6      	uxtb	r6, r6
    1d86:	4283      	cmp	r3, r0
    1d88:	dc05      	bgt.n	1d96 <__swbuf_r+0x4a>
    1d8a:	0021      	movs	r1, r4
    1d8c:	0028      	movs	r0, r5
    1d8e:	f000 f937 	bl	2000 <_fflush_r>
    1d92:	2800      	cmp	r0, #0
    1d94:	d127      	bne.n	1de6 <__swbuf_r+0x9a>
    1d96:	68a3      	ldr	r3, [r4, #8]
    1d98:	3001      	adds	r0, #1
    1d9a:	3b01      	subs	r3, #1
    1d9c:	60a3      	str	r3, [r4, #8]
    1d9e:	6823      	ldr	r3, [r4, #0]
    1da0:	1c5a      	adds	r2, r3, #1
    1da2:	6022      	str	r2, [r4, #0]
    1da4:	701f      	strb	r7, [r3, #0]
    1da6:	6963      	ldr	r3, [r4, #20]
    1da8:	4283      	cmp	r3, r0
    1daa:	d004      	beq.n	1db6 <__swbuf_r+0x6a>
    1dac:	89a3      	ldrh	r3, [r4, #12]
    1dae:	07db      	lsls	r3, r3, #31
    1db0:	d507      	bpl.n	1dc2 <__swbuf_r+0x76>
    1db2:	2e0a      	cmp	r6, #10
    1db4:	d105      	bne.n	1dc2 <__swbuf_r+0x76>
    1db6:	0021      	movs	r1, r4
    1db8:	0028      	movs	r0, r5
    1dba:	f000 f921 	bl	2000 <_fflush_r>
    1dbe:	2800      	cmp	r0, #0
    1dc0:	d111      	bne.n	1de6 <__swbuf_r+0x9a>
    1dc2:	0030      	movs	r0, r6
    1dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc6:	4b0a      	ldr	r3, [pc, #40]	; (1df0 <__swbuf_r+0xa4>)
    1dc8:	429c      	cmp	r4, r3
    1dca:	d101      	bne.n	1dd0 <__swbuf_r+0x84>
    1dcc:	68ac      	ldr	r4, [r5, #8]
    1dce:	e7cc      	b.n	1d6a <__swbuf_r+0x1e>
    1dd0:	4b08      	ldr	r3, [pc, #32]	; (1df4 <__swbuf_r+0xa8>)
    1dd2:	429c      	cmp	r4, r3
    1dd4:	d1c9      	bne.n	1d6a <__swbuf_r+0x1e>
    1dd6:	68ec      	ldr	r4, [r5, #12]
    1dd8:	e7c7      	b.n	1d6a <__swbuf_r+0x1e>
    1dda:	0021      	movs	r1, r4
    1ddc:	0028      	movs	r0, r5
    1dde:	f000 f80b 	bl	1df8 <__swsetup_r>
    1de2:	2800      	cmp	r0, #0
    1de4:	d0c9      	beq.n	1d7a <__swbuf_r+0x2e>
    1de6:	2601      	movs	r6, #1
    1de8:	4276      	negs	r6, r6
    1dea:	e7ea      	b.n	1dc2 <__swbuf_r+0x76>
    1dec:	00002dc8 	.word	0x00002dc8
    1df0:	00002de8 	.word	0x00002de8
    1df4:	00002da8 	.word	0x00002da8

00001df8 <__swsetup_r>:
    1df8:	4b37      	ldr	r3, [pc, #220]	; (1ed8 <__swsetup_r+0xe0>)
    1dfa:	b570      	push	{r4, r5, r6, lr}
    1dfc:	681d      	ldr	r5, [r3, #0]
    1dfe:	0006      	movs	r6, r0
    1e00:	000c      	movs	r4, r1
    1e02:	2d00      	cmp	r5, #0
    1e04:	d005      	beq.n	1e12 <__swsetup_r+0x1a>
    1e06:	69ab      	ldr	r3, [r5, #24]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d102      	bne.n	1e12 <__swsetup_r+0x1a>
    1e0c:	0028      	movs	r0, r5
    1e0e:	f000 f999 	bl	2144 <__sinit>
    1e12:	4b32      	ldr	r3, [pc, #200]	; (1edc <__swsetup_r+0xe4>)
    1e14:	429c      	cmp	r4, r3
    1e16:	d10f      	bne.n	1e38 <__swsetup_r+0x40>
    1e18:	686c      	ldr	r4, [r5, #4]
    1e1a:	230c      	movs	r3, #12
    1e1c:	5ee2      	ldrsh	r2, [r4, r3]
    1e1e:	b293      	uxth	r3, r2
    1e20:	0711      	lsls	r1, r2, #28
    1e22:	d42d      	bmi.n	1e80 <__swsetup_r+0x88>
    1e24:	06d9      	lsls	r1, r3, #27
    1e26:	d411      	bmi.n	1e4c <__swsetup_r+0x54>
    1e28:	2309      	movs	r3, #9
    1e2a:	2001      	movs	r0, #1
    1e2c:	6033      	str	r3, [r6, #0]
    1e2e:	3337      	adds	r3, #55	; 0x37
    1e30:	4313      	orrs	r3, r2
    1e32:	81a3      	strh	r3, [r4, #12]
    1e34:	4240      	negs	r0, r0
    1e36:	bd70      	pop	{r4, r5, r6, pc}
    1e38:	4b29      	ldr	r3, [pc, #164]	; (1ee0 <__swsetup_r+0xe8>)
    1e3a:	429c      	cmp	r4, r3
    1e3c:	d101      	bne.n	1e42 <__swsetup_r+0x4a>
    1e3e:	68ac      	ldr	r4, [r5, #8]
    1e40:	e7eb      	b.n	1e1a <__swsetup_r+0x22>
    1e42:	4b28      	ldr	r3, [pc, #160]	; (1ee4 <__swsetup_r+0xec>)
    1e44:	429c      	cmp	r4, r3
    1e46:	d1e8      	bne.n	1e1a <__swsetup_r+0x22>
    1e48:	68ec      	ldr	r4, [r5, #12]
    1e4a:	e7e6      	b.n	1e1a <__swsetup_r+0x22>
    1e4c:	075b      	lsls	r3, r3, #29
    1e4e:	d513      	bpl.n	1e78 <__swsetup_r+0x80>
    1e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e52:	2900      	cmp	r1, #0
    1e54:	d008      	beq.n	1e68 <__swsetup_r+0x70>
    1e56:	0023      	movs	r3, r4
    1e58:	3344      	adds	r3, #68	; 0x44
    1e5a:	4299      	cmp	r1, r3
    1e5c:	d002      	beq.n	1e64 <__swsetup_r+0x6c>
    1e5e:	0030      	movs	r0, r6
    1e60:	f000 fa8a 	bl	2378 <_free_r>
    1e64:	2300      	movs	r3, #0
    1e66:	6363      	str	r3, [r4, #52]	; 0x34
    1e68:	2224      	movs	r2, #36	; 0x24
    1e6a:	89a3      	ldrh	r3, [r4, #12]
    1e6c:	4393      	bics	r3, r2
    1e6e:	81a3      	strh	r3, [r4, #12]
    1e70:	2300      	movs	r3, #0
    1e72:	6063      	str	r3, [r4, #4]
    1e74:	6923      	ldr	r3, [r4, #16]
    1e76:	6023      	str	r3, [r4, #0]
    1e78:	2308      	movs	r3, #8
    1e7a:	89a2      	ldrh	r2, [r4, #12]
    1e7c:	4313      	orrs	r3, r2
    1e7e:	81a3      	strh	r3, [r4, #12]
    1e80:	6923      	ldr	r3, [r4, #16]
    1e82:	2b00      	cmp	r3, #0
    1e84:	d10b      	bne.n	1e9e <__swsetup_r+0xa6>
    1e86:	21a0      	movs	r1, #160	; 0xa0
    1e88:	2280      	movs	r2, #128	; 0x80
    1e8a:	89a3      	ldrh	r3, [r4, #12]
    1e8c:	0089      	lsls	r1, r1, #2
    1e8e:	0092      	lsls	r2, r2, #2
    1e90:	400b      	ands	r3, r1
    1e92:	4293      	cmp	r3, r2
    1e94:	d003      	beq.n	1e9e <__swsetup_r+0xa6>
    1e96:	0021      	movs	r1, r4
    1e98:	0030      	movs	r0, r6
    1e9a:	f000 fa1f 	bl	22dc <__smakebuf_r>
    1e9e:	220c      	movs	r2, #12
    1ea0:	5ea3      	ldrsh	r3, [r4, r2]
    1ea2:	2001      	movs	r0, #1
    1ea4:	001a      	movs	r2, r3
    1ea6:	b299      	uxth	r1, r3
    1ea8:	4002      	ands	r2, r0
    1eaa:	4203      	tst	r3, r0
    1eac:	d00f      	beq.n	1ece <__swsetup_r+0xd6>
    1eae:	2200      	movs	r2, #0
    1eb0:	60a2      	str	r2, [r4, #8]
    1eb2:	6962      	ldr	r2, [r4, #20]
    1eb4:	4252      	negs	r2, r2
    1eb6:	61a2      	str	r2, [r4, #24]
    1eb8:	2000      	movs	r0, #0
    1eba:	6922      	ldr	r2, [r4, #16]
    1ebc:	4282      	cmp	r2, r0
    1ebe:	d1ba      	bne.n	1e36 <__swsetup_r+0x3e>
    1ec0:	060a      	lsls	r2, r1, #24
    1ec2:	d5b8      	bpl.n	1e36 <__swsetup_r+0x3e>
    1ec4:	2240      	movs	r2, #64	; 0x40
    1ec6:	4313      	orrs	r3, r2
    1ec8:	81a3      	strh	r3, [r4, #12]
    1eca:	3801      	subs	r0, #1
    1ecc:	e7b3      	b.n	1e36 <__swsetup_r+0x3e>
    1ece:	0788      	lsls	r0, r1, #30
    1ed0:	d400      	bmi.n	1ed4 <__swsetup_r+0xdc>
    1ed2:	6962      	ldr	r2, [r4, #20]
    1ed4:	60a2      	str	r2, [r4, #8]
    1ed6:	e7ef      	b.n	1eb8 <__swsetup_r+0xc0>
    1ed8:	2000000c 	.word	0x2000000c
    1edc:	00002dc8 	.word	0x00002dc8
    1ee0:	00002de8 	.word	0x00002de8
    1ee4:	00002da8 	.word	0x00002da8

00001ee8 <__sflush_r>:
    1ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1eea:	898b      	ldrh	r3, [r1, #12]
    1eec:	0005      	movs	r5, r0
    1eee:	000c      	movs	r4, r1
    1ef0:	071a      	lsls	r2, r3, #28
    1ef2:	d45f      	bmi.n	1fb4 <__sflush_r+0xcc>
    1ef4:	684a      	ldr	r2, [r1, #4]
    1ef6:	2a00      	cmp	r2, #0
    1ef8:	dc04      	bgt.n	1f04 <__sflush_r+0x1c>
    1efa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    1efc:	2a00      	cmp	r2, #0
    1efe:	dc01      	bgt.n	1f04 <__sflush_r+0x1c>
    1f00:	2000      	movs	r0, #0
    1f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1f06:	2f00      	cmp	r7, #0
    1f08:	d0fa      	beq.n	1f00 <__sflush_r+0x18>
    1f0a:	2200      	movs	r2, #0
    1f0c:	2180      	movs	r1, #128	; 0x80
    1f0e:	682e      	ldr	r6, [r5, #0]
    1f10:	602a      	str	r2, [r5, #0]
    1f12:	001a      	movs	r2, r3
    1f14:	0149      	lsls	r1, r1, #5
    1f16:	400a      	ands	r2, r1
    1f18:	420b      	tst	r3, r1
    1f1a:	d034      	beq.n	1f86 <__sflush_r+0x9e>
    1f1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1f1e:	89a3      	ldrh	r3, [r4, #12]
    1f20:	075b      	lsls	r3, r3, #29
    1f22:	d506      	bpl.n	1f32 <__sflush_r+0x4a>
    1f24:	6863      	ldr	r3, [r4, #4]
    1f26:	1ac0      	subs	r0, r0, r3
    1f28:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d001      	beq.n	1f32 <__sflush_r+0x4a>
    1f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1f30:	1ac0      	subs	r0, r0, r3
    1f32:	0002      	movs	r2, r0
    1f34:	6a21      	ldr	r1, [r4, #32]
    1f36:	2300      	movs	r3, #0
    1f38:	0028      	movs	r0, r5
    1f3a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1f3c:	47b8      	blx	r7
    1f3e:	89a1      	ldrh	r1, [r4, #12]
    1f40:	1c43      	adds	r3, r0, #1
    1f42:	d106      	bne.n	1f52 <__sflush_r+0x6a>
    1f44:	682b      	ldr	r3, [r5, #0]
    1f46:	2b1d      	cmp	r3, #29
    1f48:	d831      	bhi.n	1fae <__sflush_r+0xc6>
    1f4a:	4a2c      	ldr	r2, [pc, #176]	; (1ffc <__sflush_r+0x114>)
    1f4c:	40da      	lsrs	r2, r3
    1f4e:	07d3      	lsls	r3, r2, #31
    1f50:	d52d      	bpl.n	1fae <__sflush_r+0xc6>
    1f52:	2300      	movs	r3, #0
    1f54:	6063      	str	r3, [r4, #4]
    1f56:	6923      	ldr	r3, [r4, #16]
    1f58:	6023      	str	r3, [r4, #0]
    1f5a:	04cb      	lsls	r3, r1, #19
    1f5c:	d505      	bpl.n	1f6a <__sflush_r+0x82>
    1f5e:	1c43      	adds	r3, r0, #1
    1f60:	d102      	bne.n	1f68 <__sflush_r+0x80>
    1f62:	682b      	ldr	r3, [r5, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d100      	bne.n	1f6a <__sflush_r+0x82>
    1f68:	6560      	str	r0, [r4, #84]	; 0x54
    1f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1f6c:	602e      	str	r6, [r5, #0]
    1f6e:	2900      	cmp	r1, #0
    1f70:	d0c6      	beq.n	1f00 <__sflush_r+0x18>
    1f72:	0023      	movs	r3, r4
    1f74:	3344      	adds	r3, #68	; 0x44
    1f76:	4299      	cmp	r1, r3
    1f78:	d002      	beq.n	1f80 <__sflush_r+0x98>
    1f7a:	0028      	movs	r0, r5
    1f7c:	f000 f9fc 	bl	2378 <_free_r>
    1f80:	2000      	movs	r0, #0
    1f82:	6360      	str	r0, [r4, #52]	; 0x34
    1f84:	e7bd      	b.n	1f02 <__sflush_r+0x1a>
    1f86:	2301      	movs	r3, #1
    1f88:	0028      	movs	r0, r5
    1f8a:	6a21      	ldr	r1, [r4, #32]
    1f8c:	47b8      	blx	r7
    1f8e:	1c43      	adds	r3, r0, #1
    1f90:	d1c5      	bne.n	1f1e <__sflush_r+0x36>
    1f92:	682b      	ldr	r3, [r5, #0]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d0c2      	beq.n	1f1e <__sflush_r+0x36>
    1f98:	2b1d      	cmp	r3, #29
    1f9a:	d001      	beq.n	1fa0 <__sflush_r+0xb8>
    1f9c:	2b16      	cmp	r3, #22
    1f9e:	d101      	bne.n	1fa4 <__sflush_r+0xbc>
    1fa0:	602e      	str	r6, [r5, #0]
    1fa2:	e7ad      	b.n	1f00 <__sflush_r+0x18>
    1fa4:	2340      	movs	r3, #64	; 0x40
    1fa6:	89a2      	ldrh	r2, [r4, #12]
    1fa8:	4313      	orrs	r3, r2
    1faa:	81a3      	strh	r3, [r4, #12]
    1fac:	e7a9      	b.n	1f02 <__sflush_r+0x1a>
    1fae:	2340      	movs	r3, #64	; 0x40
    1fb0:	430b      	orrs	r3, r1
    1fb2:	e7fa      	b.n	1faa <__sflush_r+0xc2>
    1fb4:	690f      	ldr	r7, [r1, #16]
    1fb6:	2f00      	cmp	r7, #0
    1fb8:	d0a2      	beq.n	1f00 <__sflush_r+0x18>
    1fba:	680a      	ldr	r2, [r1, #0]
    1fbc:	600f      	str	r7, [r1, #0]
    1fbe:	1bd2      	subs	r2, r2, r7
    1fc0:	9201      	str	r2, [sp, #4]
    1fc2:	2200      	movs	r2, #0
    1fc4:	079b      	lsls	r3, r3, #30
    1fc6:	d100      	bne.n	1fca <__sflush_r+0xe2>
    1fc8:	694a      	ldr	r2, [r1, #20]
    1fca:	60a2      	str	r2, [r4, #8]
    1fcc:	9b01      	ldr	r3, [sp, #4]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	dc00      	bgt.n	1fd4 <__sflush_r+0xec>
    1fd2:	e795      	b.n	1f00 <__sflush_r+0x18>
    1fd4:	003a      	movs	r2, r7
    1fd6:	0028      	movs	r0, r5
    1fd8:	9b01      	ldr	r3, [sp, #4]
    1fda:	6a21      	ldr	r1, [r4, #32]
    1fdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1fde:	47b0      	blx	r6
    1fe0:	2800      	cmp	r0, #0
    1fe2:	dc06      	bgt.n	1ff2 <__sflush_r+0x10a>
    1fe4:	2340      	movs	r3, #64	; 0x40
    1fe6:	2001      	movs	r0, #1
    1fe8:	89a2      	ldrh	r2, [r4, #12]
    1fea:	4240      	negs	r0, r0
    1fec:	4313      	orrs	r3, r2
    1fee:	81a3      	strh	r3, [r4, #12]
    1ff0:	e787      	b.n	1f02 <__sflush_r+0x1a>
    1ff2:	9b01      	ldr	r3, [sp, #4]
    1ff4:	183f      	adds	r7, r7, r0
    1ff6:	1a1b      	subs	r3, r3, r0
    1ff8:	9301      	str	r3, [sp, #4]
    1ffa:	e7e7      	b.n	1fcc <__sflush_r+0xe4>
    1ffc:	20400001 	.word	0x20400001

00002000 <_fflush_r>:
    2000:	690b      	ldr	r3, [r1, #16]
    2002:	b570      	push	{r4, r5, r6, lr}
    2004:	0005      	movs	r5, r0
    2006:	000c      	movs	r4, r1
    2008:	2b00      	cmp	r3, #0
    200a:	d102      	bne.n	2012 <_fflush_r+0x12>
    200c:	2500      	movs	r5, #0
    200e:	0028      	movs	r0, r5
    2010:	bd70      	pop	{r4, r5, r6, pc}
    2012:	2800      	cmp	r0, #0
    2014:	d004      	beq.n	2020 <_fflush_r+0x20>
    2016:	6983      	ldr	r3, [r0, #24]
    2018:	2b00      	cmp	r3, #0
    201a:	d101      	bne.n	2020 <_fflush_r+0x20>
    201c:	f000 f892 	bl	2144 <__sinit>
    2020:	4b14      	ldr	r3, [pc, #80]	; (2074 <_fflush_r+0x74>)
    2022:	429c      	cmp	r4, r3
    2024:	d11b      	bne.n	205e <_fflush_r+0x5e>
    2026:	686c      	ldr	r4, [r5, #4]
    2028:	220c      	movs	r2, #12
    202a:	5ea3      	ldrsh	r3, [r4, r2]
    202c:	2b00      	cmp	r3, #0
    202e:	d0ed      	beq.n	200c <_fflush_r+0xc>
    2030:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2032:	07d2      	lsls	r2, r2, #31
    2034:	d404      	bmi.n	2040 <_fflush_r+0x40>
    2036:	059b      	lsls	r3, r3, #22
    2038:	d402      	bmi.n	2040 <_fflush_r+0x40>
    203a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    203c:	f000 f923 	bl	2286 <__retarget_lock_acquire_recursive>
    2040:	0028      	movs	r0, r5
    2042:	0021      	movs	r1, r4
    2044:	f7ff ff50 	bl	1ee8 <__sflush_r>
    2048:	6e63      	ldr	r3, [r4, #100]	; 0x64
    204a:	0005      	movs	r5, r0
    204c:	07db      	lsls	r3, r3, #31
    204e:	d4de      	bmi.n	200e <_fflush_r+0xe>
    2050:	89a3      	ldrh	r3, [r4, #12]
    2052:	059b      	lsls	r3, r3, #22
    2054:	d4db      	bmi.n	200e <_fflush_r+0xe>
    2056:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2058:	f000 f916 	bl	2288 <__retarget_lock_release_recursive>
    205c:	e7d7      	b.n	200e <_fflush_r+0xe>
    205e:	4b06      	ldr	r3, [pc, #24]	; (2078 <_fflush_r+0x78>)
    2060:	429c      	cmp	r4, r3
    2062:	d101      	bne.n	2068 <_fflush_r+0x68>
    2064:	68ac      	ldr	r4, [r5, #8]
    2066:	e7df      	b.n	2028 <_fflush_r+0x28>
    2068:	4b04      	ldr	r3, [pc, #16]	; (207c <_fflush_r+0x7c>)
    206a:	429c      	cmp	r4, r3
    206c:	d1dc      	bne.n	2028 <_fflush_r+0x28>
    206e:	68ec      	ldr	r4, [r5, #12]
    2070:	e7da      	b.n	2028 <_fflush_r+0x28>
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00002dc8 	.word	0x00002dc8
    2078:	00002de8 	.word	0x00002de8
    207c:	00002da8 	.word	0x00002da8

00002080 <std>:
    2080:	2300      	movs	r3, #0
    2082:	b510      	push	{r4, lr}
    2084:	0004      	movs	r4, r0
    2086:	6003      	str	r3, [r0, #0]
    2088:	6043      	str	r3, [r0, #4]
    208a:	6083      	str	r3, [r0, #8]
    208c:	8181      	strh	r1, [r0, #12]
    208e:	6643      	str	r3, [r0, #100]	; 0x64
    2090:	0019      	movs	r1, r3
    2092:	81c2      	strh	r2, [r0, #14]
    2094:	6103      	str	r3, [r0, #16]
    2096:	6143      	str	r3, [r0, #20]
    2098:	6183      	str	r3, [r0, #24]
    209a:	2208      	movs	r2, #8
    209c:	305c      	adds	r0, #92	; 0x5c
    209e:	f7ff fce5 	bl	1a6c <memset>
    20a2:	4b05      	ldr	r3, [pc, #20]	; (20b8 <std+0x38>)
    20a4:	6224      	str	r4, [r4, #32]
    20a6:	6263      	str	r3, [r4, #36]	; 0x24
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <std+0x3c>)
    20aa:	62a3      	str	r3, [r4, #40]	; 0x28
    20ac:	4b04      	ldr	r3, [pc, #16]	; (20c0 <std+0x40>)
    20ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    20b0:	4b04      	ldr	r3, [pc, #16]	; (20c4 <std+0x44>)
    20b2:	6323      	str	r3, [r4, #48]	; 0x30
    20b4:	bd10      	pop	{r4, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	00002ab5 	.word	0x00002ab5
    20bc:	00002add 	.word	0x00002add
    20c0:	00002b15 	.word	0x00002b15
    20c4:	00002b41 	.word	0x00002b41

000020c8 <_cleanup_r>:
    20c8:	b510      	push	{r4, lr}
    20ca:	4902      	ldr	r1, [pc, #8]	; (20d4 <_cleanup_r+0xc>)
    20cc:	f000 f8ba 	bl	2244 <_fwalk_reent>
    20d0:	bd10      	pop	{r4, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	00002001 	.word	0x00002001

000020d8 <__sfmoreglue>:
    20d8:	b570      	push	{r4, r5, r6, lr}
    20da:	2568      	movs	r5, #104	; 0x68
    20dc:	1e4a      	subs	r2, r1, #1
    20de:	4355      	muls	r5, r2
    20e0:	000e      	movs	r6, r1
    20e2:	0029      	movs	r1, r5
    20e4:	3174      	adds	r1, #116	; 0x74
    20e6:	f000 f991 	bl	240c <_malloc_r>
    20ea:	1e04      	subs	r4, r0, #0
    20ec:	d008      	beq.n	2100 <__sfmoreglue+0x28>
    20ee:	2100      	movs	r1, #0
    20f0:	002a      	movs	r2, r5
    20f2:	6001      	str	r1, [r0, #0]
    20f4:	6046      	str	r6, [r0, #4]
    20f6:	300c      	adds	r0, #12
    20f8:	60a0      	str	r0, [r4, #8]
    20fa:	3268      	adds	r2, #104	; 0x68
    20fc:	f7ff fcb6 	bl	1a6c <memset>
    2100:	0020      	movs	r0, r4
    2102:	bd70      	pop	{r4, r5, r6, pc}

00002104 <__sfp_lock_acquire>:
    2104:	b510      	push	{r4, lr}
    2106:	4802      	ldr	r0, [pc, #8]	; (2110 <__sfp_lock_acquire+0xc>)
    2108:	f000 f8bd 	bl	2286 <__retarget_lock_acquire_recursive>
    210c:	bd10      	pop	{r4, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	20000179 	.word	0x20000179

00002114 <__sfp_lock_release>:
    2114:	b510      	push	{r4, lr}
    2116:	4802      	ldr	r0, [pc, #8]	; (2120 <__sfp_lock_release+0xc>)
    2118:	f000 f8b6 	bl	2288 <__retarget_lock_release_recursive>
    211c:	bd10      	pop	{r4, pc}
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	20000179 	.word	0x20000179

00002124 <__sinit_lock_acquire>:
    2124:	b510      	push	{r4, lr}
    2126:	4802      	ldr	r0, [pc, #8]	; (2130 <__sinit_lock_acquire+0xc>)
    2128:	f000 f8ad 	bl	2286 <__retarget_lock_acquire_recursive>
    212c:	bd10      	pop	{r4, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	2000017a 	.word	0x2000017a

00002134 <__sinit_lock_release>:
    2134:	b510      	push	{r4, lr}
    2136:	4802      	ldr	r0, [pc, #8]	; (2140 <__sinit_lock_release+0xc>)
    2138:	f000 f8a6 	bl	2288 <__retarget_lock_release_recursive>
    213c:	bd10      	pop	{r4, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	2000017a 	.word	0x2000017a

00002144 <__sinit>:
    2144:	b513      	push	{r0, r1, r4, lr}
    2146:	0004      	movs	r4, r0
    2148:	f7ff ffec 	bl	2124 <__sinit_lock_acquire>
    214c:	69a3      	ldr	r3, [r4, #24]
    214e:	2b00      	cmp	r3, #0
    2150:	d002      	beq.n	2158 <__sinit+0x14>
    2152:	f7ff ffef 	bl	2134 <__sinit_lock_release>
    2156:	bd13      	pop	{r0, r1, r4, pc}
    2158:	64a3      	str	r3, [r4, #72]	; 0x48
    215a:	64e3      	str	r3, [r4, #76]	; 0x4c
    215c:	6523      	str	r3, [r4, #80]	; 0x50
    215e:	4b13      	ldr	r3, [pc, #76]	; (21ac <__sinit+0x68>)
    2160:	4a13      	ldr	r2, [pc, #76]	; (21b0 <__sinit+0x6c>)
    2162:	681b      	ldr	r3, [r3, #0]
    2164:	62a2      	str	r2, [r4, #40]	; 0x28
    2166:	9301      	str	r3, [sp, #4]
    2168:	42a3      	cmp	r3, r4
    216a:	d101      	bne.n	2170 <__sinit+0x2c>
    216c:	2301      	movs	r3, #1
    216e:	61a3      	str	r3, [r4, #24]
    2170:	0020      	movs	r0, r4
    2172:	f000 f81f 	bl	21b4 <__sfp>
    2176:	6060      	str	r0, [r4, #4]
    2178:	0020      	movs	r0, r4
    217a:	f000 f81b 	bl	21b4 <__sfp>
    217e:	60a0      	str	r0, [r4, #8]
    2180:	0020      	movs	r0, r4
    2182:	f000 f817 	bl	21b4 <__sfp>
    2186:	2200      	movs	r2, #0
    2188:	2104      	movs	r1, #4
    218a:	60e0      	str	r0, [r4, #12]
    218c:	6860      	ldr	r0, [r4, #4]
    218e:	f7ff ff77 	bl	2080 <std>
    2192:	2201      	movs	r2, #1
    2194:	2109      	movs	r1, #9
    2196:	68a0      	ldr	r0, [r4, #8]
    2198:	f7ff ff72 	bl	2080 <std>
    219c:	2202      	movs	r2, #2
    219e:	2112      	movs	r1, #18
    21a0:	68e0      	ldr	r0, [r4, #12]
    21a2:	f7ff ff6d 	bl	2080 <std>
    21a6:	2301      	movs	r3, #1
    21a8:	61a3      	str	r3, [r4, #24]
    21aa:	e7d2      	b.n	2152 <__sinit+0xe>
    21ac:	00002da4 	.word	0x00002da4
    21b0:	000020c9 	.word	0x000020c9

000021b4 <__sfp>:
    21b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21b6:	0007      	movs	r7, r0
    21b8:	f7ff ffa4 	bl	2104 <__sfp_lock_acquire>
    21bc:	4b1f      	ldr	r3, [pc, #124]	; (223c <__sfp+0x88>)
    21be:	681e      	ldr	r6, [r3, #0]
    21c0:	69b3      	ldr	r3, [r6, #24]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d102      	bne.n	21cc <__sfp+0x18>
    21c6:	0030      	movs	r0, r6
    21c8:	f7ff ffbc 	bl	2144 <__sinit>
    21cc:	3648      	adds	r6, #72	; 0x48
    21ce:	68b4      	ldr	r4, [r6, #8]
    21d0:	6873      	ldr	r3, [r6, #4]
    21d2:	3b01      	subs	r3, #1
    21d4:	d504      	bpl.n	21e0 <__sfp+0x2c>
    21d6:	6833      	ldr	r3, [r6, #0]
    21d8:	2b00      	cmp	r3, #0
    21da:	d022      	beq.n	2222 <__sfp+0x6e>
    21dc:	6836      	ldr	r6, [r6, #0]
    21de:	e7f6      	b.n	21ce <__sfp+0x1a>
    21e0:	220c      	movs	r2, #12
    21e2:	5ea5      	ldrsh	r5, [r4, r2]
    21e4:	2d00      	cmp	r5, #0
    21e6:	d11a      	bne.n	221e <__sfp+0x6a>
    21e8:	0020      	movs	r0, r4
    21ea:	4b15      	ldr	r3, [pc, #84]	; (2240 <__sfp+0x8c>)
    21ec:	3058      	adds	r0, #88	; 0x58
    21ee:	60e3      	str	r3, [r4, #12]
    21f0:	6665      	str	r5, [r4, #100]	; 0x64
    21f2:	f000 f847 	bl	2284 <__retarget_lock_init_recursive>
    21f6:	f7ff ff8d 	bl	2114 <__sfp_lock_release>
    21fa:	0020      	movs	r0, r4
    21fc:	2208      	movs	r2, #8
    21fe:	0029      	movs	r1, r5
    2200:	6025      	str	r5, [r4, #0]
    2202:	60a5      	str	r5, [r4, #8]
    2204:	6065      	str	r5, [r4, #4]
    2206:	6125      	str	r5, [r4, #16]
    2208:	6165      	str	r5, [r4, #20]
    220a:	61a5      	str	r5, [r4, #24]
    220c:	305c      	adds	r0, #92	; 0x5c
    220e:	f7ff fc2d 	bl	1a6c <memset>
    2212:	6365      	str	r5, [r4, #52]	; 0x34
    2214:	63a5      	str	r5, [r4, #56]	; 0x38
    2216:	64a5      	str	r5, [r4, #72]	; 0x48
    2218:	64e5      	str	r5, [r4, #76]	; 0x4c
    221a:	0020      	movs	r0, r4
    221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    221e:	3468      	adds	r4, #104	; 0x68
    2220:	e7d7      	b.n	21d2 <__sfp+0x1e>
    2222:	2104      	movs	r1, #4
    2224:	0038      	movs	r0, r7
    2226:	f7ff ff57 	bl	20d8 <__sfmoreglue>
    222a:	1e04      	subs	r4, r0, #0
    222c:	6030      	str	r0, [r6, #0]
    222e:	d1d5      	bne.n	21dc <__sfp+0x28>
    2230:	f7ff ff70 	bl	2114 <__sfp_lock_release>
    2234:	230c      	movs	r3, #12
    2236:	603b      	str	r3, [r7, #0]
    2238:	e7ef      	b.n	221a <__sfp+0x66>
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	00002da4 	.word	0x00002da4
    2240:	ffff0001 	.word	0xffff0001

00002244 <_fwalk_reent>:
    2244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2246:	0004      	movs	r4, r0
    2248:	0006      	movs	r6, r0
    224a:	2700      	movs	r7, #0
    224c:	9101      	str	r1, [sp, #4]
    224e:	3448      	adds	r4, #72	; 0x48
    2250:	6863      	ldr	r3, [r4, #4]
    2252:	68a5      	ldr	r5, [r4, #8]
    2254:	9300      	str	r3, [sp, #0]
    2256:	9b00      	ldr	r3, [sp, #0]
    2258:	3b01      	subs	r3, #1
    225a:	9300      	str	r3, [sp, #0]
    225c:	d504      	bpl.n	2268 <_fwalk_reent+0x24>
    225e:	6824      	ldr	r4, [r4, #0]
    2260:	2c00      	cmp	r4, #0
    2262:	d1f5      	bne.n	2250 <_fwalk_reent+0xc>
    2264:	0038      	movs	r0, r7
    2266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2268:	89ab      	ldrh	r3, [r5, #12]
    226a:	2b01      	cmp	r3, #1
    226c:	d908      	bls.n	2280 <_fwalk_reent+0x3c>
    226e:	220e      	movs	r2, #14
    2270:	5eab      	ldrsh	r3, [r5, r2]
    2272:	3301      	adds	r3, #1
    2274:	d004      	beq.n	2280 <_fwalk_reent+0x3c>
    2276:	0029      	movs	r1, r5
    2278:	0030      	movs	r0, r6
    227a:	9b01      	ldr	r3, [sp, #4]
    227c:	4798      	blx	r3
    227e:	4307      	orrs	r7, r0
    2280:	3568      	adds	r5, #104	; 0x68
    2282:	e7e8      	b.n	2256 <_fwalk_reent+0x12>

00002284 <__retarget_lock_init_recursive>:
    2284:	4770      	bx	lr

00002286 <__retarget_lock_acquire_recursive>:
    2286:	4770      	bx	lr

00002288 <__retarget_lock_release_recursive>:
    2288:	4770      	bx	lr
	...

0000228c <__swhatbuf_r>:
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	000e      	movs	r6, r1
    2290:	001d      	movs	r5, r3
    2292:	230e      	movs	r3, #14
    2294:	5ec9      	ldrsh	r1, [r1, r3]
    2296:	0014      	movs	r4, r2
    2298:	b096      	sub	sp, #88	; 0x58
    229a:	2900      	cmp	r1, #0
    229c:	da08      	bge.n	22b0 <__swhatbuf_r+0x24>
    229e:	220c      	movs	r2, #12
    22a0:	5eb3      	ldrsh	r3, [r6, r2]
    22a2:	2200      	movs	r2, #0
    22a4:	602a      	str	r2, [r5, #0]
    22a6:	061b      	lsls	r3, r3, #24
    22a8:	d411      	bmi.n	22ce <__swhatbuf_r+0x42>
    22aa:	2380      	movs	r3, #128	; 0x80
    22ac:	00db      	lsls	r3, r3, #3
    22ae:	e00f      	b.n	22d0 <__swhatbuf_r+0x44>
    22b0:	466a      	mov	r2, sp
    22b2:	f000 fc71 	bl	2b98 <_fstat_r>
    22b6:	2800      	cmp	r0, #0
    22b8:	dbf1      	blt.n	229e <__swhatbuf_r+0x12>
    22ba:	23f0      	movs	r3, #240	; 0xf0
    22bc:	9901      	ldr	r1, [sp, #4]
    22be:	021b      	lsls	r3, r3, #8
    22c0:	4019      	ands	r1, r3
    22c2:	4b05      	ldr	r3, [pc, #20]	; (22d8 <__swhatbuf_r+0x4c>)
    22c4:	18c9      	adds	r1, r1, r3
    22c6:	424b      	negs	r3, r1
    22c8:	4159      	adcs	r1, r3
    22ca:	6029      	str	r1, [r5, #0]
    22cc:	e7ed      	b.n	22aa <__swhatbuf_r+0x1e>
    22ce:	2340      	movs	r3, #64	; 0x40
    22d0:	2000      	movs	r0, #0
    22d2:	6023      	str	r3, [r4, #0]
    22d4:	b016      	add	sp, #88	; 0x58
    22d6:	bd70      	pop	{r4, r5, r6, pc}
    22d8:	ffffe000 	.word	0xffffe000

000022dc <__smakebuf_r>:
    22dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22de:	2602      	movs	r6, #2
    22e0:	898b      	ldrh	r3, [r1, #12]
    22e2:	0005      	movs	r5, r0
    22e4:	000c      	movs	r4, r1
    22e6:	4233      	tst	r3, r6
    22e8:	d006      	beq.n	22f8 <__smakebuf_r+0x1c>
    22ea:	0023      	movs	r3, r4
    22ec:	3347      	adds	r3, #71	; 0x47
    22ee:	6023      	str	r3, [r4, #0]
    22f0:	6123      	str	r3, [r4, #16]
    22f2:	2301      	movs	r3, #1
    22f4:	6163      	str	r3, [r4, #20]
    22f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    22f8:	466a      	mov	r2, sp
    22fa:	ab01      	add	r3, sp, #4
    22fc:	f7ff ffc6 	bl	228c <__swhatbuf_r>
    2300:	9900      	ldr	r1, [sp, #0]
    2302:	0007      	movs	r7, r0
    2304:	0028      	movs	r0, r5
    2306:	f000 f881 	bl	240c <_malloc_r>
    230a:	2800      	cmp	r0, #0
    230c:	d108      	bne.n	2320 <__smakebuf_r+0x44>
    230e:	220c      	movs	r2, #12
    2310:	5ea3      	ldrsh	r3, [r4, r2]
    2312:	059a      	lsls	r2, r3, #22
    2314:	d4ef      	bmi.n	22f6 <__smakebuf_r+0x1a>
    2316:	2203      	movs	r2, #3
    2318:	4393      	bics	r3, r2
    231a:	431e      	orrs	r6, r3
    231c:	81a6      	strh	r6, [r4, #12]
    231e:	e7e4      	b.n	22ea <__smakebuf_r+0xe>
    2320:	4b0f      	ldr	r3, [pc, #60]	; (2360 <__smakebuf_r+0x84>)
    2322:	62ab      	str	r3, [r5, #40]	; 0x28
    2324:	2380      	movs	r3, #128	; 0x80
    2326:	89a2      	ldrh	r2, [r4, #12]
    2328:	6020      	str	r0, [r4, #0]
    232a:	4313      	orrs	r3, r2
    232c:	81a3      	strh	r3, [r4, #12]
    232e:	9b00      	ldr	r3, [sp, #0]
    2330:	6120      	str	r0, [r4, #16]
    2332:	6163      	str	r3, [r4, #20]
    2334:	9b01      	ldr	r3, [sp, #4]
    2336:	2b00      	cmp	r3, #0
    2338:	d00d      	beq.n	2356 <__smakebuf_r+0x7a>
    233a:	0028      	movs	r0, r5
    233c:	230e      	movs	r3, #14
    233e:	5ee1      	ldrsh	r1, [r4, r3]
    2340:	f000 fc3c 	bl	2bbc <_isatty_r>
    2344:	2800      	cmp	r0, #0
    2346:	d006      	beq.n	2356 <__smakebuf_r+0x7a>
    2348:	2203      	movs	r2, #3
    234a:	89a3      	ldrh	r3, [r4, #12]
    234c:	4393      	bics	r3, r2
    234e:	001a      	movs	r2, r3
    2350:	2301      	movs	r3, #1
    2352:	4313      	orrs	r3, r2
    2354:	81a3      	strh	r3, [r4, #12]
    2356:	89a0      	ldrh	r0, [r4, #12]
    2358:	4307      	orrs	r7, r0
    235a:	81a7      	strh	r7, [r4, #12]
    235c:	e7cb      	b.n	22f6 <__smakebuf_r+0x1a>
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	000020c9 	.word	0x000020c9

00002364 <malloc>:
    2364:	b510      	push	{r4, lr}
    2366:	4b03      	ldr	r3, [pc, #12]	; (2374 <malloc+0x10>)
    2368:	0001      	movs	r1, r0
    236a:	6818      	ldr	r0, [r3, #0]
    236c:	f000 f84e 	bl	240c <_malloc_r>
    2370:	bd10      	pop	{r4, pc}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	2000000c 	.word	0x2000000c

00002378 <_free_r>:
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	0005      	movs	r5, r0
    237c:	2900      	cmp	r1, #0
    237e:	d010      	beq.n	23a2 <_free_r+0x2a>
    2380:	1f0c      	subs	r4, r1, #4
    2382:	6823      	ldr	r3, [r4, #0]
    2384:	2b00      	cmp	r3, #0
    2386:	da00      	bge.n	238a <_free_r+0x12>
    2388:	18e4      	adds	r4, r4, r3
    238a:	0028      	movs	r0, r5
    238c:	f000 fc48 	bl	2c20 <__malloc_lock>
    2390:	4a1d      	ldr	r2, [pc, #116]	; (2408 <_free_r+0x90>)
    2392:	6813      	ldr	r3, [r2, #0]
    2394:	2b00      	cmp	r3, #0
    2396:	d105      	bne.n	23a4 <_free_r+0x2c>
    2398:	6063      	str	r3, [r4, #4]
    239a:	6014      	str	r4, [r2, #0]
    239c:	0028      	movs	r0, r5
    239e:	f000 fc47 	bl	2c30 <__malloc_unlock>
    23a2:	bd70      	pop	{r4, r5, r6, pc}
    23a4:	42a3      	cmp	r3, r4
    23a6:	d908      	bls.n	23ba <_free_r+0x42>
    23a8:	6821      	ldr	r1, [r4, #0]
    23aa:	1860      	adds	r0, r4, r1
    23ac:	4283      	cmp	r3, r0
    23ae:	d1f3      	bne.n	2398 <_free_r+0x20>
    23b0:	6818      	ldr	r0, [r3, #0]
    23b2:	685b      	ldr	r3, [r3, #4]
    23b4:	1841      	adds	r1, r0, r1
    23b6:	6021      	str	r1, [r4, #0]
    23b8:	e7ee      	b.n	2398 <_free_r+0x20>
    23ba:	001a      	movs	r2, r3
    23bc:	685b      	ldr	r3, [r3, #4]
    23be:	2b00      	cmp	r3, #0
    23c0:	d001      	beq.n	23c6 <_free_r+0x4e>
    23c2:	42a3      	cmp	r3, r4
    23c4:	d9f9      	bls.n	23ba <_free_r+0x42>
    23c6:	6811      	ldr	r1, [r2, #0]
    23c8:	1850      	adds	r0, r2, r1
    23ca:	42a0      	cmp	r0, r4
    23cc:	d10b      	bne.n	23e6 <_free_r+0x6e>
    23ce:	6820      	ldr	r0, [r4, #0]
    23d0:	1809      	adds	r1, r1, r0
    23d2:	1850      	adds	r0, r2, r1
    23d4:	6011      	str	r1, [r2, #0]
    23d6:	4283      	cmp	r3, r0
    23d8:	d1e0      	bne.n	239c <_free_r+0x24>
    23da:	6818      	ldr	r0, [r3, #0]
    23dc:	685b      	ldr	r3, [r3, #4]
    23de:	1841      	adds	r1, r0, r1
    23e0:	6011      	str	r1, [r2, #0]
    23e2:	6053      	str	r3, [r2, #4]
    23e4:	e7da      	b.n	239c <_free_r+0x24>
    23e6:	42a0      	cmp	r0, r4
    23e8:	d902      	bls.n	23f0 <_free_r+0x78>
    23ea:	230c      	movs	r3, #12
    23ec:	602b      	str	r3, [r5, #0]
    23ee:	e7d5      	b.n	239c <_free_r+0x24>
    23f0:	6821      	ldr	r1, [r4, #0]
    23f2:	1860      	adds	r0, r4, r1
    23f4:	4283      	cmp	r3, r0
    23f6:	d103      	bne.n	2400 <_free_r+0x88>
    23f8:	6818      	ldr	r0, [r3, #0]
    23fa:	685b      	ldr	r3, [r3, #4]
    23fc:	1841      	adds	r1, r0, r1
    23fe:	6021      	str	r1, [r4, #0]
    2400:	6063      	str	r3, [r4, #4]
    2402:	6054      	str	r4, [r2, #4]
    2404:	e7ca      	b.n	239c <_free_r+0x24>
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	2000017c 	.word	0x2000017c

0000240c <_malloc_r>:
    240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    240e:	2303      	movs	r3, #3
    2410:	1ccd      	adds	r5, r1, #3
    2412:	439d      	bics	r5, r3
    2414:	3508      	adds	r5, #8
    2416:	0006      	movs	r6, r0
    2418:	2d0c      	cmp	r5, #12
    241a:	d21f      	bcs.n	245c <_malloc_r+0x50>
    241c:	250c      	movs	r5, #12
    241e:	42a9      	cmp	r1, r5
    2420:	d81e      	bhi.n	2460 <_malloc_r+0x54>
    2422:	0030      	movs	r0, r6
    2424:	f000 fbfc 	bl	2c20 <__malloc_lock>
    2428:	4925      	ldr	r1, [pc, #148]	; (24c0 <_malloc_r+0xb4>)
    242a:	680a      	ldr	r2, [r1, #0]
    242c:	0014      	movs	r4, r2
    242e:	2c00      	cmp	r4, #0
    2430:	d11a      	bne.n	2468 <_malloc_r+0x5c>
    2432:	4f24      	ldr	r7, [pc, #144]	; (24c4 <_malloc_r+0xb8>)
    2434:	683b      	ldr	r3, [r7, #0]
    2436:	2b00      	cmp	r3, #0
    2438:	d104      	bne.n	2444 <_malloc_r+0x38>
    243a:	0021      	movs	r1, r4
    243c:	0030      	movs	r0, r6
    243e:	f000 fb27 	bl	2a90 <_sbrk_r>
    2442:	6038      	str	r0, [r7, #0]
    2444:	0029      	movs	r1, r5
    2446:	0030      	movs	r0, r6
    2448:	f000 fb22 	bl	2a90 <_sbrk_r>
    244c:	1c43      	adds	r3, r0, #1
    244e:	d12b      	bne.n	24a8 <_malloc_r+0x9c>
    2450:	230c      	movs	r3, #12
    2452:	0030      	movs	r0, r6
    2454:	6033      	str	r3, [r6, #0]
    2456:	f000 fbeb 	bl	2c30 <__malloc_unlock>
    245a:	e003      	b.n	2464 <_malloc_r+0x58>
    245c:	2d00      	cmp	r5, #0
    245e:	dade      	bge.n	241e <_malloc_r+0x12>
    2460:	230c      	movs	r3, #12
    2462:	6033      	str	r3, [r6, #0]
    2464:	2000      	movs	r0, #0
    2466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2468:	6823      	ldr	r3, [r4, #0]
    246a:	1b5b      	subs	r3, r3, r5
    246c:	d419      	bmi.n	24a2 <_malloc_r+0x96>
    246e:	2b0b      	cmp	r3, #11
    2470:	d903      	bls.n	247a <_malloc_r+0x6e>
    2472:	6023      	str	r3, [r4, #0]
    2474:	18e4      	adds	r4, r4, r3
    2476:	6025      	str	r5, [r4, #0]
    2478:	e003      	b.n	2482 <_malloc_r+0x76>
    247a:	6863      	ldr	r3, [r4, #4]
    247c:	42a2      	cmp	r2, r4
    247e:	d10e      	bne.n	249e <_malloc_r+0x92>
    2480:	600b      	str	r3, [r1, #0]
    2482:	0030      	movs	r0, r6
    2484:	f000 fbd4 	bl	2c30 <__malloc_unlock>
    2488:	0020      	movs	r0, r4
    248a:	2207      	movs	r2, #7
    248c:	300b      	adds	r0, #11
    248e:	1d23      	adds	r3, r4, #4
    2490:	4390      	bics	r0, r2
    2492:	1ac2      	subs	r2, r0, r3
    2494:	4298      	cmp	r0, r3
    2496:	d0e6      	beq.n	2466 <_malloc_r+0x5a>
    2498:	1a1b      	subs	r3, r3, r0
    249a:	50a3      	str	r3, [r4, r2]
    249c:	e7e3      	b.n	2466 <_malloc_r+0x5a>
    249e:	6053      	str	r3, [r2, #4]
    24a0:	e7ef      	b.n	2482 <_malloc_r+0x76>
    24a2:	0022      	movs	r2, r4
    24a4:	6864      	ldr	r4, [r4, #4]
    24a6:	e7c2      	b.n	242e <_malloc_r+0x22>
    24a8:	2303      	movs	r3, #3
    24aa:	1cc4      	adds	r4, r0, #3
    24ac:	439c      	bics	r4, r3
    24ae:	42a0      	cmp	r0, r4
    24b0:	d0e1      	beq.n	2476 <_malloc_r+0x6a>
    24b2:	1a21      	subs	r1, r4, r0
    24b4:	0030      	movs	r0, r6
    24b6:	f000 faeb 	bl	2a90 <_sbrk_r>
    24ba:	1c43      	adds	r3, r0, #1
    24bc:	d1db      	bne.n	2476 <_malloc_r+0x6a>
    24be:	e7c7      	b.n	2450 <_malloc_r+0x44>
    24c0:	2000017c 	.word	0x2000017c
    24c4:	20000180 	.word	0x20000180

000024c8 <__sfputc_r>:
    24c8:	6893      	ldr	r3, [r2, #8]
    24ca:	b510      	push	{r4, lr}
    24cc:	3b01      	subs	r3, #1
    24ce:	6093      	str	r3, [r2, #8]
    24d0:	2b00      	cmp	r3, #0
    24d2:	da04      	bge.n	24de <__sfputc_r+0x16>
    24d4:	6994      	ldr	r4, [r2, #24]
    24d6:	42a3      	cmp	r3, r4
    24d8:	db07      	blt.n	24ea <__sfputc_r+0x22>
    24da:	290a      	cmp	r1, #10
    24dc:	d005      	beq.n	24ea <__sfputc_r+0x22>
    24de:	6813      	ldr	r3, [r2, #0]
    24e0:	1c58      	adds	r0, r3, #1
    24e2:	6010      	str	r0, [r2, #0]
    24e4:	7019      	strb	r1, [r3, #0]
    24e6:	0008      	movs	r0, r1
    24e8:	bd10      	pop	{r4, pc}
    24ea:	f7ff fc2f 	bl	1d4c <__swbuf_r>
    24ee:	0001      	movs	r1, r0
    24f0:	e7f9      	b.n	24e6 <__sfputc_r+0x1e>

000024f2 <__sfputs_r>:
    24f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24f4:	0006      	movs	r6, r0
    24f6:	000f      	movs	r7, r1
    24f8:	0014      	movs	r4, r2
    24fa:	18d5      	adds	r5, r2, r3
    24fc:	42ac      	cmp	r4, r5
    24fe:	d101      	bne.n	2504 <__sfputs_r+0x12>
    2500:	2000      	movs	r0, #0
    2502:	e007      	b.n	2514 <__sfputs_r+0x22>
    2504:	7821      	ldrb	r1, [r4, #0]
    2506:	003a      	movs	r2, r7
    2508:	0030      	movs	r0, r6
    250a:	f7ff ffdd 	bl	24c8 <__sfputc_r>
    250e:	3401      	adds	r4, #1
    2510:	1c43      	adds	r3, r0, #1
    2512:	d1f3      	bne.n	24fc <__sfputs_r+0xa>
    2514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002518 <_vfiprintf_r>:
    2518:	b5f0      	push	{r4, r5, r6, r7, lr}
    251a:	b0a1      	sub	sp, #132	; 0x84
    251c:	0006      	movs	r6, r0
    251e:	000c      	movs	r4, r1
    2520:	001f      	movs	r7, r3
    2522:	9203      	str	r2, [sp, #12]
    2524:	2800      	cmp	r0, #0
    2526:	d004      	beq.n	2532 <_vfiprintf_r+0x1a>
    2528:	6983      	ldr	r3, [r0, #24]
    252a:	2b00      	cmp	r3, #0
    252c:	d101      	bne.n	2532 <_vfiprintf_r+0x1a>
    252e:	f7ff fe09 	bl	2144 <__sinit>
    2532:	4b8e      	ldr	r3, [pc, #568]	; (276c <_vfiprintf_r+0x254>)
    2534:	429c      	cmp	r4, r3
    2536:	d11c      	bne.n	2572 <_vfiprintf_r+0x5a>
    2538:	6874      	ldr	r4, [r6, #4]
    253a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    253c:	07db      	lsls	r3, r3, #31
    253e:	d405      	bmi.n	254c <_vfiprintf_r+0x34>
    2540:	89a3      	ldrh	r3, [r4, #12]
    2542:	059b      	lsls	r3, r3, #22
    2544:	d402      	bmi.n	254c <_vfiprintf_r+0x34>
    2546:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2548:	f7ff fe9d 	bl	2286 <__retarget_lock_acquire_recursive>
    254c:	89a3      	ldrh	r3, [r4, #12]
    254e:	071b      	lsls	r3, r3, #28
    2550:	d502      	bpl.n	2558 <_vfiprintf_r+0x40>
    2552:	6923      	ldr	r3, [r4, #16]
    2554:	2b00      	cmp	r3, #0
    2556:	d11d      	bne.n	2594 <_vfiprintf_r+0x7c>
    2558:	0021      	movs	r1, r4
    255a:	0030      	movs	r0, r6
    255c:	f7ff fc4c 	bl	1df8 <__swsetup_r>
    2560:	2800      	cmp	r0, #0
    2562:	d017      	beq.n	2594 <_vfiprintf_r+0x7c>
    2564:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2566:	07db      	lsls	r3, r3, #31
    2568:	d50d      	bpl.n	2586 <_vfiprintf_r+0x6e>
    256a:	2001      	movs	r0, #1
    256c:	4240      	negs	r0, r0
    256e:	b021      	add	sp, #132	; 0x84
    2570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2572:	4b7f      	ldr	r3, [pc, #508]	; (2770 <_vfiprintf_r+0x258>)
    2574:	429c      	cmp	r4, r3
    2576:	d101      	bne.n	257c <_vfiprintf_r+0x64>
    2578:	68b4      	ldr	r4, [r6, #8]
    257a:	e7de      	b.n	253a <_vfiprintf_r+0x22>
    257c:	4b7d      	ldr	r3, [pc, #500]	; (2774 <_vfiprintf_r+0x25c>)
    257e:	429c      	cmp	r4, r3
    2580:	d1db      	bne.n	253a <_vfiprintf_r+0x22>
    2582:	68f4      	ldr	r4, [r6, #12]
    2584:	e7d9      	b.n	253a <_vfiprintf_r+0x22>
    2586:	89a3      	ldrh	r3, [r4, #12]
    2588:	059b      	lsls	r3, r3, #22
    258a:	d4ee      	bmi.n	256a <_vfiprintf_r+0x52>
    258c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    258e:	f7ff fe7b 	bl	2288 <__retarget_lock_release_recursive>
    2592:	e7ea      	b.n	256a <_vfiprintf_r+0x52>
    2594:	2300      	movs	r3, #0
    2596:	ad08      	add	r5, sp, #32
    2598:	616b      	str	r3, [r5, #20]
    259a:	3320      	adds	r3, #32
    259c:	766b      	strb	r3, [r5, #25]
    259e:	3310      	adds	r3, #16
    25a0:	76ab      	strb	r3, [r5, #26]
    25a2:	9707      	str	r7, [sp, #28]
    25a4:	9f03      	ldr	r7, [sp, #12]
    25a6:	783b      	ldrb	r3, [r7, #0]
    25a8:	2b00      	cmp	r3, #0
    25aa:	d001      	beq.n	25b0 <_vfiprintf_r+0x98>
    25ac:	2b25      	cmp	r3, #37	; 0x25
    25ae:	d14e      	bne.n	264e <_vfiprintf_r+0x136>
    25b0:	9b03      	ldr	r3, [sp, #12]
    25b2:	1afb      	subs	r3, r7, r3
    25b4:	9305      	str	r3, [sp, #20]
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	429f      	cmp	r7, r3
    25ba:	d00d      	beq.n	25d8 <_vfiprintf_r+0xc0>
    25bc:	9b05      	ldr	r3, [sp, #20]
    25be:	0021      	movs	r1, r4
    25c0:	0030      	movs	r0, r6
    25c2:	9a03      	ldr	r2, [sp, #12]
    25c4:	f7ff ff95 	bl	24f2 <__sfputs_r>
    25c8:	1c43      	adds	r3, r0, #1
    25ca:	d100      	bne.n	25ce <_vfiprintf_r+0xb6>
    25cc:	e0b5      	b.n	273a <_vfiprintf_r+0x222>
    25ce:	696a      	ldr	r2, [r5, #20]
    25d0:	9b05      	ldr	r3, [sp, #20]
    25d2:	4694      	mov	ip, r2
    25d4:	4463      	add	r3, ip
    25d6:	616b      	str	r3, [r5, #20]
    25d8:	783b      	ldrb	r3, [r7, #0]
    25da:	2b00      	cmp	r3, #0
    25dc:	d100      	bne.n	25e0 <_vfiprintf_r+0xc8>
    25de:	e0ac      	b.n	273a <_vfiprintf_r+0x222>
    25e0:	2201      	movs	r2, #1
    25e2:	1c7b      	adds	r3, r7, #1
    25e4:	9303      	str	r3, [sp, #12]
    25e6:	2300      	movs	r3, #0
    25e8:	4252      	negs	r2, r2
    25ea:	606a      	str	r2, [r5, #4]
    25ec:	a904      	add	r1, sp, #16
    25ee:	3254      	adds	r2, #84	; 0x54
    25f0:	1852      	adds	r2, r2, r1
    25f2:	602b      	str	r3, [r5, #0]
    25f4:	60eb      	str	r3, [r5, #12]
    25f6:	60ab      	str	r3, [r5, #8]
    25f8:	7013      	strb	r3, [r2, #0]
    25fa:	65ab      	str	r3, [r5, #88]	; 0x58
    25fc:	9b03      	ldr	r3, [sp, #12]
    25fe:	2205      	movs	r2, #5
    2600:	7819      	ldrb	r1, [r3, #0]
    2602:	485d      	ldr	r0, [pc, #372]	; (2778 <_vfiprintf_r+0x260>)
    2604:	f000 fb00 	bl	2c08 <memchr>
    2608:	9b03      	ldr	r3, [sp, #12]
    260a:	1c5f      	adds	r7, r3, #1
    260c:	2800      	cmp	r0, #0
    260e:	d120      	bne.n	2652 <_vfiprintf_r+0x13a>
    2610:	682a      	ldr	r2, [r5, #0]
    2612:	06d3      	lsls	r3, r2, #27
    2614:	d504      	bpl.n	2620 <_vfiprintf_r+0x108>
    2616:	2353      	movs	r3, #83	; 0x53
    2618:	a904      	add	r1, sp, #16
    261a:	185b      	adds	r3, r3, r1
    261c:	2120      	movs	r1, #32
    261e:	7019      	strb	r1, [r3, #0]
    2620:	0713      	lsls	r3, r2, #28
    2622:	d504      	bpl.n	262e <_vfiprintf_r+0x116>
    2624:	2353      	movs	r3, #83	; 0x53
    2626:	a904      	add	r1, sp, #16
    2628:	185b      	adds	r3, r3, r1
    262a:	212b      	movs	r1, #43	; 0x2b
    262c:	7019      	strb	r1, [r3, #0]
    262e:	9b03      	ldr	r3, [sp, #12]
    2630:	781b      	ldrb	r3, [r3, #0]
    2632:	2b2a      	cmp	r3, #42	; 0x2a
    2634:	d016      	beq.n	2664 <_vfiprintf_r+0x14c>
    2636:	2100      	movs	r1, #0
    2638:	68eb      	ldr	r3, [r5, #12]
    263a:	9f03      	ldr	r7, [sp, #12]
    263c:	783a      	ldrb	r2, [r7, #0]
    263e:	1c78      	adds	r0, r7, #1
    2640:	3a30      	subs	r2, #48	; 0x30
    2642:	4684      	mov	ip, r0
    2644:	2a09      	cmp	r2, #9
    2646:	d94f      	bls.n	26e8 <_vfiprintf_r+0x1d0>
    2648:	2900      	cmp	r1, #0
    264a:	d111      	bne.n	2670 <_vfiprintf_r+0x158>
    264c:	e017      	b.n	267e <_vfiprintf_r+0x166>
    264e:	3701      	adds	r7, #1
    2650:	e7a9      	b.n	25a6 <_vfiprintf_r+0x8e>
    2652:	4b49      	ldr	r3, [pc, #292]	; (2778 <_vfiprintf_r+0x260>)
    2654:	682a      	ldr	r2, [r5, #0]
    2656:	1ac0      	subs	r0, r0, r3
    2658:	2301      	movs	r3, #1
    265a:	4083      	lsls	r3, r0
    265c:	4313      	orrs	r3, r2
    265e:	602b      	str	r3, [r5, #0]
    2660:	9703      	str	r7, [sp, #12]
    2662:	e7cb      	b.n	25fc <_vfiprintf_r+0xe4>
    2664:	9b07      	ldr	r3, [sp, #28]
    2666:	1d19      	adds	r1, r3, #4
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	9107      	str	r1, [sp, #28]
    266c:	2b00      	cmp	r3, #0
    266e:	db01      	blt.n	2674 <_vfiprintf_r+0x15c>
    2670:	930b      	str	r3, [sp, #44]	; 0x2c
    2672:	e004      	b.n	267e <_vfiprintf_r+0x166>
    2674:	425b      	negs	r3, r3
    2676:	60eb      	str	r3, [r5, #12]
    2678:	2302      	movs	r3, #2
    267a:	4313      	orrs	r3, r2
    267c:	602b      	str	r3, [r5, #0]
    267e:	783b      	ldrb	r3, [r7, #0]
    2680:	2b2e      	cmp	r3, #46	; 0x2e
    2682:	d10a      	bne.n	269a <_vfiprintf_r+0x182>
    2684:	787b      	ldrb	r3, [r7, #1]
    2686:	2b2a      	cmp	r3, #42	; 0x2a
    2688:	d137      	bne.n	26fa <_vfiprintf_r+0x1e2>
    268a:	9b07      	ldr	r3, [sp, #28]
    268c:	3702      	adds	r7, #2
    268e:	1d1a      	adds	r2, r3, #4
    2690:	681b      	ldr	r3, [r3, #0]
    2692:	9207      	str	r2, [sp, #28]
    2694:	2b00      	cmp	r3, #0
    2696:	db2d      	blt.n	26f4 <_vfiprintf_r+0x1dc>
    2698:	9309      	str	r3, [sp, #36]	; 0x24
    269a:	2203      	movs	r2, #3
    269c:	7839      	ldrb	r1, [r7, #0]
    269e:	4837      	ldr	r0, [pc, #220]	; (277c <_vfiprintf_r+0x264>)
    26a0:	f000 fab2 	bl	2c08 <memchr>
    26a4:	2800      	cmp	r0, #0
    26a6:	d007      	beq.n	26b8 <_vfiprintf_r+0x1a0>
    26a8:	4b34      	ldr	r3, [pc, #208]	; (277c <_vfiprintf_r+0x264>)
    26aa:	682a      	ldr	r2, [r5, #0]
    26ac:	1ac0      	subs	r0, r0, r3
    26ae:	2340      	movs	r3, #64	; 0x40
    26b0:	4083      	lsls	r3, r0
    26b2:	4313      	orrs	r3, r2
    26b4:	3701      	adds	r7, #1
    26b6:	602b      	str	r3, [r5, #0]
    26b8:	7839      	ldrb	r1, [r7, #0]
    26ba:	1c7b      	adds	r3, r7, #1
    26bc:	2206      	movs	r2, #6
    26be:	4830      	ldr	r0, [pc, #192]	; (2780 <_vfiprintf_r+0x268>)
    26c0:	9303      	str	r3, [sp, #12]
    26c2:	7629      	strb	r1, [r5, #24]
    26c4:	f000 faa0 	bl	2c08 <memchr>
    26c8:	2800      	cmp	r0, #0
    26ca:	d045      	beq.n	2758 <_vfiprintf_r+0x240>
    26cc:	4b2d      	ldr	r3, [pc, #180]	; (2784 <_vfiprintf_r+0x26c>)
    26ce:	2b00      	cmp	r3, #0
    26d0:	d127      	bne.n	2722 <_vfiprintf_r+0x20a>
    26d2:	2207      	movs	r2, #7
    26d4:	9b07      	ldr	r3, [sp, #28]
    26d6:	3307      	adds	r3, #7
    26d8:	4393      	bics	r3, r2
    26da:	3308      	adds	r3, #8
    26dc:	9307      	str	r3, [sp, #28]
    26de:	696b      	ldr	r3, [r5, #20]
    26e0:	9a04      	ldr	r2, [sp, #16]
    26e2:	189b      	adds	r3, r3, r2
    26e4:	616b      	str	r3, [r5, #20]
    26e6:	e75d      	b.n	25a4 <_vfiprintf_r+0x8c>
    26e8:	210a      	movs	r1, #10
    26ea:	434b      	muls	r3, r1
    26ec:	4667      	mov	r7, ip
    26ee:	189b      	adds	r3, r3, r2
    26f0:	3909      	subs	r1, #9
    26f2:	e7a3      	b.n	263c <_vfiprintf_r+0x124>
    26f4:	2301      	movs	r3, #1
    26f6:	425b      	negs	r3, r3
    26f8:	e7ce      	b.n	2698 <_vfiprintf_r+0x180>
    26fa:	2300      	movs	r3, #0
    26fc:	001a      	movs	r2, r3
    26fe:	3701      	adds	r7, #1
    2700:	606b      	str	r3, [r5, #4]
    2702:	7839      	ldrb	r1, [r7, #0]
    2704:	1c78      	adds	r0, r7, #1
    2706:	3930      	subs	r1, #48	; 0x30
    2708:	4684      	mov	ip, r0
    270a:	2909      	cmp	r1, #9
    270c:	d903      	bls.n	2716 <_vfiprintf_r+0x1fe>
    270e:	2b00      	cmp	r3, #0
    2710:	d0c3      	beq.n	269a <_vfiprintf_r+0x182>
    2712:	9209      	str	r2, [sp, #36]	; 0x24
    2714:	e7c1      	b.n	269a <_vfiprintf_r+0x182>
    2716:	230a      	movs	r3, #10
    2718:	435a      	muls	r2, r3
    271a:	4667      	mov	r7, ip
    271c:	1852      	adds	r2, r2, r1
    271e:	3b09      	subs	r3, #9
    2720:	e7ef      	b.n	2702 <_vfiprintf_r+0x1ea>
    2722:	ab07      	add	r3, sp, #28
    2724:	9300      	str	r3, [sp, #0]
    2726:	0022      	movs	r2, r4
    2728:	0029      	movs	r1, r5
    272a:	0030      	movs	r0, r6
    272c:	4b16      	ldr	r3, [pc, #88]	; (2788 <_vfiprintf_r+0x270>)
    272e:	e000      	b.n	2732 <_vfiprintf_r+0x21a>
    2730:	bf00      	nop
    2732:	9004      	str	r0, [sp, #16]
    2734:	9b04      	ldr	r3, [sp, #16]
    2736:	3301      	adds	r3, #1
    2738:	d1d1      	bne.n	26de <_vfiprintf_r+0x1c6>
    273a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    273c:	07db      	lsls	r3, r3, #31
    273e:	d405      	bmi.n	274c <_vfiprintf_r+0x234>
    2740:	89a3      	ldrh	r3, [r4, #12]
    2742:	059b      	lsls	r3, r3, #22
    2744:	d402      	bmi.n	274c <_vfiprintf_r+0x234>
    2746:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2748:	f7ff fd9e 	bl	2288 <__retarget_lock_release_recursive>
    274c:	89a3      	ldrh	r3, [r4, #12]
    274e:	065b      	lsls	r3, r3, #25
    2750:	d500      	bpl.n	2754 <_vfiprintf_r+0x23c>
    2752:	e70a      	b.n	256a <_vfiprintf_r+0x52>
    2754:	980d      	ldr	r0, [sp, #52]	; 0x34
    2756:	e70a      	b.n	256e <_vfiprintf_r+0x56>
    2758:	ab07      	add	r3, sp, #28
    275a:	9300      	str	r3, [sp, #0]
    275c:	0022      	movs	r2, r4
    275e:	0029      	movs	r1, r5
    2760:	0030      	movs	r0, r6
    2762:	4b09      	ldr	r3, [pc, #36]	; (2788 <_vfiprintf_r+0x270>)
    2764:	f000 f882 	bl	286c <_printf_i>
    2768:	e7e3      	b.n	2732 <_vfiprintf_r+0x21a>
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	00002dc8 	.word	0x00002dc8
    2770:	00002de8 	.word	0x00002de8
    2774:	00002da8 	.word	0x00002da8
    2778:	00002e08 	.word	0x00002e08
    277c:	00002e0e 	.word	0x00002e0e
    2780:	00002e12 	.word	0x00002e12
    2784:	00000000 	.word	0x00000000
    2788:	000024f3 	.word	0x000024f3

0000278c <_printf_common>:
    278c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    278e:	0015      	movs	r5, r2
    2790:	9301      	str	r3, [sp, #4]
    2792:	688a      	ldr	r2, [r1, #8]
    2794:	690b      	ldr	r3, [r1, #16]
    2796:	000c      	movs	r4, r1
    2798:	9000      	str	r0, [sp, #0]
    279a:	4293      	cmp	r3, r2
    279c:	da00      	bge.n	27a0 <_printf_common+0x14>
    279e:	0013      	movs	r3, r2
    27a0:	0022      	movs	r2, r4
    27a2:	602b      	str	r3, [r5, #0]
    27a4:	3243      	adds	r2, #67	; 0x43
    27a6:	7812      	ldrb	r2, [r2, #0]
    27a8:	2a00      	cmp	r2, #0
    27aa:	d001      	beq.n	27b0 <_printf_common+0x24>
    27ac:	3301      	adds	r3, #1
    27ae:	602b      	str	r3, [r5, #0]
    27b0:	6823      	ldr	r3, [r4, #0]
    27b2:	069b      	lsls	r3, r3, #26
    27b4:	d502      	bpl.n	27bc <_printf_common+0x30>
    27b6:	682b      	ldr	r3, [r5, #0]
    27b8:	3302      	adds	r3, #2
    27ba:	602b      	str	r3, [r5, #0]
    27bc:	6822      	ldr	r2, [r4, #0]
    27be:	2306      	movs	r3, #6
    27c0:	0017      	movs	r7, r2
    27c2:	401f      	ands	r7, r3
    27c4:	421a      	tst	r2, r3
    27c6:	d027      	beq.n	2818 <_printf_common+0x8c>
    27c8:	0023      	movs	r3, r4
    27ca:	3343      	adds	r3, #67	; 0x43
    27cc:	781b      	ldrb	r3, [r3, #0]
    27ce:	1e5a      	subs	r2, r3, #1
    27d0:	4193      	sbcs	r3, r2
    27d2:	6822      	ldr	r2, [r4, #0]
    27d4:	0692      	lsls	r2, r2, #26
    27d6:	d430      	bmi.n	283a <_printf_common+0xae>
    27d8:	0022      	movs	r2, r4
    27da:	9901      	ldr	r1, [sp, #4]
    27dc:	9800      	ldr	r0, [sp, #0]
    27de:	9e08      	ldr	r6, [sp, #32]
    27e0:	3243      	adds	r2, #67	; 0x43
    27e2:	47b0      	blx	r6
    27e4:	1c43      	adds	r3, r0, #1
    27e6:	d025      	beq.n	2834 <_printf_common+0xa8>
    27e8:	2306      	movs	r3, #6
    27ea:	6820      	ldr	r0, [r4, #0]
    27ec:	682a      	ldr	r2, [r5, #0]
    27ee:	68e1      	ldr	r1, [r4, #12]
    27f0:	2500      	movs	r5, #0
    27f2:	4003      	ands	r3, r0
    27f4:	2b04      	cmp	r3, #4
    27f6:	d103      	bne.n	2800 <_printf_common+0x74>
    27f8:	1a8d      	subs	r5, r1, r2
    27fa:	43eb      	mvns	r3, r5
    27fc:	17db      	asrs	r3, r3, #31
    27fe:	401d      	ands	r5, r3
    2800:	68a3      	ldr	r3, [r4, #8]
    2802:	6922      	ldr	r2, [r4, #16]
    2804:	4293      	cmp	r3, r2
    2806:	dd01      	ble.n	280c <_printf_common+0x80>
    2808:	1a9b      	subs	r3, r3, r2
    280a:	18ed      	adds	r5, r5, r3
    280c:	2700      	movs	r7, #0
    280e:	42bd      	cmp	r5, r7
    2810:	d120      	bne.n	2854 <_printf_common+0xc8>
    2812:	2000      	movs	r0, #0
    2814:	e010      	b.n	2838 <_printf_common+0xac>
    2816:	3701      	adds	r7, #1
    2818:	68e3      	ldr	r3, [r4, #12]
    281a:	682a      	ldr	r2, [r5, #0]
    281c:	1a9b      	subs	r3, r3, r2
    281e:	42bb      	cmp	r3, r7
    2820:	ddd2      	ble.n	27c8 <_printf_common+0x3c>
    2822:	0022      	movs	r2, r4
    2824:	2301      	movs	r3, #1
    2826:	9901      	ldr	r1, [sp, #4]
    2828:	9800      	ldr	r0, [sp, #0]
    282a:	9e08      	ldr	r6, [sp, #32]
    282c:	3219      	adds	r2, #25
    282e:	47b0      	blx	r6
    2830:	1c43      	adds	r3, r0, #1
    2832:	d1f0      	bne.n	2816 <_printf_common+0x8a>
    2834:	2001      	movs	r0, #1
    2836:	4240      	negs	r0, r0
    2838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    283a:	2030      	movs	r0, #48	; 0x30
    283c:	18e1      	adds	r1, r4, r3
    283e:	3143      	adds	r1, #67	; 0x43
    2840:	7008      	strb	r0, [r1, #0]
    2842:	0021      	movs	r1, r4
    2844:	1c5a      	adds	r2, r3, #1
    2846:	3145      	adds	r1, #69	; 0x45
    2848:	7809      	ldrb	r1, [r1, #0]
    284a:	18a2      	adds	r2, r4, r2
    284c:	3243      	adds	r2, #67	; 0x43
    284e:	3302      	adds	r3, #2
    2850:	7011      	strb	r1, [r2, #0]
    2852:	e7c1      	b.n	27d8 <_printf_common+0x4c>
    2854:	0022      	movs	r2, r4
    2856:	2301      	movs	r3, #1
    2858:	9901      	ldr	r1, [sp, #4]
    285a:	9800      	ldr	r0, [sp, #0]
    285c:	9e08      	ldr	r6, [sp, #32]
    285e:	321a      	adds	r2, #26
    2860:	47b0      	blx	r6
    2862:	1c43      	adds	r3, r0, #1
    2864:	d0e6      	beq.n	2834 <_printf_common+0xa8>
    2866:	3701      	adds	r7, #1
    2868:	e7d1      	b.n	280e <_printf_common+0x82>
	...

0000286c <_printf_i>:
    286c:	b5f0      	push	{r4, r5, r6, r7, lr}
    286e:	b08b      	sub	sp, #44	; 0x2c
    2870:	9206      	str	r2, [sp, #24]
    2872:	000a      	movs	r2, r1
    2874:	3243      	adds	r2, #67	; 0x43
    2876:	9307      	str	r3, [sp, #28]
    2878:	9005      	str	r0, [sp, #20]
    287a:	9204      	str	r2, [sp, #16]
    287c:	7e0a      	ldrb	r2, [r1, #24]
    287e:	000c      	movs	r4, r1
    2880:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2882:	2a78      	cmp	r2, #120	; 0x78
    2884:	d807      	bhi.n	2896 <_printf_i+0x2a>
    2886:	2a62      	cmp	r2, #98	; 0x62
    2888:	d809      	bhi.n	289e <_printf_i+0x32>
    288a:	2a00      	cmp	r2, #0
    288c:	d100      	bne.n	2890 <_printf_i+0x24>
    288e:	e0c1      	b.n	2a14 <_printf_i+0x1a8>
    2890:	2a58      	cmp	r2, #88	; 0x58
    2892:	d100      	bne.n	2896 <_printf_i+0x2a>
    2894:	e08c      	b.n	29b0 <_printf_i+0x144>
    2896:	0026      	movs	r6, r4
    2898:	3642      	adds	r6, #66	; 0x42
    289a:	7032      	strb	r2, [r6, #0]
    289c:	e022      	b.n	28e4 <_printf_i+0x78>
    289e:	0010      	movs	r0, r2
    28a0:	3863      	subs	r0, #99	; 0x63
    28a2:	2815      	cmp	r0, #21
    28a4:	d8f7      	bhi.n	2896 <_printf_i+0x2a>
    28a6:	f000 f9df 	bl	2c68 <__gnu_thumb1_case_shi>
    28aa:	0016      	.short	0x0016
    28ac:	fff6001f 	.word	0xfff6001f
    28b0:	fff6fff6 	.word	0xfff6fff6
    28b4:	001ffff6 	.word	0x001ffff6
    28b8:	fff6fff6 	.word	0xfff6fff6
    28bc:	fff6fff6 	.word	0xfff6fff6
    28c0:	003600a8 	.word	0x003600a8
    28c4:	fff6009a 	.word	0xfff6009a
    28c8:	00b9fff6 	.word	0x00b9fff6
    28cc:	0036fff6 	.word	0x0036fff6
    28d0:	fff6fff6 	.word	0xfff6fff6
    28d4:	009e      	.short	0x009e
    28d6:	0026      	movs	r6, r4
    28d8:	681a      	ldr	r2, [r3, #0]
    28da:	3642      	adds	r6, #66	; 0x42
    28dc:	1d11      	adds	r1, r2, #4
    28de:	6019      	str	r1, [r3, #0]
    28e0:	6813      	ldr	r3, [r2, #0]
    28e2:	7033      	strb	r3, [r6, #0]
    28e4:	2301      	movs	r3, #1
    28e6:	e0a7      	b.n	2a38 <_printf_i+0x1cc>
    28e8:	6808      	ldr	r0, [r1, #0]
    28ea:	6819      	ldr	r1, [r3, #0]
    28ec:	1d0a      	adds	r2, r1, #4
    28ee:	0605      	lsls	r5, r0, #24
    28f0:	d50b      	bpl.n	290a <_printf_i+0x9e>
    28f2:	680d      	ldr	r5, [r1, #0]
    28f4:	601a      	str	r2, [r3, #0]
    28f6:	2d00      	cmp	r5, #0
    28f8:	da03      	bge.n	2902 <_printf_i+0x96>
    28fa:	232d      	movs	r3, #45	; 0x2d
    28fc:	9a04      	ldr	r2, [sp, #16]
    28fe:	426d      	negs	r5, r5
    2900:	7013      	strb	r3, [r2, #0]
    2902:	4b61      	ldr	r3, [pc, #388]	; (2a88 <_printf_i+0x21c>)
    2904:	270a      	movs	r7, #10
    2906:	9303      	str	r3, [sp, #12]
    2908:	e01b      	b.n	2942 <_printf_i+0xd6>
    290a:	680d      	ldr	r5, [r1, #0]
    290c:	601a      	str	r2, [r3, #0]
    290e:	0641      	lsls	r1, r0, #25
    2910:	d5f1      	bpl.n	28f6 <_printf_i+0x8a>
    2912:	b22d      	sxth	r5, r5
    2914:	e7ef      	b.n	28f6 <_printf_i+0x8a>
    2916:	680d      	ldr	r5, [r1, #0]
    2918:	6819      	ldr	r1, [r3, #0]
    291a:	1d08      	adds	r0, r1, #4
    291c:	6018      	str	r0, [r3, #0]
    291e:	062e      	lsls	r6, r5, #24
    2920:	d501      	bpl.n	2926 <_printf_i+0xba>
    2922:	680d      	ldr	r5, [r1, #0]
    2924:	e003      	b.n	292e <_printf_i+0xc2>
    2926:	066d      	lsls	r5, r5, #25
    2928:	d5fb      	bpl.n	2922 <_printf_i+0xb6>
    292a:	680d      	ldr	r5, [r1, #0]
    292c:	b2ad      	uxth	r5, r5
    292e:	4b56      	ldr	r3, [pc, #344]	; (2a88 <_printf_i+0x21c>)
    2930:	2708      	movs	r7, #8
    2932:	9303      	str	r3, [sp, #12]
    2934:	2a6f      	cmp	r2, #111	; 0x6f
    2936:	d000      	beq.n	293a <_printf_i+0xce>
    2938:	3702      	adds	r7, #2
    293a:	0023      	movs	r3, r4
    293c:	2200      	movs	r2, #0
    293e:	3343      	adds	r3, #67	; 0x43
    2940:	701a      	strb	r2, [r3, #0]
    2942:	6863      	ldr	r3, [r4, #4]
    2944:	60a3      	str	r3, [r4, #8]
    2946:	2b00      	cmp	r3, #0
    2948:	db03      	blt.n	2952 <_printf_i+0xe6>
    294a:	2204      	movs	r2, #4
    294c:	6821      	ldr	r1, [r4, #0]
    294e:	4391      	bics	r1, r2
    2950:	6021      	str	r1, [r4, #0]
    2952:	2d00      	cmp	r5, #0
    2954:	d102      	bne.n	295c <_printf_i+0xf0>
    2956:	9e04      	ldr	r6, [sp, #16]
    2958:	2b00      	cmp	r3, #0
    295a:	d00c      	beq.n	2976 <_printf_i+0x10a>
    295c:	9e04      	ldr	r6, [sp, #16]
    295e:	0028      	movs	r0, r5
    2960:	0039      	movs	r1, r7
    2962:	f7ff f82b 	bl	19bc <__aeabi_uidivmod>
    2966:	9b03      	ldr	r3, [sp, #12]
    2968:	3e01      	subs	r6, #1
    296a:	5c5b      	ldrb	r3, [r3, r1]
    296c:	7033      	strb	r3, [r6, #0]
    296e:	002b      	movs	r3, r5
    2970:	0005      	movs	r5, r0
    2972:	429f      	cmp	r7, r3
    2974:	d9f3      	bls.n	295e <_printf_i+0xf2>
    2976:	2f08      	cmp	r7, #8
    2978:	d109      	bne.n	298e <_printf_i+0x122>
    297a:	6823      	ldr	r3, [r4, #0]
    297c:	07db      	lsls	r3, r3, #31
    297e:	d506      	bpl.n	298e <_printf_i+0x122>
    2980:	6863      	ldr	r3, [r4, #4]
    2982:	6922      	ldr	r2, [r4, #16]
    2984:	4293      	cmp	r3, r2
    2986:	dc02      	bgt.n	298e <_printf_i+0x122>
    2988:	2330      	movs	r3, #48	; 0x30
    298a:	3e01      	subs	r6, #1
    298c:	7033      	strb	r3, [r6, #0]
    298e:	9b04      	ldr	r3, [sp, #16]
    2990:	1b9b      	subs	r3, r3, r6
    2992:	6123      	str	r3, [r4, #16]
    2994:	9b07      	ldr	r3, [sp, #28]
    2996:	0021      	movs	r1, r4
    2998:	9300      	str	r3, [sp, #0]
    299a:	9805      	ldr	r0, [sp, #20]
    299c:	9b06      	ldr	r3, [sp, #24]
    299e:	aa09      	add	r2, sp, #36	; 0x24
    29a0:	f7ff fef4 	bl	278c <_printf_common>
    29a4:	1c43      	adds	r3, r0, #1
    29a6:	d14c      	bne.n	2a42 <_printf_i+0x1d6>
    29a8:	2001      	movs	r0, #1
    29aa:	4240      	negs	r0, r0
    29ac:	b00b      	add	sp, #44	; 0x2c
    29ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29b0:	3145      	adds	r1, #69	; 0x45
    29b2:	700a      	strb	r2, [r1, #0]
    29b4:	4a34      	ldr	r2, [pc, #208]	; (2a88 <_printf_i+0x21c>)
    29b6:	9203      	str	r2, [sp, #12]
    29b8:	681a      	ldr	r2, [r3, #0]
    29ba:	6821      	ldr	r1, [r4, #0]
    29bc:	ca20      	ldmia	r2!, {r5}
    29be:	601a      	str	r2, [r3, #0]
    29c0:	0608      	lsls	r0, r1, #24
    29c2:	d516      	bpl.n	29f2 <_printf_i+0x186>
    29c4:	07cb      	lsls	r3, r1, #31
    29c6:	d502      	bpl.n	29ce <_printf_i+0x162>
    29c8:	2320      	movs	r3, #32
    29ca:	4319      	orrs	r1, r3
    29cc:	6021      	str	r1, [r4, #0]
    29ce:	2710      	movs	r7, #16
    29d0:	2d00      	cmp	r5, #0
    29d2:	d1b2      	bne.n	293a <_printf_i+0xce>
    29d4:	2320      	movs	r3, #32
    29d6:	6822      	ldr	r2, [r4, #0]
    29d8:	439a      	bics	r2, r3
    29da:	6022      	str	r2, [r4, #0]
    29dc:	e7ad      	b.n	293a <_printf_i+0xce>
    29de:	2220      	movs	r2, #32
    29e0:	6809      	ldr	r1, [r1, #0]
    29e2:	430a      	orrs	r2, r1
    29e4:	6022      	str	r2, [r4, #0]
    29e6:	0022      	movs	r2, r4
    29e8:	2178      	movs	r1, #120	; 0x78
    29ea:	3245      	adds	r2, #69	; 0x45
    29ec:	7011      	strb	r1, [r2, #0]
    29ee:	4a27      	ldr	r2, [pc, #156]	; (2a8c <_printf_i+0x220>)
    29f0:	e7e1      	b.n	29b6 <_printf_i+0x14a>
    29f2:	0648      	lsls	r0, r1, #25
    29f4:	d5e6      	bpl.n	29c4 <_printf_i+0x158>
    29f6:	b2ad      	uxth	r5, r5
    29f8:	e7e4      	b.n	29c4 <_printf_i+0x158>
    29fa:	681a      	ldr	r2, [r3, #0]
    29fc:	680d      	ldr	r5, [r1, #0]
    29fe:	1d10      	adds	r0, r2, #4
    2a00:	6949      	ldr	r1, [r1, #20]
    2a02:	6018      	str	r0, [r3, #0]
    2a04:	6813      	ldr	r3, [r2, #0]
    2a06:	062e      	lsls	r6, r5, #24
    2a08:	d501      	bpl.n	2a0e <_printf_i+0x1a2>
    2a0a:	6019      	str	r1, [r3, #0]
    2a0c:	e002      	b.n	2a14 <_printf_i+0x1a8>
    2a0e:	066d      	lsls	r5, r5, #25
    2a10:	d5fb      	bpl.n	2a0a <_printf_i+0x19e>
    2a12:	8019      	strh	r1, [r3, #0]
    2a14:	2300      	movs	r3, #0
    2a16:	9e04      	ldr	r6, [sp, #16]
    2a18:	6123      	str	r3, [r4, #16]
    2a1a:	e7bb      	b.n	2994 <_printf_i+0x128>
    2a1c:	681a      	ldr	r2, [r3, #0]
    2a1e:	1d11      	adds	r1, r2, #4
    2a20:	6019      	str	r1, [r3, #0]
    2a22:	6816      	ldr	r6, [r2, #0]
    2a24:	2100      	movs	r1, #0
    2a26:	0030      	movs	r0, r6
    2a28:	6862      	ldr	r2, [r4, #4]
    2a2a:	f000 f8ed 	bl	2c08 <memchr>
    2a2e:	2800      	cmp	r0, #0
    2a30:	d001      	beq.n	2a36 <_printf_i+0x1ca>
    2a32:	1b80      	subs	r0, r0, r6
    2a34:	6060      	str	r0, [r4, #4]
    2a36:	6863      	ldr	r3, [r4, #4]
    2a38:	6123      	str	r3, [r4, #16]
    2a3a:	2300      	movs	r3, #0
    2a3c:	9a04      	ldr	r2, [sp, #16]
    2a3e:	7013      	strb	r3, [r2, #0]
    2a40:	e7a8      	b.n	2994 <_printf_i+0x128>
    2a42:	6923      	ldr	r3, [r4, #16]
    2a44:	0032      	movs	r2, r6
    2a46:	9906      	ldr	r1, [sp, #24]
    2a48:	9805      	ldr	r0, [sp, #20]
    2a4a:	9d07      	ldr	r5, [sp, #28]
    2a4c:	47a8      	blx	r5
    2a4e:	1c43      	adds	r3, r0, #1
    2a50:	d0aa      	beq.n	29a8 <_printf_i+0x13c>
    2a52:	6823      	ldr	r3, [r4, #0]
    2a54:	079b      	lsls	r3, r3, #30
    2a56:	d415      	bmi.n	2a84 <_printf_i+0x218>
    2a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a5a:	68e0      	ldr	r0, [r4, #12]
    2a5c:	4298      	cmp	r0, r3
    2a5e:	daa5      	bge.n	29ac <_printf_i+0x140>
    2a60:	0018      	movs	r0, r3
    2a62:	e7a3      	b.n	29ac <_printf_i+0x140>
    2a64:	0022      	movs	r2, r4
    2a66:	2301      	movs	r3, #1
    2a68:	9906      	ldr	r1, [sp, #24]
    2a6a:	9805      	ldr	r0, [sp, #20]
    2a6c:	9e07      	ldr	r6, [sp, #28]
    2a6e:	3219      	adds	r2, #25
    2a70:	47b0      	blx	r6
    2a72:	1c43      	adds	r3, r0, #1
    2a74:	d098      	beq.n	29a8 <_printf_i+0x13c>
    2a76:	3501      	adds	r5, #1
    2a78:	68e3      	ldr	r3, [r4, #12]
    2a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2a7c:	1a9b      	subs	r3, r3, r2
    2a7e:	42ab      	cmp	r3, r5
    2a80:	dcf0      	bgt.n	2a64 <_printf_i+0x1f8>
    2a82:	e7e9      	b.n	2a58 <_printf_i+0x1ec>
    2a84:	2500      	movs	r5, #0
    2a86:	e7f7      	b.n	2a78 <_printf_i+0x20c>
    2a88:	00002e19 	.word	0x00002e19
    2a8c:	00002e2a 	.word	0x00002e2a

00002a90 <_sbrk_r>:
    2a90:	2300      	movs	r3, #0
    2a92:	b570      	push	{r4, r5, r6, lr}
    2a94:	4d06      	ldr	r5, [pc, #24]	; (2ab0 <_sbrk_r+0x20>)
    2a96:	0004      	movs	r4, r0
    2a98:	0008      	movs	r0, r1
    2a9a:	602b      	str	r3, [r5, #0]
    2a9c:	f7fe feea 	bl	1874 <_sbrk>
    2aa0:	1c43      	adds	r3, r0, #1
    2aa2:	d103      	bne.n	2aac <_sbrk_r+0x1c>
    2aa4:	682b      	ldr	r3, [r5, #0]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d000      	beq.n	2aac <_sbrk_r+0x1c>
    2aaa:	6023      	str	r3, [r4, #0]
    2aac:	bd70      	pop	{r4, r5, r6, pc}
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	20000184 	.word	0x20000184

00002ab4 <__sread>:
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	000c      	movs	r4, r1
    2ab8:	250e      	movs	r5, #14
    2aba:	5f49      	ldrsh	r1, [r1, r5]
    2abc:	f000 f8c0 	bl	2c40 <_read_r>
    2ac0:	2800      	cmp	r0, #0
    2ac2:	db03      	blt.n	2acc <__sread+0x18>
    2ac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2ac6:	181b      	adds	r3, r3, r0
    2ac8:	6563      	str	r3, [r4, #84]	; 0x54
    2aca:	bd70      	pop	{r4, r5, r6, pc}
    2acc:	89a3      	ldrh	r3, [r4, #12]
    2ace:	4a02      	ldr	r2, [pc, #8]	; (2ad8 <__sread+0x24>)
    2ad0:	4013      	ands	r3, r2
    2ad2:	81a3      	strh	r3, [r4, #12]
    2ad4:	e7f9      	b.n	2aca <__sread+0x16>
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	ffffefff 	.word	0xffffefff

00002adc <__swrite>:
    2adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ade:	001f      	movs	r7, r3
    2ae0:	898b      	ldrh	r3, [r1, #12]
    2ae2:	0005      	movs	r5, r0
    2ae4:	000c      	movs	r4, r1
    2ae6:	0016      	movs	r6, r2
    2ae8:	05db      	lsls	r3, r3, #23
    2aea:	d505      	bpl.n	2af8 <__swrite+0x1c>
    2aec:	230e      	movs	r3, #14
    2aee:	5ec9      	ldrsh	r1, [r1, r3]
    2af0:	2200      	movs	r2, #0
    2af2:	2302      	movs	r3, #2
    2af4:	f000 f874 	bl	2be0 <_lseek_r>
    2af8:	89a3      	ldrh	r3, [r4, #12]
    2afa:	4a05      	ldr	r2, [pc, #20]	; (2b10 <__swrite+0x34>)
    2afc:	0028      	movs	r0, r5
    2afe:	4013      	ands	r3, r2
    2b00:	81a3      	strh	r3, [r4, #12]
    2b02:	0032      	movs	r2, r6
    2b04:	230e      	movs	r3, #14
    2b06:	5ee1      	ldrsh	r1, [r4, r3]
    2b08:	003b      	movs	r3, r7
    2b0a:	f000 f81f 	bl	2b4c <_write_r>
    2b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b10:	ffffefff 	.word	0xffffefff

00002b14 <__sseek>:
    2b14:	b570      	push	{r4, r5, r6, lr}
    2b16:	000c      	movs	r4, r1
    2b18:	250e      	movs	r5, #14
    2b1a:	5f49      	ldrsh	r1, [r1, r5]
    2b1c:	f000 f860 	bl	2be0 <_lseek_r>
    2b20:	89a3      	ldrh	r3, [r4, #12]
    2b22:	1c42      	adds	r2, r0, #1
    2b24:	d103      	bne.n	2b2e <__sseek+0x1a>
    2b26:	4a05      	ldr	r2, [pc, #20]	; (2b3c <__sseek+0x28>)
    2b28:	4013      	ands	r3, r2
    2b2a:	81a3      	strh	r3, [r4, #12]
    2b2c:	bd70      	pop	{r4, r5, r6, pc}
    2b2e:	2280      	movs	r2, #128	; 0x80
    2b30:	0152      	lsls	r2, r2, #5
    2b32:	4313      	orrs	r3, r2
    2b34:	81a3      	strh	r3, [r4, #12]
    2b36:	6560      	str	r0, [r4, #84]	; 0x54
    2b38:	e7f8      	b.n	2b2c <__sseek+0x18>
    2b3a:	46c0      	nop			; (mov r8, r8)
    2b3c:	ffffefff 	.word	0xffffefff

00002b40 <__sclose>:
    2b40:	b510      	push	{r4, lr}
    2b42:	230e      	movs	r3, #14
    2b44:	5ec9      	ldrsh	r1, [r1, r3]
    2b46:	f000 f815 	bl	2b74 <_close_r>
    2b4a:	bd10      	pop	{r4, pc}

00002b4c <_write_r>:
    2b4c:	b570      	push	{r4, r5, r6, lr}
    2b4e:	0004      	movs	r4, r0
    2b50:	0008      	movs	r0, r1
    2b52:	0011      	movs	r1, r2
    2b54:	001a      	movs	r2, r3
    2b56:	2300      	movs	r3, #0
    2b58:	4d05      	ldr	r5, [pc, #20]	; (2b70 <_write_r+0x24>)
    2b5a:	602b      	str	r3, [r5, #0]
    2b5c:	f7fe fe62 	bl	1824 <_write>
    2b60:	1c43      	adds	r3, r0, #1
    2b62:	d103      	bne.n	2b6c <_write_r+0x20>
    2b64:	682b      	ldr	r3, [r5, #0]
    2b66:	2b00      	cmp	r3, #0
    2b68:	d000      	beq.n	2b6c <_write_r+0x20>
    2b6a:	6023      	str	r3, [r4, #0]
    2b6c:	bd70      	pop	{r4, r5, r6, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	20000184 	.word	0x20000184

00002b74 <_close_r>:
    2b74:	2300      	movs	r3, #0
    2b76:	b570      	push	{r4, r5, r6, lr}
    2b78:	4d06      	ldr	r5, [pc, #24]	; (2b94 <_close_r+0x20>)
    2b7a:	0004      	movs	r4, r0
    2b7c:	0008      	movs	r0, r1
    2b7e:	602b      	str	r3, [r5, #0]
    2b80:	f7fe fe8a 	bl	1898 <_close>
    2b84:	1c43      	adds	r3, r0, #1
    2b86:	d103      	bne.n	2b90 <_close_r+0x1c>
    2b88:	682b      	ldr	r3, [r5, #0]
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d000      	beq.n	2b90 <_close_r+0x1c>
    2b8e:	6023      	str	r3, [r4, #0]
    2b90:	bd70      	pop	{r4, r5, r6, pc}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	20000184 	.word	0x20000184

00002b98 <_fstat_r>:
    2b98:	2300      	movs	r3, #0
    2b9a:	b570      	push	{r4, r5, r6, lr}
    2b9c:	4d06      	ldr	r5, [pc, #24]	; (2bb8 <_fstat_r+0x20>)
    2b9e:	0004      	movs	r4, r0
    2ba0:	0008      	movs	r0, r1
    2ba2:	0011      	movs	r1, r2
    2ba4:	602b      	str	r3, [r5, #0]
    2ba6:	f7fe fe7a 	bl	189e <_fstat>
    2baa:	1c43      	adds	r3, r0, #1
    2bac:	d103      	bne.n	2bb6 <_fstat_r+0x1e>
    2bae:	682b      	ldr	r3, [r5, #0]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d000      	beq.n	2bb6 <_fstat_r+0x1e>
    2bb4:	6023      	str	r3, [r4, #0]
    2bb6:	bd70      	pop	{r4, r5, r6, pc}
    2bb8:	20000184 	.word	0x20000184

00002bbc <_isatty_r>:
    2bbc:	2300      	movs	r3, #0
    2bbe:	b570      	push	{r4, r5, r6, lr}
    2bc0:	4d06      	ldr	r5, [pc, #24]	; (2bdc <_isatty_r+0x20>)
    2bc2:	0004      	movs	r4, r0
    2bc4:	0008      	movs	r0, r1
    2bc6:	602b      	str	r3, [r5, #0]
    2bc8:	f7fe fe6e 	bl	18a8 <_isatty>
    2bcc:	1c43      	adds	r3, r0, #1
    2bce:	d103      	bne.n	2bd8 <_isatty_r+0x1c>
    2bd0:	682b      	ldr	r3, [r5, #0]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d000      	beq.n	2bd8 <_isatty_r+0x1c>
    2bd6:	6023      	str	r3, [r4, #0]
    2bd8:	bd70      	pop	{r4, r5, r6, pc}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	20000184 	.word	0x20000184

00002be0 <_lseek_r>:
    2be0:	b570      	push	{r4, r5, r6, lr}
    2be2:	0004      	movs	r4, r0
    2be4:	0008      	movs	r0, r1
    2be6:	0011      	movs	r1, r2
    2be8:	001a      	movs	r2, r3
    2bea:	2300      	movs	r3, #0
    2bec:	4d05      	ldr	r5, [pc, #20]	; (2c04 <_lseek_r+0x24>)
    2bee:	602b      	str	r3, [r5, #0]
    2bf0:	f7fe fe5c 	bl	18ac <_lseek>
    2bf4:	1c43      	adds	r3, r0, #1
    2bf6:	d103      	bne.n	2c00 <_lseek_r+0x20>
    2bf8:	682b      	ldr	r3, [r5, #0]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d000      	beq.n	2c00 <_lseek_r+0x20>
    2bfe:	6023      	str	r3, [r4, #0]
    2c00:	bd70      	pop	{r4, r5, r6, pc}
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	20000184 	.word	0x20000184

00002c08 <memchr>:
    2c08:	b2c9      	uxtb	r1, r1
    2c0a:	1882      	adds	r2, r0, r2
    2c0c:	4290      	cmp	r0, r2
    2c0e:	d101      	bne.n	2c14 <memchr+0xc>
    2c10:	2000      	movs	r0, #0
    2c12:	4770      	bx	lr
    2c14:	7803      	ldrb	r3, [r0, #0]
    2c16:	428b      	cmp	r3, r1
    2c18:	d0fb      	beq.n	2c12 <memchr+0xa>
    2c1a:	3001      	adds	r0, #1
    2c1c:	e7f6      	b.n	2c0c <memchr+0x4>
	...

00002c20 <__malloc_lock>:
    2c20:	b510      	push	{r4, lr}
    2c22:	4802      	ldr	r0, [pc, #8]	; (2c2c <__malloc_lock+0xc>)
    2c24:	f7ff fb2f 	bl	2286 <__retarget_lock_acquire_recursive>
    2c28:	bd10      	pop	{r4, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	20000178 	.word	0x20000178

00002c30 <__malloc_unlock>:
    2c30:	b510      	push	{r4, lr}
    2c32:	4802      	ldr	r0, [pc, #8]	; (2c3c <__malloc_unlock+0xc>)
    2c34:	f7ff fb28 	bl	2288 <__retarget_lock_release_recursive>
    2c38:	bd10      	pop	{r4, pc}
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	20000178 	.word	0x20000178

00002c40 <_read_r>:
    2c40:	b570      	push	{r4, r5, r6, lr}
    2c42:	0004      	movs	r4, r0
    2c44:	0008      	movs	r0, r1
    2c46:	0011      	movs	r1, r2
    2c48:	001a      	movs	r2, r3
    2c4a:	2300      	movs	r3, #0
    2c4c:	4d05      	ldr	r5, [pc, #20]	; (2c64 <_read_r+0x24>)
    2c4e:	602b      	str	r3, [r5, #0]
    2c50:	f7fe fdc6 	bl	17e0 <_read>
    2c54:	1c43      	adds	r3, r0, #1
    2c56:	d103      	bne.n	2c60 <_read_r+0x20>
    2c58:	682b      	ldr	r3, [r5, #0]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d000      	beq.n	2c60 <_read_r+0x20>
    2c5e:	6023      	str	r3, [r4, #0]
    2c60:	bd70      	pop	{r4, r5, r6, pc}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	20000184 	.word	0x20000184

00002c68 <__gnu_thumb1_case_shi>:
    2c68:	b403      	push	{r0, r1}
    2c6a:	4671      	mov	r1, lr
    2c6c:	0849      	lsrs	r1, r1, #1
    2c6e:	0040      	lsls	r0, r0, #1
    2c70:	0049      	lsls	r1, r1, #1
    2c72:	5e09      	ldrsh	r1, [r1, r0]
    2c74:	0049      	lsls	r1, r1, #1
    2c76:	448e      	add	lr, r1
    2c78:	bc03      	pop	{r0, r1}
    2c7a:	4770      	bx	lr
    2c7c:	20656854 	.word	0x20656854
    2c80:	7074756f 	.word	0x7074756f
    2c84:	69207475 	.word	0x69207475
    2c88:	72742073 	.word	0x72742073
    2c8c:	65676769 	.word	0x65676769
    2c90:	20646572 	.word	0x20646572
    2c94:	54207962 	.word	0x54207962
    2c98:	6f632043 	.word	0x6f632043
    2c9c:	65746e75 	.word	0x65746e75
    2ca0:	000a0d72 	.word	0x000a0d72
    2ca4:	47202d2d 	.word	0x47202d2d
    2ca8:	69747465 	.word	0x69747465
    2cac:	5320676e 	.word	0x5320676e
    2cb0:	74726174 	.word	0x74726174
    2cb4:	45206465 	.word	0x45206465
    2cb8:	706d6178 	.word	0x706d6178
    2cbc:	2d20656c 	.word	0x2d20656c
    2cc0:	2d0a0d2d 	.word	0x2d0a0d2d
    2cc4:	4153202d 	.word	0x4153202d
    2cc8:	3031444d 	.word	0x3031444d
    2ccc:	4c50585f 	.word	0x4c50585f
    2cd0:	454e4941 	.word	0x454e4941
    2cd4:	494d5f44 	.word	0x494d5f44
    2cd8:	2d20494e 	.word	0x2d20494e
    2cdc:	2d0a0d2d 	.word	0x2d0a0d2d
    2ce0:	6f43202d 	.word	0x6f43202d
    2ce4:	6c69706d 	.word	0x6c69706d
    2ce8:	203a6465 	.word	0x203a6465
    2cec:	20636544 	.word	0x20636544
    2cf0:	32203032 	.word	0x32203032
    2cf4:	20313230 	.word	0x20313230
    2cf8:	323a3231 	.word	0x323a3231
    2cfc:	33313a35 	.word	0x33313a35
    2d00:	0d2d2d20 	.word	0x0d2d2d20
    2d04:	202d2d0a 	.word	0x202d2d0a
    2d08:	73657250 	.word	0x73657250
    2d0c:	676e6973 	.word	0x676e6973
    2d10:	646e6120 	.word	0x646e6120
    2d14:	6c657220 	.word	0x6c657220
    2d18:	65736165 	.word	0x65736165
    2d1c:	74756220 	.word	0x74756220
    2d20:	206e6f74 	.word	0x206e6f74
    2d24:	20305753 	.word	0x20305753
    2d28:	756f6873 	.word	0x756f6873
    2d2c:	6d20646c 	.word	0x6d20646c
    2d30:	20656b61 	.word	0x20656b61
    2d34:	3044454c 	.word	0x3044454c
    2d38:	206e6f20 	.word	0x206e6f20
    2d3c:	20646e61 	.word	0x20646e61
    2d40:	2066666f 	.word	0x2066666f
    2d44:	000d2d2d 	.word	0x000d2d2d

00002d48 <tc_interrupt_vectors.0>:
    2d48:	00000e0d 42000800 42000c00 42001000     .......B...B...B
    2d58:	000b0a09 00000ec6 00000ec2 00000ec2     ................
    2d68:	00000f2a 00000f2a 00000eda 00000ecc     *...*...........
    2d78:	00000ee0 00000f1a 00000fb0 00000f90     ................
    2d88:	00000f90 0000101a 00000fa2 00000fbc     ................
    2d98:	00000f94 00000fca 0000100a              ............

00002da4 <_global_impure_ptr>:
    2da4:	20000010                                ... 

00002da8 <__sf_fake_stderr>:
	...

00002dc8 <__sf_fake_stdin>:
	...

00002de8 <__sf_fake_stdout>:
	...
    2e08:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2e18:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2e28:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2e38:	00006665                                ef..

00002e3c <_init>:
    2e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e42:	bc08      	pop	{r3}
    2e44:	469e      	mov	lr, r3
    2e46:	4770      	bx	lr

00002e48 <__frame_dummy_init_array_entry>:
    2e48:	00b5 0000                                   ....

00002e4c <_fini>:
    2e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e52:	bc08      	pop	{r3}
    2e54:	469e      	mov	lr, r3
    2e56:	4770      	bx	lr

00002e58 <__do_global_dtors_aux_fini_array_entry>:
    2e58:	008d 0000                                   ....
